{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "\u003cstyle type=\"text/css\"\u003e\nn {\n    padding: 1em;\n    width: 100%;\n    display: block;\n    margin: 28px 0;\n}\nn.info {\n    background-color: rgba(0, 51, 160, 0.1);\n}\nn.warning {\n    background-color: #fdf6e3;\n}\ni:before {\n    margin-right: 6px;\n}\nnh {\n    font-size: 1.5rem;\n    font-weight: 700;\n    line-height: 1.1;\n    display: block;\n}\nnb {\n    margin-top: 10px;\n    padding-left: 22px;\n    display: block;\n}\n\u003c/style\u003e\n\n# Overview\n\n\u003cn class=\"info\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-info-circle\"\u003e\u003c/i\u003e\nSomething new!\n\u003c/nh\u003e\n\u003cnb\u003e\nWelcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.\u003cbr\u003e\n\u003cbr\u003e\nWant to access the legacy API docs? You can find them [here](https://www.samsara.com/api).\u003cbr\u003e\n\u003cbr\u003e\n*Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api) as we continue to transition all endpoints over. Check back here for updates!*\u003cbr\u003e\n\u003cbr\u003e\nSubmit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)!\n\u003c/nb\u003e\n\u003c/n\u003e\n\nSamsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.\n\nThe Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.\n\nIf you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).\n\n## Endpoints\n\nAll our APIs can be accessed through HTTP requests to URLs like:\n\n```\nhttps://api.samsara.com/\u003cendpoint\u003e\n```\n\nFor EU customers, this URL will be:\n\n```\nhttps://api.eu.samsara.com/\u003cendpoint\u003e\n```\n\n\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nNote\n\u003c/nh\u003e\n\u003cnb\u003e\nLegacy endpoints will have the URL: `https://api.samsara.com/v1/\u003cendpoint\u003e` or `https://api.eu.samsara.com/v1/\u003cendpoint\u003e`\n\u003c/nb\u003e\n\u003c/n\u003e\n\n## Authentication\n\nTo authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings-\u003eOrganization-\u003eAPI Tokens`.\n\nYour API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.\n\nAuthentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:\n\n```curl\nAuthorization: Bearer {access_token}\n```\n\nAll API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.\n\n## Common Structures\n\nYou can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).\n",
    "title": "Samsara API",
    "version": "2019-09-13"
  },
  "host": "api.samsara.com",
  "paths": {
    "/addresses": {
      "get": {
        "description": "Returns a list of all addresses in an organization",
        "tags": [
          "Addresses"
        ],
        "summary": "List all addresses",
        "operationId": "getAddresses",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all addresses in the organization",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Address"
                  }
                },
                "pagination": {
                  "$ref": "#/definitions/paginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new address in the organization",
        "tags": [
          "Addresses"
        ],
        "summary": "Create an address",
        "operationId": "createAddress",
        "parameters": [
          {
            "description": "The address to create.",
            "name": "address",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AddressCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created address object with ID",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Address"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/addresses/{id}": {
      "get": {
        "description": "Returns a specific address.",
        "tags": [
          "Addresses"
        ],
        "summary": "Get information about a specific address",
        "operationId": "getAddressById",
        "responses": {
          "200": {
            "description": "Newly created address object with ID",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Address"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete a specific address.",
        "tags": [
          "Addresses"
        ],
        "summary": "Delete a specific address",
        "operationId": "deleteAddressById",
        "responses": {
          "204": {
            "description": "Empty success body"
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Update a specific address.",
        "tags": [
          "Addresses"
        ],
        "summary": "Update information about a specific address",
        "operationId": "updateAddressById",
        "parameters": [
          {
            "description": "The address fields to update.",
            "name": "address",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AddressPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated address object with ID.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Address"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique Samsara ID for the address",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/contacts": {
      "get": {
        "description": "Returns a list of all contacts in an organization.",
        "tags": [
          "Contacts"
        ],
        "summary": "List all contacts",
        "operationId": "getContacts",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all contacts",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Contact"
                  }
                },
                "pagination": {
                  "$ref": "#/definitions/paginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Add a contact to the organization",
        "tags": [
          "Contacts"
        ],
        "summary": "Add a contact to the organization",
        "operationId": "createContact",
        "parameters": [
          {
            "description": "Add a contact.",
            "name": "contact",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact was successfully added.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Contact"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/contacts/{id}": {
      "get": {
        "description": "Get a specific contact's information.",
        "tags": [
          "Contacts"
        ],
        "summary": "Get a contact's information",
        "operationId": "getContactById",
        "responses": {
          "200": {
            "description": "Returns the specified contact.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Contact"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete the given contact.",
        "tags": [
          "Contacts"
        ],
        "summary": "Delete a contact",
        "operationId": "deleteContactById",
        "responses": {
          "204": {
            "description": "Returns an empty success response."
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Update a specific contact's information.",
        "tags": [
          "Contacts"
        ],
        "summary": "Update a contact's information",
        "operationId": "updateContactById",
        "parameters": [
          {
            "description": "Updates to the contact.",
            "name": "contact",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ContactInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated contact object with given ID.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Contact"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique identifier for the contact.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/fleet/document-types": {
      "get": {
        "description": "Get information about all document types.",
        "tags": [
          "Documents"
        ],
        "summary": "Get all document types",
        "operationId": "getDocumentTypes",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all of the document types.",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DocumentType"
                  }
                },
                "pagination": {
                  "$ref": "#/definitions/paginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/documents": {
      "get": {
        "description": "Get all documents",
        "tags": [
          "Documents"
        ],
        "summary": "Get all documents",
        "operationId": "getDocuments",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "A start time in RFC 3339 format. Queries documents on updatedAtTime (if the document has not been updated, updatedAtTime is equal to createdAtTime). Defaults to current time - 1 hour if not provided. (Example: 2019-06-13T19:08:25Z).",
            "name": "startTime",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "An end time in RFC 3339 format. Queries documents on updatedAtTime (if the document has not been updated, updatedAtTime is equal to createdAtTime). Defaults to current time if not provided. (Example: 2019-06-13T19:08:25Z).",
            "name": "endTime",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A document type ID.",
            "name": "documentTypeId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all documents",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Document"
                  }
                },
                "pagination": {
                  "$ref": "#/definitions/paginationResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a document for a particular driver at a specific route stop.",
        "tags": [
          "Documents"
        ],
        "summary": "Create document",
        "operationId": "createDocument",
        "parameters": [
          {
            "description": "The document to create.",
            "name": "document",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DocumentCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created document object, including the new document ID.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Document"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/drivers": {
      "get": {
        "description": "Get all drivers in organization.",
        "tags": [
          "Drivers"
        ],
        "summary": "List all drivers",
        "operationId": "getDrivers",
        "parameters": [
          {
            "type": "boolean",
            "description": "If value is true, only drivers that are deactivated will appear in the response. This parameter will default to false if not provided (fetching only active drivers).",
            "name": "isDeactivated",
            "in": "query"
          },
          {
            "maximum": 512,
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of tag IDs.",
            "name": "tagIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all driver objects.",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Driver"
                  }
                },
                "pagination": {
                  "$ref": "#/definitions/paginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Add a driver to the organization.",
        "tags": [
          "Drivers"
        ],
        "summary": "Create a driver",
        "operationId": "createDriver",
        "parameters": [
          {
            "description": "The driver to create.",
            "name": "driver",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DriverCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created driver object, with Samsara-generated ID.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Driver"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/drivers/safety-scores": {
      "get": {
        "description": "Fetch safety scores for all drivers in the organization in a given time period.",
        "tags": [
          "Safety"
        ],
        "summary": "Fetch all safety scores by driver",
        "operationId": "getOrgDriverSafetyScores",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "description": "Beginning of the time range, specified in RFC 3339 time.",
            "name": "startTime",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "string",
            "description": "End of the time range, specified in RFC 3339 time.",
            "name": "endTime",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Safety scores for all vehicles in the organization",
            "schema": {
              "$ref": "#/definitions/OrgSafetyScoresResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/drivers/{id}": {
      "get": {
        "description": "Get information about a driver.",
        "tags": [
          "Drivers"
        ],
        "summary": "Get a driver",
        "operationId": "getDriverById",
        "responses": {
          "200": {
            "description": "Returns the specified driver.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Driver"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Update a specific driver's information. This can also be used to activate or de-activate a given driver",
        "tags": [
          "Drivers"
        ],
        "summary": "Update driver properties",
        "operationId": "updateDriverById",
        "parameters": [
          {
            "description": "Updates to the driver properties.",
            "name": "driver",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DriverUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated driver object, with ID.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Driver"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of the driver. This can either be the Samsara-specified ID, or an external ID.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/fleet/equipment": {
      "get": {
        "description": "Returns a list of all equipment in an organization, ordered by equipment ID.",
        "tags": [
          "Equipment"
        ],
        "summary": "List all equipment",
        "operationId": "getEquipmentList",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of tag IDs.",
            "name": "tagIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all equipment objects, and pagination parameters.",
            "schema": {
              "$ref": "#/definitions/EquipmentListResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/equipment/locations": {
      "get": {
        "description": "This endpoint returns the current equipment location values for all equipment.",
        "tags": [
          "Equipment"
        ],
        "summary": "Fetch location snapshots for all equipment",
        "operationId": "getEquipmentLocationSnapshot",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of tag IDs.",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of equipment IDs.",
            "name": "equipmentIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all equipment location objects and pagination parameters",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EquipmentLocationSnapshotResponse"
                  }
                },
                "pagination": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/definitions/timeseriesPaginationResponse"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/equipment/locations/feed": {
      "get": {
        "description": "This endpoint returns the current equipment locations values for all equipment (AG24s connected with a 7-way cable), as well as all new equipment locations values ingested by Samsara. This endpoint will allow you to fetch all new data coming into the Samsara system.",
        "tags": [
          "Equipment"
        ],
        "summary": "Fetch current locations for all equipment",
        "operationId": "getEquipmentLocationsFeed",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of tag IDs.",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of equipment IDs.",
            "name": "equipmentIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all equipment locations objects and pagination parameters",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EquipmentLocationsResponse"
                  }
                },
                "pagination": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/definitions/timeseriesPaginationResponse"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/equipment/locations/history": {
      "get": {
        "description": "This endpoint returns all known location changes during the given time range for all powered equipment (AG24s connected with a 7-way cable).",
        "tags": [
          "Equipment"
        ],
        "summary": "Fetch historical locations for all equipment",
        "operationId": "getEquipmentLocationsHistory",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "startTime",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "endTime",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of tag IDs.",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of equipment IDs.",
            "name": "equipmentIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all equipment locations and pagination parameters",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EquipmentLocationsResponse"
                  }
                },
                "pagination": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/definitions/timeseriesPaginationResponse"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/equipment/stats": {
      "get": {
        "description": "This endpoint returns the current equipment stats values for all equipment.",
        "tags": [
          "Equipment"
        ],
        "summary": "Fetch stat snapshots for all equipment",
        "operationId": "getEquipmentStatsSnapshot",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of tag IDs.",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of equipment IDs.",
            "name": "equipmentIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "engineStates",
                "fuelPercents",
                "engineRpm",
                "engineSeconds"
              ],
              "type": "string",
              "format": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma separated list of stat types.",
            "name": "types",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all equipment stat objects and pagination parameters",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EquipmentStatsSnapshotResponse"
                  }
                },
                "pagination": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/definitions/timeseriesPaginationResponse"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/equipment/stats/feed": {
      "get": {
        "description": "This endpoint returns the current equipment stats values for all equipment (AG24s connected with a 7-way cable), as well as all new equipment stats values ingested by Samsara. This endpoint will allow you to fetch all new data coming into the Samsara system.",
        "tags": [
          "Equipment"
        ],
        "summary": "Fetch current stats for all equipment",
        "operationId": "getEquipmentStatsFeed",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of tag IDs.",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of equipment IDs.",
            "name": "equipmentIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "engineStates",
                "fuelPercents",
                "engineRpm",
                "engineSeconds"
              ],
              "type": "string",
              "format": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma separated list of stat types.",
            "name": "types",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all equipment stat objects and pagination parameters",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EquipmentStatsResponse"
                  }
                },
                "pagination": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/definitions/timeseriesPaginationResponse"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/equipment/stats/history": {
      "get": {
        "description": "This endpoint returns all known state changes during the given time range for all powered equipment (AG24s connected with a 7-way cable).",
        "tags": [
          "Equipment"
        ],
        "summary": "Fetch historical stats for all equipment",
        "operationId": "getEquipmentStatsHistory",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "startTime",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "endTime",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of tag IDs.",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of equipment IDs.",
            "name": "equipmentIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "engineStates",
                "fuelPercents",
                "engineRpm",
                "engineSeconds"
              ],
              "type": "string",
              "format": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma separated list of stat types.",
            "name": "types",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all equipment stat objects and pagination parameters",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EquipmentStatsResponse"
                  }
                },
                "pagination": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/definitions/timeseriesPaginationResponse"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/equipment/{id}": {
      "get": {
        "description": "Get information about a specific equipment.",
        "tags": [
          "Equipment"
        ],
        "summary": "List a single equipment's information",
        "operationId": "getEquipmentById",
        "parameters": [
          {
            "type": "string",
            "description": "Samsara ID of the equipment.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the specified equipment object.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/EquipmentResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/routes/{id}": {
      "get": {
        "description": "Get a route",
        "tags": [
          "Routes"
        ],
        "summary": "Get information about a single route",
        "operationId": "getRoute",
        "responses": {
          "200": {
            "description": "Returns the specified route.",
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/definitions/Route"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique identifier for the route.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/fleet/unassigned-driving-segments": {
      "get": {
        "description": "Get the unassigned driving segments for a specified range.",
        "tags": [
          "Unassigned Driving Segments"
        ],
        "summary": "Get all unassigned driving segments",
        "operationId": "getUnassignedDrivingSegments",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "collectionFormat": "csv",
            "description": "ID(s) of a specific unassigned driving segment(s). Takes precedent over filter time range params. Supports multiple comma-separated IDs using csv format (ex. ?id=1,2,3).",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Beginning of the filter time range, specified in RFC 3339 format. (Example: 2019-06-13T18:08:25Z) Filters based on the server timestamp, i.e. createAtTime.",
            "name": "startTime",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "End of the filter time range, specified in RFC 3339 format. (Example: 2019-06-13T19:08:25Z) Filters based on the server timestamp, i.e. createAtTime.",
            "name": "endTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Unassigned driving segments for provided time range.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/UnassignedDrivingSegmentListResponse"
                },
                "pagination": {
                  "$ref": "#/definitions/paginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/unassigned-driving-segments/{id}": {
      "patch": {
        "description": "Assign an unassigned driving segment to a driver.",
        "tags": [
          "Unassigned Driving Segments"
        ],
        "summary": "Assign an unassigned driving segment",
        "operationId": "patchUnassignedDrivingSegments",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of a specific unassigned driving segment.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Driver ID to assign this driving segment to, and/or an annotation reason.",
            "name": "updateUnassignedDrivingSegment",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "annotation",
                "driverId"
              ],
              "properties": {
                "annotation": {
                  "$ref": "#/definitions/annotation"
                },
                "driverId": {
                  "$ref": "#/definitions/driverId"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated unassigned driving segment.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/UnassignedDrivingSegmentResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/vehicles": {
      "get": {
        "description": "Returns a list of all vehicles in an organization, ordered by vehicle ID.",
        "tags": [
          "Vehicles"
        ],
        "summary": "List all vehicles",
        "operationId": "listVehiclesKondo",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of tag IDs.",
            "name": "tagIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all vehicle objects, and pagination parameters.",
            "schema": {
              "$ref": "#/definitions/VehicleListResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/vehicles/harsh-events": {
      "get": {
        "description": "Fetch all harsh events for the organization in a given time period.",
        "tags": [
          "Safety"
        ],
        "summary": "Fetch all harsh events",
        "operationId": "getOrgHarshEvents",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "description": "Beginning of the time range, specified in RFC 3339 time.",
            "name": "startTime",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "string",
            "description": "End of the time range, specified in RFC 3339 time.",
            "name": "endTime",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Harsh events for the organization",
            "schema": {
              "$ref": "#/definitions/OrgHarshEventsKondoResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/vehicles/locations": {
      "get": {
        "description": "This endpoint returns the latest known locations for all vehicles.",
        "tags": [
          "Vehicles"
        ],
        "summary": "Fetch last known vehicle locations",
        "operationId": "getVehicleLocations",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of tag IDs.",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of vehicle IDs.",
            "name": "vehicleIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all locations for the specified vehicles and time range.",
            "schema": {
              "$ref": "#/definitions/VehicleLocationsSnapshotResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/vehicles/locations/feed": {
      "get": {
        "description": "This endpoint allows you to fetch a continuous feed of all vehicle locations. In order to follow the feed, you can follow the pagination `endCursor` cursor continuously.  If there is not yet a `hasNextPage=true` for the feed follow, then we recommend you wait and retry in 5 seconds.\n\nPlease note that you cannot provide both the pagination `after` parameter *and* scoping parameters like `tagIds` or `ids`.",
        "tags": [
          "Vehicles"
        ],
        "summary": "Fetch vehicle locations as an on-going feed",
        "operationId": "getVehicleLocationsFeed",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of tag IDs.",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of vehicle IDs.",
            "name": "vehicleIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all locations for the specified vehicles.",
            "schema": {
              "$ref": "#/definitions/VehicleLocationsListResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/vehicles/locations/history": {
      "get": {
        "description": "This endpoint allows you to both fetch historical locations for a vehicle.\n\nYou must pass in a `startTime` and `endTime` range. This will return all known locations for a vehicle during a given time range.",
        "tags": [
          "Vehicles"
        ],
        "summary": "Fetch vehicle locations history",
        "operationId": "getVehicleLocationsHistory",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "startTime",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "endTime",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of tag IDs.",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of vehicle IDs.",
            "name": "vehicleIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all locations for the specified vehicles and time range.",
            "schema": {
              "$ref": "#/definitions/VehicleLocationsListResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/vehicles/safety-scores": {
      "get": {
        "description": "Fetch safety scores for all vehicles in the organization in a given time period.",
        "tags": [
          "Safety"
        ],
        "summary": "Fetch all safety scores by vehicle",
        "operationId": "getOrgVehicleSafetyScores",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "description": "Beginning of the time range, specified in RFC 3339 time.",
            "name": "startTime",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "string",
            "description": "End of the time range, specified in RFC 3339 time.",
            "name": "endTime",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Safety scores for all vehicles in the organization",
            "schema": {
              "$ref": "#/definitions/OrgSafetyScoresResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/vehicles/stats/feed": {
      "get": {
        "description": "This endpoint returns the stat values from a start time for specified vehicles. Passing the cursor on subsequent calls allows you to fetch all new data coming into the system.",
        "tags": [
          "Vehicles"
        ],
        "summary": "Fetch stats as a feed from a start time to the present.",
        "operationId": "getVehicleStatsFeed",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "startTime",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of tag IDs.",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of vehicle IDs.",
            "name": "vehicleIds",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A stat type. This is used to specify the stats you want to query for on stats endpoints.",
            "name": "types",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all vehicle stats for the specified vehicles and time range.",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/VehicleStatsResponse"
                  }
                },
                "pagination": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/definitions/timeseriesPaginationResponse"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/vehicles/{id}": {
      "get": {
        "description": "Get information about a specific vehicle.",
        "tags": [
          "Vehicles"
        ],
        "summary": "Get a vehicle's information",
        "operationId": "getVehicleById",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the vehicle. This can either be the Samsara-specified ID, or an external ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the specified vehicle object.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/VehicleResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Patches the given vehicle object.",
        "tags": [
          "Vehicles"
        ],
        "summary": "Update a vehicle's information",
        "operationId": "updateVehicleById",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the vehicle. This can either be the Samsara-specified ID, or an external ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Fields that can be patched on a vehicle.",
            "name": "vehiclePatchBody",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/VehiclePatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the specified vehicle object.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/VehicleResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique identifier for the vehicle.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/messages": {
      "post": {
        "description": "Send a message to a list of driver ids.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Messages"
        ],
        "summary": "Create a message",
        "operationId": "createMessagesKondo",
        "parameters": [
          {
            "description": "Text to send to a list of driverIds.",
            "name": "createMessages",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "driverIds",
                "text"
              ],
              "properties": {
                "driverIds": {
                  "description": "IDs of the drivers for whom the messages are sent to.",
                  "type": "array",
                  "items": {
                    "type": "number",
                    "format": "int64",
                    "example": 555
                  },
                  "example": [
                    111,
                    222,
                    333
                  ]
                },
                "text": {
                  "description": "The text sent in the message.",
                  "type": "string",
                  "maxLength": 65533,
                  "minLength": 1,
                  "example": "This is a message."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the created messages.",
            "schema": {
              "description": "A list of created messages.",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Messages"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/tags": {
      "get": {
        "description": "Return all of the tags for an organization.",
        "tags": [
          "Tags"
        ],
        "summary": "List all tags",
        "operationId": "getAllTags",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of tags.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Tag"
                  }
                },
                "pagination": {
                  "$ref": "#/definitions/paginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Create a new tag for the organization.",
        "tags": [
          "Tags"
        ],
        "summary": "Create a tag",
        "operationId": "createTag",
        "parameters": [
          {
            "name": "Tag create body.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TagUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created tag object, including the new tag ID.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Tag"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/tags/{id}": {
      "get": {
        "description": "Fetch a tag by id.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tags"
        ],
        "summary": "Get a tag object",
        "operationId": "getTagById",
        "responses": {
          "200": {
            "description": "The tag corresponding to request id.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Tag"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update a tag with a new name and new members. This API call would replace all old members of a tag with new members specified in the request body.",
        "tags": [
          "Tags"
        ],
        "summary": "Update a tag",
        "operationId": "putTagById",
        "parameters": [
          {
            "name": "Tag update body.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TagUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated tag data.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Tag"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Permanently deletes a tag.",
        "tags": [
          "Tags"
        ],
        "summary": "Delete a tag",
        "operationId": "deleteTagById",
        "responses": {
          "204": {
            "description": "Successfully deleted the tag. No response body is returned."
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique identifier for the tag.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/user-roles": {
      "get": {
        "description": "Returns a list of all user roles in an organization.",
        "tags": [
          "Users"
        ],
        "summary": "List all user roles",
        "operationId": "getUserRoles",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List all user roles.",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/UserRole"
                  }
                },
                "pagination": {
                  "$ref": "#/definitions/paginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "description": "Returns a list of all users in an organization.",
        "tags": [
          "Users"
        ],
        "summary": "List all users",
        "operationId": "getUsers",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List all users.",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  }
                },
                "pagination": {
                  "$ref": "#/definitions/paginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Add a user to the organization.",
        "tags": [
          "Users"
        ],
        "summary": "Create a user",
        "operationId": "createUser",
        "parameters": [
          {
            "description": "The user to create.",
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created user object with ID.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/User"
                }
              },
              "example": {
                "data": {
                  "authType": "default",
                  "email": "user@company.com",
                  "id": "123",
                  "name": "Bob Smith",
                  "roles": [
                    {
                      "role": {
                        "id": "8a9371af-82d1-4158-bf91-4ecc8d3a114c",
                        "name": "Full Admin"
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "description": "Get a specific user's information.",
        "tags": [
          "Users"
        ],
        "summary": "Get a user's information",
        "operationId": "getUserById",
        "responses": {
          "200": {
            "description": "Returns the specified user.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete the given user.",
        "tags": [
          "Users"
        ],
        "summary": "Delete a user",
        "operationId": "deleteUserById",
        "responses": {
          "204": {
            "description": "Returns an empty success response."
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Update a specific user's information.",
        "tags": [
          "Users"
        ],
        "summary": "Update a user's information",
        "operationId": "updateUserById",
        "parameters": [
          {
            "description": "Updates to the user.",
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated user object with ID.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique identifier for the user.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/fleet/dispatch/routes": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch all of the dispatch routes.",
        "tags": [
          "Routes"
        ],
        "summary": "Get all routes",
        "operationId": "V1fetchAllDispatchRoutes",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Optional group ID if the organization has multiple groups (uncommon).",
            "name": "group_id",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.",
            "name": "end_time",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.",
            "name": "duration",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "All dispatch route objects for the group.",
            "schema": {
              "$ref": "#/definitions/V1DispatchRoutes"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nCreate a new dispatch route.",
        "tags": [
          "Routes"
        ],
        "summary": "Create a new route",
        "operationId": "V1createDispatchRoute",
        "parameters": [
          {
            "name": "createDispatchRouteParams",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/V1DispatchRouteCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created route object including the new route ID.",
            "schema": {
              "$ref": "#/definitions/V1DispatchRoute"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/dispatch/routes/job_updates": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch all updates to a job including route data in the last 24 hours or subsequent to an sequence ID. Returns a maximum of 500 job updates. If more than 500 job updates are available, another request made with the prior request's sequence_id will return the next set of available job updates.",
        "tags": [
          "Routes"
        ],
        "summary": "Get route updates",
        "operationId": "V1fetchAllRouteJobUpdates",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Optional group ID if the organization has multiple groups (uncommon).",
            "name": "group_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sequence ID from the response payload of the last request. Defaults to fetching updates from last 24 hours.",
            "name": "sequence_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Optionally set include=route to include route object in response payload.",
            "name": "include",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "All job updates on routes.",
            "schema": {
              "$ref": "#/definitions/V1allRouteJobUpdates"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/dispatch/routes/{route_id}": {
      "put": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nUpdate the dispatch route. Allowable updates include adding or removing jobs, and changing job locations and times.",
        "tags": [
          "Routes"
        ],
        "summary": "Update a route",
        "operationId": "V1updateDispatchRouteById",
        "parameters": [
          {
            "name": "updateDispatchRouteParams",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/V1DispatchRouteUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated route corresponding to route_id.",
            "schema": {
              "$ref": "#/definitions/V1DispatchRoute"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nDelete a dispatch route and its associated jobs.",
        "tags": [
          "Routes"
        ],
        "summary": "Delete a route",
        "operationId": "V1deleteDispatchRouteById",
        "responses": {
          "200": {
            "description": "Successfully deleted the dispatch route. No response body is returned."
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "description": "ID of the dispatch route. Must contain only digits 0-9.",
          "name": "route_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/fleet/dispatch/routes/{route_id}/history": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch the history of a dispatch route.",
        "tags": [
          "Routes"
        ],
        "summary": "Get route history",
        "operationId": "V1getDispatchRouteHistory",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp representing the start of the period to fetch, inclusive. Used in combination with end_time. Defaults to 0.",
            "name": "start_time",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp representing the end of the period to fetch, inclusive. Used in combination with start_time. Defaults to nowMs.",
            "name": "end_time",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of the route with history. Must contain only digits 0-9.",
            "name": "route_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The historical route state changes between start_time and end_time.",
            "schema": {
              "$ref": "#/definitions/V1DispatchRouteHistory"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/drivers/{driver_id}/documents": {
      "post": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nCreate a document for the given driver.",
        "tags": [
          "Documents"
        ],
        "summary": "Create a document",
        "operationId": "V1createDriverDocument",
        "parameters": [
          {
            "description": "To create a document for a given document type, the document type's uuid needs to be passed in to documentTypeUuid. The list of fields passed in should match the document type’s list of field types in the correct order. In other words, a field's valueType and value (i.e. only one of: stringValue, numberValue, or photoValue) at index _i_ should match with the document field type’s valueType at index _i_.",
            "name": "createDocumentParams",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/V1DocumentCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the created document.",
            "schema": {
              "$ref": "#/definitions/V1Document"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "description": "ID of the driver for whom the document is created. Must contain only digits 0-9.",
          "name": "driver_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/fleet/drivers/{driver_id}/documents/{document_id}": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetches a single document submission by a specific driver.",
        "tags": [
          "Documents"
        ],
        "summary": "Fetches a document",
        "operationId": "V1getDriverDocumentByIdAndDriverId",
        "responses": {
          "200": {
            "description": "Returns the specified document.",
            "schema": {
              "$ref": "#/definitions/V1Document"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "description": "ID of the driver who submitted the document. Must contain only digits 0-9.",
          "name": "driver_id",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "ID of document.",
          "name": "document_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/fleet/hos_authentication_logs": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet the HOS (hours of service) signin and signout logs for the specified driver. The response includes 4 fields that are now deprecated.",
        "tags": [
          "Hours of Service"
        ],
        "summary": "Get HOS signin and signout",
        "operationId": "V1getFleetHosAuthenticationLogs",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Optional group ID if the organization has multiple groups (uncommon).",
            "name": "groupId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Driver ID to query.",
            "name": "driverId",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Beginning of the time range, specified in milliseconds UNIX time.",
            "name": "startMs",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "End of the time range, specified in milliseconds UNIX time.",
            "name": "endMs",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "HOS authentication logs for the specified driver.",
            "schema": {
              "$ref": "#/definitions/V1HosAuthenticationLogsResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/hos_logs": {
      "post": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet the HOS (hours of service) logs for the specified driver. This method returns all the HOS statuses that the driver was in during this time period.",
        "tags": [
          "Hours of Service"
        ],
        "summary": "Get HOS logs for a specific driver",
        "operationId": "V1getFleetHosLogs",
        "parameters": [
          {
            "name": "hosLogsParam",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "groupId",
                "driverId",
                "startMs",
                "endMs"
              ],
              "properties": {
                "driverId": {
                  "description": "Driver ID to query.",
                  "type": "integer",
                  "format": "int64",
                  "example": 444
                },
                "endMs": {
                  "description": "End of the time range, specified in milliseconds UNIX time.",
                  "type": "integer",
                  "example": 1462881998034
                },
                "groupId": {
                  "description": "Optional group ID if the organization has multiple groups (uncommon).",
                  "type": "integer",
                  "format": "int64",
                  "example": 101
                },
                "startMs": {
                  "description": "Beginning of the time range, specified in milliseconds UNIX time.",
                  "type": "integer",
                  "example": 1462878398034
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HOS logs for the specified driver.",
            "schema": {
              "$ref": "#/definitions/V1HosLogsResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/hos_logs_summary": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet the current HOS status for all drivers in the group. Note that this includes inactive as well as active drivers. You may need to upgrade your API token to version 2019-07-31 or later to leverage response pagination. [See here](https://kb.samsara.com/hc/en-us/articles/360026132972-Upgrading-API-Tokens)",
        "tags": [
          "Hours of Service"
        ],
        "summary": "Get current HOS status for all drivers",
        "operationId": "V1getFleetHosLogsSummary",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Optional group ID if the organization has multiple groups (uncommon).",
            "name": "groupId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the 'limit' parameter.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "description": "Pagination parameter indicating the number of results to return in this request. Used in conjunction with 'after'.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "HOS logs for the specified driver.",
            "schema": {
              "$ref": "#/definitions/V1HosLogsSummaryResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/maintenance/dvirs": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet DVIRs for the org within provided time constraints",
        "tags": [
          "Maintenance"
        ],
        "summary": "Get DVIRs",
        "operationId": "V1getDvirs",
        "parameters": [
          {
            "type": "integer",
            "description": "time in millis until the last dvir log.",
            "name": "end_ms",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "time in millis which corresponds to the duration before the end_ms.",
            "name": "duration_ms",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Optional group ID if the organization has multiple groups (uncommon).",
            "name": "groupId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "DVIRs for the specified duration.",
            "schema": {
              "$ref": "#/definitions/V1DvirListResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nCreate a new dvir, marking a vehicle or trailer safe or unsafe.",
        "tags": [
          "Maintenance"
        ],
        "summary": "Create a new DVIR",
        "operationId": "V1createDvir",
        "parameters": [
          {
            "description": "DVIR creation body",
            "name": "V1createDvirParam",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "safe",
                "inspectionType",
                "userEmail"
              ],
              "properties": {
                "inspectionType": {
                  "description": "Only type 'mechanic' is currently accepted.",
                  "type": "string",
                  "enum": [
                    "mechanic"
                  ],
                  "example": "mechanic"
                },
                "mechanicNotes": {
                  "description": "Any notes from the mechanic.",
                  "type": "string",
                  "example": "Replaced headlight on passenger side."
                },
                "odometerMiles": {
                  "description": "The current odometer of the vehicle.",
                  "type": "integer",
                  "example": 38426
                },
                "previousDefectsCorrected": {
                  "description": "Whether any previous defects were corrected. If this vehicle or trailer was previously marked unsafe, and this DVIR marks it as safe, either previousDefectsCorrected or previousDefectsIgnored must be true.",
                  "type": "boolean",
                  "example": true
                },
                "previousDefectsIgnored": {
                  "description": "Whether any previous defects were ignored. If this vehicle or trailer was previously marked unsafe, and this DVIR marks it as safe, either previousDefectsCorrected or previousDefectsIgnored must be true.",
                  "type": "boolean",
                  "example": false
                },
                "safe": {
                  "description": "Whether or not this vehicle or trailer is safe to drive.",
                  "type": "string",
                  "enum": [
                    "safe",
                    "unsafe"
                  ],
                  "example": "safe"
                },
                "trailerId": {
                  "description": "Id of trailer being inspected. Either vehicleId or trailerId must be provided.",
                  "type": "integer",
                  "example": 11
                },
                "userEmail": {
                  "description": "The Samsara login email for the person creating the DVIR. The email must correspond to a Samsara user's email.",
                  "type": "string",
                  "example": "j.smith@yahoo.com"
                },
                "vehicleId": {
                  "description": "Id of vehicle being inspected. Either vehicleId or trailerId must be provided.",
                  "type": "integer",
                  "example": 10
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created DVIR.",
            "schema": {
              "$ref": "#/definitions/V1DvirBase"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/maintenance/list": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet list of the vehicles with any engine faults or check light data.",
        "tags": [
          "Maintenance"
        ],
        "summary": "Get vehicles with engine faults or check lights",
        "operationId": "V1getFleetMaintenanceList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Optional group ID if the organization has multiple groups (uncommon).",
            "name": "groupId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of vehicles and maintenance information about each.",
            "schema": {
              "type": "object",
              "properties": {
                "vehicles": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/V1VehicleMaintenance"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/messages": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet all messages.",
        "tags": [
          "Messages"
        ],
        "summary": "Get all messages.",
        "operationId": "V1getMessages",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Time in unix milliseconds that represents the end of time range of messages to return. Used in combination with durationMs. Defaults to now.",
            "name": "endMs",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.",
            "name": "durationMs",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the fetched messages from most recently sent to least recently sent.",
            "schema": {
              "description": "A list of messages.",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/V1MessagesResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/trips": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet historical trips data for specified vehicle. This method returns a set of historical trips data for the specified vehicle in the specified time range.",
        "tags": [
          "Trips"
        ],
        "summary": "Get vehicle trips",
        "operationId": "V1getFleetTrips",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Optional group ID if the organization has multiple groups (uncommon).",
            "name": "groupId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Vehicle ID to query.",
            "name": "vehicleId",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "Beginning of the time range, specified in milliseconds UNIX time. Limited to a 90 day window with respect to startMs and endMs",
            "name": "startMs",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "End of the time range, specified in milliseconds UNIX time.",
            "name": "endMs",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of trips taken by the requested vehicle within the specified timeframe. Ongoing trips will be returned with 9223372036854775807 as their endMs.",
            "schema": {
              "$ref": "#/definitions/V1TripResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/vehicles/{vehicle_id}/locations": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch locations for a given vehicle between a start/end time. The maximum query duration is one hour.",
        "tags": [
          "Vehicles"
        ],
        "summary": "Get historical vehicle locations for a specific vehicle",
        "operationId": "V1getVehicleLocations",
        "responses": {
          "200": {
            "description": "Returns locations for a given vehicle between a start/end time, with a maximum query duration of one hour.",
            "schema": {
              "$ref": "#/definitions/V1FleetVehicleLocations"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "description": "ID of the vehicle with the associated routes. Must contain only digits 0-9.",
          "name": "vehicle_id",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "Time in Unix epoch milliseconds for the start of the query (cannot exceed 1 hour)",
          "name": "startMs",
          "in": "query",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "Time in Unix epoch milliseconds for the end of the query (cannot exceed 1 hour)",
          "name": "endMs",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1/industrial/data": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch all of the data inputs for a group.",
        "tags": [
          "Industrial"
        ],
        "summary": "Get industrial data",
        "operationId": "V1getAllDataInputs",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Optional group ID if the organization has multiple groups (uncommon).",
            "name": "group_id",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp in unix milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. defaults to nowMs.",
            "name": "startMs",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp in unix milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Defaults to nowMs.",
            "name": "endMs",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of data inputs.",
            "schema": {
              "type": "object",
              "properties": {
                "dataInputs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/V1DataInputHistoryResponse"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/industrial/data/{data_input_id}": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch datapoints from a given data input.",
        "tags": [
          "Industrial"
        ],
        "summary": "Get industrial data from a specific device",
        "operationId": "V1getDataInput",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of the data input. Must contain only digits 0-9.",
            "name": "data_input_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp in unix milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. defaults to nowMs.",
            "name": "startMs",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp in unix milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Defaults to nowMs.",
            "name": "endMs",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns datapoints for the given data input",
            "schema": {
              "$ref": "#/definitions/V1DataInputHistoryResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/industrial/vision/cameras": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch all cameras.",
        "tags": [
          "Industrial"
        ],
        "summary": "Fetch industrial cameras",
        "operationId": "V1getCameras",
        "responses": {
          "200": {
            "description": "Returns details about a camera.",
            "schema": {
              "$ref": "#/definitions/V1VisionCamerasResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/industrial/vision/cameras/{camera_id}/programs": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch configured programs on the camera.",
        "tags": [
          "Industrial"
        ],
        "summary": "Fetch industrial camera programs",
        "operationId": "V1getVisionProgramsByCamera",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The camera_id should be valid for the given accessToken.",
            "name": "camera_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns programs configured on the camera.",
            "schema": {
              "$ref": "#/definitions/V1ProgramsForTheCameraResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/industrial/vision/run/camera/{camera_id}": {
      "get": {
        "description": "Fetch the latest run for a camera or program by default. If startedAtMs is supplied, fetch the specific run that corresponds to that start time.",
        "tags": [
          "Industrial"
        ],
        "summary": "Fetch the latest run for a camera or program",
        "operationId": "V1getVisionLatestRunCamera",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The camera_id should be valid for the given accessToken.",
            "name": "camera_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The configured program's ID on the camera.",
            "name": "program_id",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "EndMs is an optional param. It will default to the current time.",
            "name": "startedAtMs",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Include is a filter parameter. Accepts 'pass', 'reject' or 'no_read'.",
            "name": "include",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Limit is an integer value from 1 to 1,000.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details for this run.",
            "schema": {
              "$ref": "#/definitions/V1VisionRunByCameraResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/industrial/vision/runs": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch runs.",
        "tags": [
          "Industrial"
        ],
        "summary": "Fetch runs",
        "operationId": "V1getVisionRuns",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "DurationMs is a required param. This works with the EndMs parameter. Indicates the duration in which the visionRuns will be fetched",
            "name": "durationMs",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "EndMs is an optional param. It will default to the current time.",
            "name": "endMs",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Return runs.",
            "schema": {
              "$ref": "#/definitions/V1VisionRunsResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/industrial/vision/runs/{camera_id}": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch runs by camera.",
        "tags": [
          "Industrial"
        ],
        "summary": "Fetch runs by camera",
        "operationId": "getVisionRunsByCamera",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The camera_id should be valid for the given accessToken.",
            "name": "camera_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "DurationMs is a required param. This works with the EndMs parameter. Indicates the duration in which the visionRuns will be fetched",
            "name": "durationMs",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "EndMs is an optional param. It will default to the current time.",
            "name": "endMs",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Return runs by cameraId.",
            "schema": {
              "$ref": "#/definitions/V1VisionRunsByCameraResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/industrial/vision/runs/{camera_id}/{program_id}/{started_at_ms}": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch runs by camera and program.",
        "tags": [
          "Industrial"
        ],
        "summary": "Fetch runs by camera and program",
        "operationId": "V1getVisionRunsByCameraAndProgram",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The camera_id should be valid for the given accessToken.",
            "name": "camera_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The configured program's ID on the camera.",
            "name": "program_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Started_at_ms is a required param. Indicates the start time of the run to be fetched.",
            "name": "started_at_ms",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Include is a filter parameter. Accepts 'pass', 'reject' or 'no_read'.",
            "name": "include",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Return runs by camera ID and program ID.",
            "schema": {
              "$ref": "#/definitions/V1VisionRunsByCameraAndProgramResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/machines/history": {
      "post": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet historical data for machine objects. This method returns a set of historical data for all machines in a group",
        "tags": [
          "Industrial"
        ],
        "summary": "Get machine history",
        "operationId": "V1getMachinesHistory",
        "parameters": [
          {
            "description": "Group ID and time range to query for events",
            "name": "historyParam",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "groupId",
                "startMs",
                "endMs"
              ],
              "properties": {
                "endMs": {
                  "description": "End of the time range, specified in milliseconds UNIX time.",
                  "type": "integer",
                  "example": 1462881998034
                },
                "groupId": {
                  "description": "Optional group ID if the organization has multiple groups (uncommon).",
                  "type": "integer",
                  "format": "int64",
                  "example": 101
                },
                "startMs": {
                  "description": "Beginning of the time range, specified in milliseconds UNIX time.",
                  "type": "integer",
                  "example": 1462878398034
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of machine results objects, each containing a time and a datapoint.",
            "schema": {
              "$ref": "#/definitions/V1MachineHistoryResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/machines/list": {
      "post": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet machine objects. This method returns a list of the machine objects in the Samsara Cloud and information about them.",
        "tags": [
          "Industrial"
        ],
        "summary": "Get machines",
        "operationId": "V1getMachines",
        "parameters": [
          {
            "description": "Optional group ID if the organization has multiple groups (uncommon).",
            "name": "V1groupIdBodyParam",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "groupId"
              ],
              "properties": {
                "groupId": {
                  "description": "Optional group ID if the organization has multiple groups (uncommon).",
                  "type": "integer",
                  "format": "int64",
                  "example": 101
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of machine objects.",
            "schema": {
              "type": "object",
              "properties": {
                "machines": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/V1Machine"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/sensors/cargo": {
      "post": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet cargo monitor status (empty / full) for requested sensors.",
        "tags": [
          "Sensors"
        ],
        "summary": "Get cargo status",
        "operationId": "V1getSensorsCargo",
        "parameters": [
          {
            "description": "Group ID and list of sensor IDs to query.",
            "name": "V1sensorParam",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "groupId",
                "sensors"
              ],
              "properties": {
                "groupId": {
                  "description": "Optional group ID if the organization has multiple groups (uncommon).",
                  "type": "integer",
                  "format": "int64",
                  "example": 101
                },
                "sensors": {
                  "description": "List of sensor IDs to query.",
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "example": [
                    122
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of sensor objects containing the current cargo status reported by each sensor.",
            "schema": {
              "$ref": "#/definitions/V1CargoResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/sensors/door": {
      "post": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet door monitor status (closed / open) for requested sensors.",
        "tags": [
          "Sensors"
        ],
        "summary": "Get door status",
        "operationId": "V1getSensorsDoor",
        "parameters": [
          {
            "description": "Group ID and list of sensor IDs to query.",
            "name": "V1sensorParam",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "groupId",
                "sensors"
              ],
              "properties": {
                "groupId": {
                  "description": "Optional group ID if the organization has multiple groups (uncommon).",
                  "type": "integer",
                  "format": "int64",
                  "example": 101
                },
                "sensors": {
                  "description": "List of sensor IDs to query.",
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "example": [
                    122
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of sensor objects containing the current door status reported by each sensor.",
            "schema": {
              "$ref": "#/definitions/V1DoorResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/sensors/history": {
      "post": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet historical data for specified sensors. This method returns a set of historical data for the specified sensors in the specified time range and at the specified time resolution.",
        "tags": [
          "Sensors"
        ],
        "summary": "Get sensor history",
        "operationId": "V1getSensorsHistory",
        "parameters": [
          {
            "description": "Group ID, time range and resolution, and list of sensor ID, field pairs to query.",
            "name": "historyParam",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "groupId",
                "startMs",
                "endMs",
                "stepMs",
                "series"
              ],
              "properties": {
                "endMs": {
                  "description": "End of the time range, specified in milliseconds UNIX time.",
                  "type": "integer",
                  "example": 1462881998034
                },
                "fillMissing": {
                  "type": "string",
                  "default": "withNull",
                  "enum": [
                    "withNull",
                    "withPrevious"
                  ]
                },
                "groupId": {
                  "description": "Optional group ID if the organization has multiple groups (uncommon).",
                  "type": "integer",
                  "format": "int64",
                  "example": 101
                },
                "series": {
                  "type": "array",
                  "items": {
                    "description": "V1Sensor ID and field to query.",
                    "type": "object",
                    "required": [
                      "widgetId",
                      "field"
                    ],
                    "properties": {
                      "field": {
                        "description": "Field to query.",
                        "type": "string",
                        "enum": [
                          "ambientTemperature",
                          "cargoPercent",
                          "currentLoop1Raw",
                          "currentLoop1Mapped",
                          "currentLoop2Raw",
                          "currentLoop2Mapped",
                          "doorClosed",
                          "humidity",
                          "pmPowerTotal",
                          "pmPhase1Power",
                          "pmPhase2Power",
                          "pmPhase3Power",
                          "pmPhase1PowerFactor",
                          "pmPhase2PowerFactor",
                          "pmPhase3PowerFactor",
                          "probeTemperature"
                        ],
                        "example": "ambientTemperature"
                      },
                      "widgetId": {
                        "description": "V1Sensor ID to query.",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                      }
                    }
                  }
                },
                "startMs": {
                  "description": "Beginning of the time range, specified in milliseconds UNIX time.",
                  "type": "integer",
                  "example": 1462878398034
                },
                "stepMs": {
                  "description": "Time resolution for which data should be returned, in milliseconds. Specifying 3600000 will return data at hour intervals.",
                  "type": "integer",
                  "example": 3600000
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of results objects, each containing a time and a datapoint for each requested sensor/field pair.",
            "schema": {
              "$ref": "#/definitions/V1SensorHistoryResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/sensors/humidity": {
      "post": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet humidity for requested sensors. This method returns the current relative humidity for the requested sensors.",
        "tags": [
          "Sensors"
        ],
        "summary": "Get humidity",
        "operationId": "V1getSensorsHumidity",
        "parameters": [
          {
            "description": "Group ID and list of sensor IDs to query.",
            "name": "V1sensorParam",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "groupId",
                "sensors"
              ],
              "properties": {
                "groupId": {
                  "description": "Optional group ID if the organization has multiple groups (uncommon).",
                  "type": "integer",
                  "format": "int64",
                  "example": 101
                },
                "sensors": {
                  "description": "List of sensor IDs to query.",
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "example": [
                    122
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of sensor objects containing the current humidity reported by each sensor.",
            "schema": {
              "$ref": "#/definitions/V1HumidityResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/sensors/list": {
      "post": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet sensor objects. This method returns a list of the sensor objects in the Samsara Cloud and information about them.",
        "tags": [
          "Sensors"
        ],
        "summary": "Get all sensors",
        "operationId": "V1getSensors",
        "parameters": [
          {
            "description": "Optional group ID if the organization has multiple groups (uncommon).",
            "name": "V1groupIdBodyParam",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "groupId"
              ],
              "properties": {
                "groupId": {
                  "description": "Optional group ID if the organization has multiple groups (uncommon).",
                  "type": "integer",
                  "format": "int64",
                  "example": 101
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of sensor objects.",
            "schema": {
              "type": "object",
              "properties": {
                "sensors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/V1Sensor"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/sensors/temperature": {
      "post": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet temperature for requested sensors. This method returns the current ambient temperature (and probe temperature if applicable) for the requested sensors.",
        "tags": [
          "Sensors"
        ],
        "summary": "Get temperature",
        "operationId": "V1getSensorsTemperature",
        "parameters": [
          {
            "description": "Group ID and list of sensor IDs to query.",
            "name": "V1sensorParam",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "groupId",
                "sensors"
              ],
              "properties": {
                "groupId": {
                  "description": "Optional group ID if the organization has multiple groups (uncommon).",
                  "type": "integer",
                  "format": "int64",
                  "example": 101
                },
                "sensors": {
                  "description": "List of sensor IDs to query.",
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "example": [
                    122
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of sensor objects containing the current temperature reported by each sensor.",
            "schema": {
              "$ref": "#/definitions/V1TemperatureResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/webhooks": {
      "post": {
        "description": "Create a webhook",
        "tags": [
          "Webhooks"
        ],
        "summary": "Create a webhook",
        "operationId": "createWebhook",
        "parameters": [
          {
            "description": "The webhook to create",
            "name": "createWebhookBody",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/WebhookCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The created webhook",
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/definitions/Webhook"
                }
              }
            }
          },
          "default": {
            "description": "Unexepcted error.",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "description": "Information about an address/geofence. Geofences are either a circle or a polygon.",
      "type": "object",
      "allOf": [
        {
          "required": [
            "id"
          ],
          "properties": {
            "contacts": {
              "description": "An array of all contact mini-objects that are associated with the given address entry.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/contactTinyResponse"
              }
            },
            "id": {
              "description": "Unique Samsara ID for the address.",
              "type": "string",
              "example": "7107471"
            },
            "latitude": {
              "description": "Latitude of the address. Either inferred from the formatted address or defined on address creation.",
              "type": "number",
              "format": "double",
              "example": 37.765363
            },
            "longitude": {
              "description": "Longitude of the address. Either inferred from the formatted address or defined on address creation.",
              "type": "number",
              "format": "double",
              "example": 37.765363
            },
            "tags": {
              "description": "An array of all tag mini-objects that are associated with the given address entry.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/tagTinyResponse"
              }
            }
          }
        },
        {
          "$ref": "#/definitions/AddressResponseCore"
        }
      ]
    },
    "AddressCore": {
      "description": "Core fields used in both address creation and the actual address object.",
      "type": "object",
      "properties": {
        "addressTypes": {
          "description": "Reporting location type associated with the address (used for ELD reporting purposes).",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "yard",
              "shortHaul"
            ],
            "example": "yard"
          }
        },
        "formattedAddress": {
          "description": "The full street address for this address/geofence, as it might be recognized by Google Maps.",
          "type": "string",
          "maxLength": 1024,
          "example": "350 Rhode Island St, San Francisco, CA"
        },
        "name": {
          "description": "Name of the address.",
          "type": "string",
          "maxLength": 255,
          "example": "Samsara HQ"
        },
        "notes": {
          "description": "Notes about the address.",
          "type": "string",
          "maxLength": 280,
          "example": "Hours of operation: 8am - 6pm; Truck entrance on the Rhode Island street side."
        }
      }
    },
    "AddressCreate": {
      "description": "An address object.",
      "type": "object",
      "allOf": [
        {
          "required": [
            "name",
            "formattedAddress",
            "geofence"
          ],
          "properties": {
            "contactIds": {
              "description": "An array of IDs of contacts to associate with this address.",
              "type": "array",
              "items": {
                "type": "string",
                "example": "22408"
              }
            },
            "latitude": {
              "description": "Optional latitude field to override the geocoded latitude from the formatted address.",
              "type": "number",
              "format": "double",
              "example": 37.765363
            },
            "longitude": {
              "description": "Optional longitude field to override the geocoded longitude from the formatted address.",
              "type": "number",
              "format": "double",
              "example": 37.765363
            },
            "tagIds": {
              "description": "An array of IDs of tags to associate with this address.",
              "type": "array",
              "items": {
                "type": "string",
                "example": "3914"
              }
            }
          }
        },
        {
          "$ref": "#/definitions/AddressRequestCore"
        }
      ]
    },
    "AddressGeofenceRequest": {
      "description": "The geofence that defines this address and its bounds. This can either be a circle, or a polygon - only one key should be provided, depending on the geofence type.",
      "type": "object",
      "properties": {
        "circle": {
          "description": "Information about a circular geofence. This field is only needed if the geofence is a circle.",
          "type": "object",
          "properties": {
            "latitude": {
              "description": "The latitude of the center of the circular geofence in decimal degrees.",
              "type": "number",
              "format": "double",
              "example": 37.765363
            },
            "longitude": {
              "description": "The longitude of the center of the circular geofence in decimal degrees.",
              "type": "number",
              "format": "double",
              "example": -122.403098
            },
            "radiusMeters": {
              "description": "The radius of the circular geofence in meters.",
              "type": "number",
              "format": "integer",
              "example": 250
            }
          }
        },
        "polygon": {
          "description": "Information about a polygon geofence. This field is only needed if the geofence is a polygon.",
          "type": "object",
          "properties": {
            "vertices": {
              "description": "The vertices of the polygon geofence. These geofence vertices describe the perimeter of the polygon, and must consist of at least 3 vertices and less than 40.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "latitude": {
                    "description": "The latitude of a geofence vertex in decimal degrees.",
                    "type": "number",
                    "format": "double"
                  },
                  "longitude": {
                    "description": "The longitude of a geofence vertex in decimal degrees.",
                    "type": "number",
                    "format": "double"
                  }
                }
              },
              "example": [
                {
                  "latitude": 37.765363,
                  "longitude": -122.403098
                },
                {
                  "latitude": 38.765363,
                  "longitude": -122.403098
                },
                {
                  "latitude": 37.765363,
                  "longitude": -123.403098
                }
              ]
            }
          }
        }
      }
    },
    "AddressGeofenceResponse": {
      "description": "The geofence that defines this address and its bounds. This can either be a circle, or a polygon",
      "type": "object",
      "properties": {
        "circle": {
          "description": "Information about a circular geofence. This field is only populated if the geofence is a circle.",
          "type": "object",
          "properties": {
            "latitude": {
              "description": "The latitude of the center of the circular geofence in decimal degrees.",
              "type": "number",
              "format": "double",
              "example": 37.765363
            },
            "longitude": {
              "description": "The longitude of the center of the circular geofence in decimal degrees.",
              "type": "number",
              "format": "double",
              "example": -122.403098
            },
            "radiusMeters": {
              "description": "The radius of the circular geofence in meters.",
              "type": "number",
              "format": "integer",
              "example": 250
            }
          }
        },
        "polygon": {
          "description": "Information about a polygon geofence. This field is only populated if the geofence is a polygon.",
          "type": "object",
          "properties": {
            "vertices": {
              "description": "The vertices of the polygon geofence. These geofence vertices describe the perimeter of the polygon.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "latitude": {
                    "description": "The latitude of a geofence vertex in decimal degrees.",
                    "type": "number",
                    "format": "double"
                  },
                  "longitude": {
                    "description": "The longitude of a geofence vertex in decimal degrees.",
                    "type": "number",
                    "format": "double"
                  }
                }
              },
              "example": [
                {
                  "latitude": 37.765363,
                  "longitude": -122.403098
                },
                {
                  "latitude": 38.765363,
                  "longitude": -122.403098
                },
                {
                  "latitude": 37.765363,
                  "longitude": -123.403098
                }
              ]
            }
          }
        }
      }
    },
    "AddressPatch": {
      "description": "Information about an address/geofence. Geofences are either a circle or a polygon.",
      "type": "object",
      "allOf": [
        {
          "properties": {
            "contactIds": {
              "description": "An array of IDs of contacts to associate with this address.",
              "type": "array",
              "items": {
                "type": "string",
                "example": "123"
              }
            },
            "latitude": {
              "description": "Optional latitude field to override the geocoded latitude from the formatted address.",
              "type": "number",
              "format": "double",
              "example": 37.765363
            },
            "longitude": {
              "description": "Optional longitude field to override the geocoded longitude from the formatted address.",
              "type": "number",
              "format": "double",
              "example": 37.765363
            },
            "tagIds": {
              "description": "An array of IDs of tags to associate with this address.",
              "type": "array",
              "items": {
                "type": "string",
                "example": "321"
              }
            }
          }
        },
        {
          "$ref": "#/definitions/AddressRequestCore"
        }
      ]
    },
    "AddressRequestCore": {
      "type": "object",
      "allOf": [
        {
          "properties": {
            "geofence": {
              "$ref": "#/definitions/AddressGeofenceRequest"
            }
          }
        },
        {
          "$ref": "#/definitions/AddressCore"
        }
      ]
    },
    "AddressResponseCore": {
      "type": "object",
      "allOf": [
        {
          "properties": {
            "geofence": {
              "$ref": "#/definitions/AddressGeofenceResponse"
            }
          }
        },
        {
          "$ref": "#/definitions/AddressCore"
        }
      ]
    },
    "Contact": {
      "description": "Information about a notification contact for alerts.",
      "type": "object",
      "properties": {
        "email": {
          "description": "Email address of the contact.",
          "type": "string",
          "maxLength": 255,
          "example": "jane.jones@yahoo.com"
        },
        "firstName": {
          "description": "First name of the contact.",
          "type": "string",
          "maxLength": 255,
          "example": "Jane"
        },
        "id": {
          "description": "ID of the contact.",
          "type": "string",
          "example": "22408"
        },
        "lastName": {
          "description": "Last name of the contact.",
          "type": "string",
          "maxLength": 255,
          "example": "Jones"
        },
        "phone": {
          "description": "Phone number of the contact.",
          "type": "string",
          "maxLength": 255,
          "example": "111-222-3344"
        }
      }
    },
    "ContactInput": {
      "description": "Information for adding a notification contact for alerts.",
      "type": "object",
      "properties": {
        "email": {
          "description": "Email address of the contact.",
          "type": "string",
          "maxLength": 255,
          "example": "jane.jones@yahoo.com"
        },
        "firstName": {
          "description": "First name of the contact.",
          "type": "string",
          "maxLength": 255,
          "example": "Jane"
        },
        "lastName": {
          "description": "Last name of the contact.",
          "type": "string",
          "maxLength": 255,
          "example": "Jones"
        },
        "phone": {
          "description": "Phone number of the contact.",
          "type": "string",
          "maxLength": 255,
          "example": "111-222-3344"
        }
      }
    },
    "Document": {
      "description": "Document",
      "type": "object",
      "properties": {
        "createdAtTime": {
          "description": "Time the document was created in RFC 3339 format.",
          "type": "string",
          "example": "2006-01-02T15:04:05Z07:00"
        },
        "documentType": {
          "$ref": "#/definitions/documentTypeTinyResponse"
        },
        "driver": {
          "$ref": "#/definitions/driverTinyResponse"
        },
        "fields": {
          "description": "The fields associated with this document.",
          "type": "array",
          "items": {
            "description": "item",
            "type": "object",
            "properties": {
              "fieldType": {
                "description": "The type of the field in the document.",
                "type": "string",
                "enum": [
                  "photo",
                  "number",
                  "string",
                  "multipleChoice",
                  "signature"
                ],
                "example": "photo"
              },
              "label": {
                "description": "Descriptive name of this field.",
                "type": "string"
              },
              "value": {
                "description": "The shape of the value property depends on the fieldType selected.\n\n- fieldType `string`: returns a string (e.g. `\"hello\"`).\n\n- fieldType `number`: returns a number (e.g. `100`).\n\n- fieldType `signature`: returns an array of signature objects where each object contains the `name`, `signedAtTime`, and `signatureUrl` properties for a signature. Example:\n\n```json\n[\n  {\n    \"name\": \"John Smith\",\n    \"signedAtTime\": \"2006-01-02T15:04:05Z07:00\",\n    \"signatureUrl\": \"https://www.samsara.com/signature1\"\n  }\n]\n```\n\nThe `name` property returns the name of the signee in string format (e.g. John Smith). The `signedAtTime` property returns the time the signautre was created in string format, following RFC 3339 standard (e.g. `\"2006-01-02T15:04:05Z07:00\"`). The `signatureUrl` property returns a string URL to get the signature data in base64 format (e.g. `\"https://www.samsara.com/signature1\"`).\n\n- fieldType `photo`: returns an array of photo objects where each object contains a `url` property for a photo. The `url` property returns a string URL for a JPG image (e.g. `\"https://www.samsara.com/photo1\"`).\n\n- fieldType `multipleChoiceField`: returns an array of multiple choice objects where each object contains the `selected` and `label` properties for a multiple choice field item. The `selected` property indicates whether the multiple choice field is selected and returns a boolean value (e.g. `false`). The `label` property describes the multiple choice field and returns a string value (e.g. `\"Answer choice 1\"`).",
                "type": "string"
              }
            }
          }
        },
        "id": {
          "description": "Unique Samsara UUID for the document",
          "type": "string"
        },
        "notes": {
          "description": "Notes on the document.",
          "type": "string",
          "maxLength": 2000
        },
        "routeStop": {
          "$ref": "#/definitions/routeStopTinyResponse"
        },
        "state": {
          "description": "The condition of the document created for the driver. Can be either `required` or `submitted`, if no value is specified, `state` defaults to `required`. `required` documents are pre-populated documents for the Driver to fill out in the Driver App.",
          "type": "string",
          "default": "required",
          "enum": [
            "required",
            "submitted"
          ],
          "example": "submitted"
        },
        "updatedAtTime": {
          "description": "Time the document was updated in RFC 3339 format.",
          "type": "string",
          "example": "2006-01-02T15:04:05Z07:00"
        },
        "vehicle": {
          "$ref": "#/definitions/vehicleTinyResponse"
        }
      }
    },
    "DocumentCreate": {
      "description": "The document creation arguments",
      "type": "object",
      "required": [
        "documentTypeId",
        "driverId"
      ],
      "properties": {
        "documentTypeId": {
          "description": "Unique Samsara ID for the document type.",
          "type": "string",
          "example": "52be1982-06c0-497d-9f98-ac10b64eff1d"
        },
        "driverId": {
          "description": "ID of the driver.",
          "type": "string",
          "example": "88668"
        },
        "fields": {
          "description": "The fields associated with the new document.",
          "type": "array",
          "items": {
            "description": "item",
            "type": "object",
            "properties": {
              "fieldType": {
                "description": "The type of the field in the document.",
                "type": "string",
                "enum": [
                  "photo",
                  "number",
                  "string",
                  "multipleChoice",
                  "signature"
                ],
                "example": "photo"
              },
              "label": {
                "description": "Descriptive name of this field.",
                "type": "string"
              },
              "value": {
                "description": "The shape of the value property depends on the fieldType selected.\n\n- fieldType `string`: returns a string (e.g. `\"hello\"`).\n\n- fieldType `number`: returns a number (e.g. `100`).\n\n- fieldType `signature`: returns an array of signature objects where each object contains the `name`, `signedAtTime`, and `signatureUrl` properties for a signature. Example:\n\n```json\n[\n  {\n    \"name\": \"John Smith\",\n    \"signedAtTime\": \"2006-01-02T15:04:05Z07:00\",\n    \"signatureUrl\": \"https://www.samsara.com/signature1\"\n  }\n]\n```\n\nThe `name` property returns the name of the signee in string format (e.g. John Smith). The `signedAtTime` property returns the time the signautre was created in string format, following RFC 3339 standard (e.g. `\"2006-01-02T15:04:05Z07:00\"`). The `signatureUrl` property returns a string URL to get the signature data in base64 format (e.g. `\"https://www.samsara.com/signature1\"`).\n\n- fieldType `photo`: returns an array of photo objects where each object contains a `url` property for a photo. The `url` property returns a string URL for a JPG image (e.g. `\"https://www.samsara.com/photo1\"`).\n\n- fieldType `multipleChoice`: returns an array of multiple choice objects where each object contains the `selected` and `label` properties for a multiple choice field item. The `selected` property indicates whether the multiple choice field is selected and returns a boolean value (e.g. `false`). The `label` property describes the multiple choice field and returns a string value (e.g. `\"Answer choice 1\"`).",
                "type": "string"
              }
            }
          }
        },
        "notes": {
          "description": "Notes",
          "type": "string",
          "maxLength": 2000
        },
        "routeStopId": {
          "description": "Unique Samsara ID for the route stop.",
          "type": "string",
          "example": "112"
        },
        "state": {
          "description": "The condition of the document created for the driver. Can be either `required` or `submitted`, if no value is specified, `state` defaults to `required`. `required` documents are pre-populated documents for the Driver to fill out in the Driver App.",
          "type": "string",
          "default": "required",
          "enum": [
            "required",
            "submitted"
          ],
          "example": "submitted"
        }
      },
      "example": {
        "documentTypeUuid": "52be1982-06c0-497d-9f98-ac10b64eff1d",
        "driverId": "88668",
        "fields": [
          {
            "fieldType": "string",
            "label": "Load #",
            "value": "0100748"
          },
          {
            "fieldType": "number",
            "label": "Load Weight",
            "value": 1234
          },
          {
            "fieldType": "multipleChoice",
            "label": "Did you drop the trailer?",
            "value": [
              {
                "label": "Yes",
                "selected": false
              },
              {
                "label": "No",
                "selected": true
              }
            ]
          }
        ]
      }
    },
    "DocumentField": {
      "type": "object",
      "required": [
        "label",
        "fieldType"
      ],
      "properties": {
        "fieldType": {
          "description": "The kind of value that can be submitted for this field.",
          "type": "string",
          "enum": [
            "number",
            "string",
            "photo",
            "multipleChoice",
            "signature"
          ],
          "example": "number"
        },
        "label": {
          "description": "Descriptive name of this field.",
          "type": "string",
          "example": "Fuel Cost ($)"
        },
        "multipleChoiceMetadata": {
          "description": "Additional metadata information for a multiple choice field type. Only defined when a field has fieldType: multipleChoice.",
          "type": "object",
          "properties": {
            "options": {
              "description": "The options that can be selected.",
              "type": "array",
              "items": {
                "description": "The option that can be selected.",
                "type": "object",
                "properties": {
                  "label": {
                    "description": "The label of the option.",
                    "type": "string",
                    "example": "Option A"
                  }
                }
              }
            }
          }
        },
        "numberMetadata": {
          "description": "Additional metadata information for a number field type. Only defined when a field has fieldType: number.",
          "type": "object",
          "properties": {
            "numDecimalPlaces": {
              "description": "Number of decimal places that values for this field can have.",
              "type": "number",
              "format": "int64",
              "example": 2
            }
          }
        },
        "signatureMetadata": {
          "description": "Additional metadata information for a signature field type. Only defined when a field has fieldType: signature.",
          "type": "object",
          "properties": {
            "legalText": {
              "description": "Legal text to accompany the signature.",
              "type": "string",
              "example": "I consent on behalf of myself and my employer to using electronic signatures in this transaction. I understand that I can request a copy of the signed documentation from the party requesting my signature."
            }
          }
        }
      }
    },
    "DocumentType": {
      "description": "A document type",
      "type": "object",
      "properties": {
        "fields": {
          "description": "The fields determine the names of fields for this document type. They also determine the types of values a document submitted for this document type can have.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentField"
          }
        },
        "id": {
          "description": "Universally unique identifier for the document type. Can be passed in as a documentTypeId when creating a document for this document type.",
          "type": "string",
          "example": "b6199cf8-3073-441c-9b04-524fb2bb120d"
        },
        "name": {
          "description": "Name of the document type.",
          "type": "string",
          "example": "Fuel Receipt"
        }
      }
    },
    "Driver": {
      "description": "A driver object",
      "type": "object",
      "allOf": [
        {
          "properties": {
            "currentVehicle": {
              "allOf": [
                {
                  "description": "Vehicle that driver is currently assigned to."
                },
                {
                  "$ref": "#/definitions/vehicleTinyResponse"
                }
              ]
            },
            "id": {
              "description": "Samsara ID for the driver.",
              "type": "string",
              "example": "123"
            },
            "staticAssignedVehicle": {
              "allOf": [
                {
                  "description": "Vehicle assigned to the driver for static vehicle assignments. (uncommon)."
                },
                {
                  "$ref": "#/definitions/vehicleTinyResponse"
                }
              ]
            },
            "tags": {
              "description": "The tags this driver belongs to.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/tagTinyResponse"
              }
            },
            "vehicleGroupTag": {
              "allOf": [
                {
                  "description": "Tag which determines which vehicles a driver will see when selecting vehicles."
                },
                {
                  "$ref": "#/definitions/tagTinyResponse"
                }
              ]
            }
          }
        },
        {
          "$ref": "#/definitions/DriverBase"
        }
      ]
    },
    "DriverBase": {
      "description": "A driver object",
      "type": "object",
      "properties": {
        "carrierSettings": {
          "description": "Carrier for a given driver. If the driver's carrier differs from the general organization's carrier settings, the override value is used. Updating this value only updates the override setting for this driver.",
          "type": "object",
          "properties": {
            "carrierName": {
              "description": "Carrier for a given driver.",
              "type": "string",
              "maxLength": 255,
              "example": "Acme Inc."
            },
            "dotNumber": {
              "description": "Carrier US DOT Number. If this differs from the general organization's settings, the override value is used. Updating this value only updates the override setting for this driver.",
              "type": "integer",
              "format": "int64",
              "example": 98231
            },
            "mainOfficeAddress": {
              "description": "Main office address for a given driver. If this differs from the general organization's settings, the override value is used. ",
              "type": "string",
              "maxLength": 255,
              "example": "1234 Pear St., Scranton, PA 62814"
            }
          }
        },
        "eldAdverseWeatherExemptionEnabled": {
          "description": "Flag indicating this driver may use Adverse Weather exemptions in ELD logs.",
          "type": "boolean"
        },
        "eldBigDayExemptionEnabled": {
          "description": "Flag indicating this driver may use Big Day exemption in ELD logs.",
          "type": "boolean"
        },
        "eldDayStartHour": {
          "description": "`0` indicating midnight-to-midnight ELD driving hours, `12` to indicate noon-to-noon driving hours.",
          "type": "integer"
        },
        "eldExempt": {
          "description": "Flag indicating this driver is exempt from the Electronic Logging Mandate.",
          "type": "boolean"
        },
        "eldExemptReason": {
          "description": "Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).",
          "type": "string",
          "example": "Bad driver"
        },
        "eldPcEnabled": {
          "description": "Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.",
          "type": "boolean",
          "default": false
        },
        "eldYmEnabled": {
          "description": "Flag indicating this driver may select the Yard Move duty status in ELD logs.",
          "type": "boolean",
          "default": false
        },
        "externalIds": {
          "description": "User-defined dictionary of external IDs (string key-value pairs).",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "maintenanceId": "250020",
            "payrollId": "123"
          }
        },
        "isDeactivated": {
          "description": "A boolean that indicates whether or not this driver is deactivated.",
          "type": "boolean",
          "example": false
        },
        "licenseNumber": {
          "description": "Driver's state issued license number. The combination of this number and `licenseState` must be unique.",
          "type": "string",
          "example": "E1234567"
        },
        "licenseState": {
          "description": "Abbreviation of state that issued driver's license.",
          "type": "string",
          "example": "CA"
        },
        "locale": {
          "description": "Locale override (uncommon).",
          "type": "string",
          "enum": [
            "us",
            "at",
            "be",
            "ca",
            "gb",
            "fr",
            "de",
            "ie",
            "it",
            "lu",
            "mx",
            "es",
            "ch"
          ]
        },
        "name": {
          "description": "Driver's name.",
          "type": "string",
          "maxLength": 255,
          "example": "Susan Jones"
        },
        "notes": {
          "description": "Notes about the driver.",
          "type": "string",
          "maxLength": 4096,
          "example": "Also goes by the nickname Furious Fred."
        },
        "phone": {
          "description": "Driver's phone number.",
          "type": "string",
          "maxLength": 255,
          "example": "5558234327"
        },
        "timezone": {
          "description": "Home terminal timezone, in order to indicate what time zone should be used to calculate the ELD logs.",
          "type": "string",
          "example": "New York - EST/EDT"
        },
        "username": {
          "description": "Driver's login username into the driver app. The username may not contain spaces or the '@' symbol. The username must be unique.",
          "type": "string",
          "maxLength": 189,
          "minLength": 1,
          "example": "SusanJones"
        }
      }
    },
    "DriverCreate": {
      "description": "Driver that should be created.",
      "type": "object",
      "required": [
        "name",
        "username",
        "password"
      ],
      "properties": {
        "carrierSettings": {
          "description": "Carrier for a given driver. If the driver's carrier differs from the general organization's carrier settings, the override value is used. Updating this value only updates the override setting for this driver.",
          "type": "object",
          "properties": {
            "carrierName": {
              "description": "Carrier for a given driver.",
              "type": "string",
              "maxLength": 255,
              "example": "Acme Inc."
            },
            "dotNumber": {
              "description": "Carrier US DOT Number. If this differs from the general organization's settings, the override value is used. Updating this value only updates the override setting for this driver.",
              "type": "integer",
              "format": "int64",
              "example": 98231
            },
            "mainOfficeAddress": {
              "description": "Main office address for a given driver. If this differs from the general organization's settings, the override value is used. ",
              "type": "string",
              "maxLength": 255,
              "example": "1234 Pear St., Scranton, PA 62814"
            }
          }
        },
        "currentVehicleId": {
          "description": "ID of vehicle that driver is currently assigned to.",
          "type": "string",
          "example": "123"
        },
        "eldAdverseWeatherExemptionEnabled": {
          "description": "Flag indicating this driver may use Adverse Weather exemptions in ELD logs.",
          "type": "boolean",
          "default": false
        },
        "eldBigDayExemptionEnabled": {
          "description": "Flag indicating this driver may use Big Day exemption in ELD logs.",
          "type": "boolean",
          "default": false
        },
        "eldDayStartHour": {
          "description": "`0` indicating midnight-to-midnight ELD driving hours, `12` to indicate noon-to-noon driving hours.",
          "type": "integer",
          "default": 0
        },
        "eldExempt": {
          "description": "Flag indicating this driver is exempt from the Electronic Logging Mandate.",
          "type": "boolean",
          "default": false
        },
        "eldExemptReason": {
          "description": "Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).",
          "type": "string",
          "example": "Bad driver"
        },
        "eldPcEnabled": {
          "description": "Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.",
          "type": "boolean",
          "default": false
        },
        "eldYmEnabled": {
          "description": "Flag indicating this driver may select the Yard Move duty status in ELD logs.",
          "type": "boolean",
          "default": false
        },
        "externalIds": {
          "description": "User-defined dictionary of external IDs (string key-value pairs).",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "maintenanceId": "250020",
            "payrollId": "123"
          }
        },
        "licenseNumber": {
          "description": "Driver's state issued license number. The combination of this number and `licenseState` must be unique.",
          "type": "string",
          "example": "E1234567"
        },
        "licenseState": {
          "description": "Abbreviation of state that issued driver's license.",
          "type": "string",
          "example": "CA"
        },
        "locale": {
          "description": "Locale override (uncommon). These are specified by ISO 3166-2 country codes for supported locales.",
          "type": "string",
          "enum": [
            "us",
            "at",
            "be",
            "ca",
            "gb",
            "fr",
            "de",
            "ie",
            "it",
            "lu",
            "mx",
            "nl",
            "es",
            "ch"
          ]
        },
        "name": {
          "description": "Driver's name.",
          "type": "string",
          "maxLength": 255,
          "minLength": 1,
          "example": "Susan Jones"
        },
        "notes": {
          "description": "Notes about the driver.",
          "type": "string",
          "maxLength": 4096,
          "example": "Also goes by the nickname Furious Fred."
        },
        "password": {
          "description": "Password that the driver can use to login to the Samsara driver app.",
          "type": "string",
          "example": "aSecurePassword1234"
        },
        "phone": {
          "description": "Phone number of the driver.",
          "type": "string",
          "maxLength": 255,
          "example": "5558234327"
        },
        "staticAssignedVehicleId": {
          "description": "ID of vehicle that the driver is permanently assigned to. (uncommon).",
          "type": "string",
          "example": "456"
        },
        "tagIds": {
          "description": "IDs of tags the driver is associated with.",
          "type": "array",
          "items": {
            "type": "string",
            "example": "147"
          }
        },
        "timezone": {
          "description": "Home terminal timezone, in order to indicate what time zone should be used to calculate the ELD logs.",
          "type": "string",
          "example": "New York - EST/EDT"
        },
        "username": {
          "description": "Driver's login username into the driver app. The username may not contain spaces or the '@' symbol. The username must be unique.",
          "type": "string",
          "maxLength": 189,
          "minLength": 1,
          "example": "SusanJones"
        },
        "vehicleGroupTagId": {
          "description": "Tag ID which determines which vehicles a driver will see when selecting vehicles.",
          "type": "string",
          "example": "342417"
        }
      }
    },
    "DriverUpdate": {
      "description": "Driver that should be updated.",
      "type": "object",
      "allOf": [
        {
          "properties": {
            "currentVehicleId": {
              "description": "ID of vehicle that driver is currently assigned to.",
              "type": "string",
              "example": "123"
            },
            "password": {
              "description": "Password that the driver can use to login to the Samsara driver app.",
              "type": "string",
              "example": "aSecurePassword1234"
            },
            "staticAssignedVehicleId": {
              "description": "ID of vehicle assigned to the driver for static vehicle assignments. (uncommon).",
              "type": "string",
              "example": "456"
            },
            "tagIds": {
              "description": "IDs of tags the driver is associated with.",
              "type": "array",
              "items": {
                "type": "string",
                "example": "147"
              }
            },
            "vehicleGroupTagId": {
              "description": "Tag ID which determines which vehicles a driver will see when selecting vehicles.",
              "type": "string",
              "example": "342417"
            }
          }
        },
        {
          "$ref": "#/definitions/DriverBase"
        }
      ]
    },
    "EquipmentEngineRpm": {
      "description": "Stat point for the RPM of the engine.",
      "type": "object",
      "properties": {
        "time": {
          "$ref": "#/definitions/EquipmentTime"
        },
        "value": {
          "type": "integer",
          "example": 1800
        }
      }
    },
    "EquipmentEngineSeconds": {
      "description": "Stat point for the on time of the engine.",
      "type": "object",
      "properties": {
        "time": {
          "$ref": "#/definitions/EquipmentTime"
        },
        "value": {
          "type": "integer",
          "example": 22374000
        }
      }
    },
    "EquipmentEngineState": {
      "description": "Stat point for the state of the engine.",
      "type": "object",
      "properties": {
        "time": {
          "$ref": "#/definitions/EquipmentTime"
        },
        "value": {
          "type": "string",
          "enum": [
            "Off",
            "On"
          ],
          "example": "On"
        }
      }
    },
    "EquipmentFuelPercent": {
      "description": "Stat point for the fuel level of the engine as a percentage.",
      "type": "object",
      "properties": {
        "time": {
          "$ref": "#/definitions/EquipmentTime"
        },
        "value": {
          "type": "integer",
          "example": 54
        }
      }
    },
    "EquipmentListResponse": {
      "description": "Response for retrieving a list of equipment.",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EquipmentResponse"
          }
        },
        "pagination": {
          "$ref": "#/definitions/paginationResponse"
        }
      }
    },
    "EquipmentLocation": {
      "allOf": [
        {
          "$ref": "#/definitions/location"
        },
        {
          "type": "object",
          "required": [
            "time"
          ],
          "properties": {
            "time": {
              "$ref": "#/definitions/EquipmentTime"
            }
          }
        }
      ]
    },
    "EquipmentLocationSnapshotResponse": {
      "description": "Current equipment location.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/equipmentTinyResponse"
        },
        {
          "type": "object",
          "properties": {
            "location": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/EquipmentLocation"
                }
              ]
            }
          }
        }
      ]
    },
    "EquipmentLocationsResponse": {
      "description": "List of equipment locations for the specified time period.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/equipmentTinyResponse"
        },
        {
          "description": "Location point for the equipment.",
          "type": "object",
          "properties": {
            "locations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EquipmentLocation"
              }
            }
          }
        }
      ]
    },
    "EquipmentOdometerMeters": {
      "description": "Stat point for the odometer of the engine in meters.",
      "type": "object",
      "properties": {
        "time": {
          "$ref": "#/definitions/EquipmentTime"
        },
        "value": {
          "type": "integer",
          "example": 3200
        }
      }
    },
    "EquipmentResponse": {
      "description": "The equipment object.",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "assetSerial": {
          "description": "An equipment identification number.",
          "type": "string",
          "example": "1FUJA6BD31LJ09646"
        },
        "id": {
          "description": "Unique Samsara ID for the equipment.",
          "type": "string",
          "example": "112"
        },
        "name": {
          "description": "Name of the equipment.",
          "type": "string",
          "example": "Crane A7"
        },
        "notes": {
          "description": "Notes about a piece of equipment. Samsara supports a maximum of 255 chars.",
          "type": "string",
          "maxLength": 255,
          "example": "These are notes about this given equipment."
        },
        "tags": {
          "description": "An array of all tag mini-objects that are associated with the given equipment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/tagTinyResponse"
          }
        }
      }
    },
    "EquipmentStatsResponse": {
      "description": "List of equipment stats for the specified time period.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/equipmentTinyResponse"
        },
        {
          "type": "object",
          "properties": {
            "engineRpm": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EquipmentEngineRpm"
              }
            },
            "engineSeconds": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EquipmentEngineSeconds"
              }
            },
            "engineStates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EquipmentEngineState"
              }
            },
            "fuelPercents": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EquipmentFuelPercent"
              }
            }
          }
        }
      ]
    },
    "EquipmentStatsSnapshotResponse": {
      "description": "List of equipment stats for the specified time period.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/equipmentTinyResponse"
        },
        {
          "type": "object",
          "properties": {
            "engineRpm": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/EquipmentEngineRpm"
                }
              ]
            },
            "engineSeconds": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/EquipmentEngineSeconds"
                }
              ]
            },
            "engineState": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/EquipmentEngineState"
                }
              ]
            },
            "fuelPercent": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/EquipmentFuelPercent"
                }
              ]
            }
          }
        }
      ]
    },
    "EquipmentTime": {
      "description": "UTC timestamp of the time the data point was generated by the equipment, in RFC3339 format.",
      "type": "string",
      "example": "2019-05-03T04:30:31.492Z"
    },
    "LocationsWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/VehicleLocation"
        },
        {
          "type": "object",
          "required": [
            "time"
          ],
          "properties": {
            "time": {
              "$ref": "#/definitions/time"
            }
          }
        }
      ]
    },
    "Message": {
      "type": "object",
      "required": [
        "driverId",
        "text"
      ],
      "properties": {
        "driverId": {
          "description": "ID of the driver for whom the message is sent to or sent by.",
          "type": "integer",
          "format": "int64",
          "example": 555
        },
        "text": {
          "description": "The text sent in the message.",
          "type": "string",
          "maxLength": 65533,
          "minLength": 1,
          "example": "This is a message."
        }
      }
    },
    "Messages": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Message"
      }
    },
    "OrgHarshEventsKondoResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "behaviorLabels": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "labelSource": {
                      "description": "Label source of the harsh event",
                      "type": "string",
                      "format": "string",
                      "example": "SYSTEM"
                    },
                    "labelType": {
                      "description": "Label type of the harsh event",
                      "type": "string",
                      "format": "string",
                      "example": "Braking"
                    }
                  }
                }
              },
              "downloadForwardVideoUrl": {
                "description": "Download forward video url",
                "type": "string",
                "format": "string",
                "example": "samsara-dashcam-videos::3318/222/1499411220000/huKA7IhpBV-camera-video-segment-1244214895.mp4"
              },
              "downloadInwardVideoUrl": {
                "description": "Download inward video url",
                "type": "string",
                "format": "string",
                "example": "samsara-dashcam-videos::3318/222/1499411220000/huKA7IhpBV-camera-video-segment-1244214895.mp4"
              },
              "downloadTrackedInwardVideoUrl": {
                "description": "Download tracked inward video url",
                "type": "string",
                "format": "string",
                "example": "samsara-dashcam-videos::3318/222/1499411220000/huKA7IhpBV-camera-video-segment-1244214895.mp4"
              },
              "incidentReportUrl": {
                "description": "Incident report url",
                "type": "string",
                "format": "string",
                "example": "https://cloud.samsara.com/groups/4185/fleet/reports/safety/vehicle/222/incident/1499411220000"
              },
              "location": {
                "type": "object",
                "properties": {
                  "latitude": {
                    "description": "Longitude at which the harsh event happened",
                    "type": "number",
                    "format": "float",
                    "example": 37.762554666
                  },
                  "longitude": {
                    "description": "Longitude at which the harsh event happened",
                    "type": "number",
                    "format": "float",
                    "example": -122.409358166
                  }
                }
              }
            }
          }
        }
      }
    },
    "OrgSafetyScoresResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "crashCount": {
                "description": "Crash count",
                "type": "integer",
                "format": "int64",
                "example": 1
              },
              "driverId": {
                "description": "Driver Id",
                "type": "integer",
                "format": "int64",
                "example": 319596
              },
              "harshAccelCount": {
                "description": "Harsh accel count",
                "type": "integer",
                "format": "int64",
                "example": 3
              },
              "harshBrakingCount": {
                "description": "Harsh braking count",
                "type": "integer",
                "format": "int64",
                "example": 5
              },
              "harshEventIdentifiers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "eventTime": {
                      "description": "Event time, specified in RFC 3339",
                      "type": "string",
                      "format": "string",
                      "example": "2019-04-17T16:42:55Z"
                    },
                    "vehicleId": {
                      "description": "Vehicle Id",
                      "type": "integer",
                      "format": "int64",
                      "example": 212014918214656
                    }
                  }
                }
              },
              "harshTurningCount": {
                "description": "Harsh turning count",
                "type": "integer",
                "format": "int64",
                "example": 10
              },
              "safetyScore": {
                "description": "Vehicle/Driver Safety Score",
                "type": "integer",
                "format": "int64",
                "example": 92
              },
              "safetyScoreRank": {
                "description": "Vehicle/Driver Safety Rank",
                "type": "integer",
                "format": "int64",
                "example": 7
              },
              "timeOverSpeedLimitMs": {
                "description": "Overspeed limit time, specified in milliseconds UNIX time.",
                "type": "integer",
                "format": "int64",
                "example": 123
              },
              "totalDistanceDrivenMeters": {
                "description": "Total distance driven meters",
                "type": "integer",
                "format": "int64",
                "example": 2509
              },
              "totalHarshEventCount": {
                "description": "Total harsh event count",
                "type": "integer",
                "format": "int64",
                "example": 20
              },
              "totalTimeDrivenMs": {
                "description": "Total driver time, specified in milliseconds UNIX time.",
                "type": "integer",
                "format": "int64",
                "example": 12343
              },
              "vehicleId": {
                "description": "Vehicle Id",
                "type": "integer",
                "format": "int64",
                "example": 212014918214656
              }
            }
          }
        }
      }
    },
    "Route": {
      "description": "A single route. At most one of assignedDriver and assignedVehicle will be provided based on the initial route assignment, and the returned driver and vehicle objects are associated with either the assignedVehicle or assignedDriver, respectively.",
      "type": "object",
      "properties": {
        "actualEndTime": {
          "description": "Actual end time, if it exists, for the route in RFC 3339 format.",
          "type": "string",
          "example": "2006-01-02T15:04:05Z07:00"
        },
        "actualStartTime": {
          "description": "Actual start time, if it exists, for the route in RFC 3339 format.",
          "type": "string",
          "example": "2006-01-02T15:04:05Z07:00"
        },
        "assignedDriver": {
          "$ref": "#/definitions/driverTinyResponse"
        },
        "assignedVehicle": {
          "$ref": "#/definitions/vehicleTinyResponse"
        },
        "driver": {
          "$ref": "#/definitions/driverTinyResponse"
        },
        "id": {
          "description": "Unique identifier for the route.",
          "type": "string",
          "example": "131313"
        },
        "name": {
          "description": "Name of the route.",
          "type": "string",
          "maxLength": 255,
          "example": "Pineapple delivery"
        },
        "notes": {
          "description": "Route notes.",
          "type": "string",
          "maxLength": 2000,
          "example": "Extra ripe and ready for immediate consumption"
        },
        "odometerEndMeters": {
          "description": "The odometer reading of the assignedVehicle or associated vehicle object at the end of the route.",
          "type": "number",
          "format": "integer",
          "example": 234234234
        },
        "odometerStartMeters": {
          "description": "The odometer reading of the assignedVehicle or associated vehicle object at the start of the route.",
          "type": "number",
          "format": "integer",
          "example": 123123123
        },
        "plannedMeters": {
          "description": "Total planned distance in meters for the route.",
          "type": "number",
          "format": "integer",
          "example": 12345
        },
        "routeStops": {
          "description": "The route stops in the route.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RouteStop"
          }
        },
        "scheduledEndTime": {
          "description": "Scheduled end time for the route in RFC 3339 format.",
          "type": "string",
          "example": "2006-01-02T15:04:05Z07:00"
        },
        "scheduledStartTime": {
          "description": "Scheduled start time for the route in RFC 3339 format.",
          "type": "string",
          "example": "2006-01-02T15:04:05Z07:00"
        },
        "startLocation": {
          "description": "The route start location object.",
          "$ref": "#/definitions/RouteLocation"
        },
        "state": {
          "description": "The current state of the route.",
          "type": "string",
          "enum": [
            "scheduled",
            "live",
            "completed"
          ],
          "example": "scheduled"
        },
        "vehicle": {
          "$ref": "#/definitions/vehicleTinyResponse"
        }
      }
    },
    "RouteLocation": {
      "description": "Location or address object for the start of a route or a route stop.",
      "type": "object",
      "properties": {
        "formattedAddress": {
          "description": "The location address.",
          "type": "string",
          "example": "350 Rhode Island St, San Francisco, CA"
        },
        "id": {
          "description": "Unique address identifier. If this field is provided, the other fields in this object will be filled from the associated address.",
          "type": "string",
          "example": "123"
        },
        "latitude": {
          "description": "The latitude of the address in decimal degrees.",
          "type": "number",
          "format": "double",
          "example": 37.765363
        },
        "longitude": {
          "description": "The longitude of the address in decimal degrees.",
          "type": "number",
          "format": "double",
          "example": -122.403098
        },
        "name": {
          "description": "The location address name.",
          "type": "string",
          "example": "Samsara"
        }
      }
    },
    "RouteStop": {
      "description": "A single route stop for a route.",
      "type": "object",
      "properties": {
        "actualArrivalTime": {
          "description": "Actual arrival time, if it exists, for the route stop in RFC 3339 format.",
          "type": "string",
          "example": "2006-01-02T15:04:05Z07:00"
        },
        "actualDepartureTime": {
          "description": "Actual departure time, if it exists, for the route stop in RFC 3339 format.",
          "type": "string",
          "example": "2006-01-02T15:04:05Z07:00"
        },
        "documents": {
          "description": "The documents associated with the stop.",
          "type": "array",
          "items": {
            "description": "A document object",
            "type": "object",
            "properties": {
              "id": {
                "description": "Unique identifier for the document.",
                "type": "string",
                "example": "b6199cf8-3073-441c-9b04-524fb2bb120d"
              }
            }
          }
        },
        "id": {
          "description": "Unique identifier for the route stop.",
          "type": "string",
          "example": "141414"
        },
        "liveShareUrl": {
          "description": "The live share URL for the stop.",
          "type": "string",
          "example": "https://cloud.samsara.com/fleet/viewer/job/fleet_viewer_token"
        },
        "notes": {
          "description": "Route stop notes.",
          "type": "string",
          "maxLength": 2000,
          "example": "Don't talk about pizza toppings with the pineapples"
        },
        "scheduledArrivalTime": {
          "description": "Scheduled arrival time for the route stop in RFC 3339 format.",
          "type": "string",
          "example": "2006-01-02T15:04:05Z07:00"
        },
        "scheduledDepartureTime": {
          "description": "Scheduled departure time for the route stop in RFC 3339 format.",
          "type": "string",
          "example": "2006-01-02T15:04:05Z07:00"
        },
        "skippedTime": {
          "description": "Skipped time, if it exists, for the route stop in RFC 3339 format.",
          "type": "string",
          "example": "2006-01-02T15:04:05Z07:00"
        },
        "state": {
          "description": "The current state of the route stop.",
          "type": "string",
          "enum": [
            "scheduled",
            "enRoute",
            "skipped",
            "arrived",
            "departed"
          ],
          "example": "scheduled"
        },
        "stopLocation": {
          "description": "The stop location object.",
          "$ref": "#/definitions/RouteLocation"
        }
      }
    },
    "Tag": {
      "allOf": [
        {
          "$ref": "#/definitions/TinyTag"
        },
        {
          "type": "object",
          "properties": {
            "addresses": {
              "description": "The addresses that belong to this tag.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaggedObject"
              }
            },
            "assets": {
              "description": "The trailers, unpowered, and powered assets that belong to this tag.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaggedObject"
              }
            },
            "drivers": {
              "description": "The drivers that belong to this tag.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaggedObject"
              }
            },
            "machines": {
              "description": "The machines that belong to thistag.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaggedObject"
              }
            },
            "parentTagId": {
              "description": "If this tag is part a hierarchical tag tree, this is the ID of the parent tag, otherwise this will be omitted.",
              "type": "string",
              "example": "4815"
            },
            "sensors": {
              "description": "The sensors that belong to this tag.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaggedObject"
              }
            },
            "vehicles": {
              "description": "The vehicles that belong to this tag.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaggedObject"
              }
            }
          }
        }
      ]
    },
    "TagUpdate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "addresses": {
          "description": "The addresses that belong to this tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaggedObjectId"
          }
        },
        "assets": {
          "description": "The trailers, unpowered, and powered assets that belong to this tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaggedObjectId"
          }
        },
        "drivers": {
          "description": "The drivers that belong to this tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaggedObjectId"
          }
        },
        "machines": {
          "description": "The machines that belong to this tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaggedObjectId"
          }
        },
        "name": {
          "description": "Name of this tag. Must be unique.",
          "type": "string",
          "maxLength": 191,
          "minLength": 1,
          "example": "California"
        },
        "parentTagId": {
          "description": "If this tag is part a hierarchical tag tree, this is the ID of the parent tag, otherwise this will be omitted.",
          "type": "string",
          "example": "4815"
        },
        "sensors": {
          "description": "The sensors that belong to this tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaggedObjectId"
          }
        },
        "vehicles": {
          "description": "The vehicles that belong to this tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaggedObjectId"
          }
        }
      }
    },
    "TaggedObject": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/TaggedObjectId"
        },
        "name": {
          "description": "The object name.",
          "type": "string",
          "example": "Driver Don"
        }
      }
    },
    "TaggedObjectId": {
      "description": "The object ID.",
      "type": "string",
      "example": "23502866574"
    },
    "TinyTag": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique Samsara ID of this tag.",
          "type": "string",
          "example": "342417"
        },
        "name": {
          "description": "Name of this tag.",
          "type": "string",
          "example": "California"
        }
      }
    },
    "UnassignedDrivingSegmentListResponse": {
      "description": "A list of driving segments with no associated driver(s).",
      "type": "array",
      "items": {
        "$ref": "#/definitions/UnassignedDrivingSegmentResponse"
      }
    },
    "UnassignedDrivingSegmentResponse": {
      "description": "A driving segment with no associated driver(s) that may or may not be in a unassigned, pending, rejected, or assigned states.",
      "type": "object",
      "properties": {
        "annotation": {
          "$ref": "#/definitions/annotation"
        },
        "createdAtTime": {
          "description": "The time that the server created the driving segment, specified in RFC 3339 format.",
          "type": "string",
          "format": "date-time",
          "example": "2019-04-17T16:43:00Z"
        },
        "driver": {
          "$ref": "#/definitions/driverTinyResponse"
        },
        "endTime": {
          "$ref": "#/definitions/endTimeBodyParam"
        },
        "id": {
          "description": "Unique identifier for the unassigned driving segment.",
          "type": "string",
          "format": "uuid",
          "example": "08b3aeada5f4ab3010c0b4efa28d2d1890dbf8d48d2d"
        },
        "startTime": {
          "$ref": "#/definitions/startTimeBodyParam"
        },
        "status": {
          "description": "Status of assignment for this segment.",
          "type": "string",
          "format": "string",
          "enum": [
            "pending",
            "accepted",
            "rejected",
            "unassigned",
            "unknown"
          ],
          "example": "pending"
        },
        "vehicle": {
          "$ref": "#/definitions/vehicleTinyResponse"
        }
      }
    },
    "User": {
      "description": "A user object",
      "type": "object",
      "required": [
        "id",
        "authType",
        "name",
        "roles",
        "email"
      ],
      "properties": {
        "authType": {
          "description": "The authentication type the user uses to authenticate. To use SAML this organization must have a configured SAML integration.",
          "type": "string",
          "enum": [
            "default",
            "saml"
          ]
        },
        "email": {
          "description": "The email address of this user.",
          "type": "string",
          "example": "user@company.com"
        },
        "id": {
          "description": "Unique ID for the user.",
          "type": "string",
          "example": "123"
        },
        "name": {
          "description": "The first and last name of the user.",
          "type": "string",
          "example": "Bob Smith"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRoleResponse"
          }
        }
      }
    },
    "UserCreate": {
      "description": "The user creation arguments",
      "type": "object",
      "required": [
        "name",
        "email",
        "authType",
        "roles"
      ],
      "properties": {
        "authType": {
          "description": "The authentication type the user uses to authenticate. To use SAML this organization must have a configured SAML integration.",
          "type": "string",
          "enum": [
            "default",
            "saml"
          ]
        },
        "email": {
          "description": "The email address of this user. This cannot be changed after creation.",
          "type": "string",
          "maxLength": 191,
          "example": "user@company.com"
        },
        "name": {
          "description": "The first and last name of the user.",
          "type": "string",
          "maxLength": 255,
          "example": "Bob Smith"
        },
        "roles": {
          "description": "The roles for this user. Users must have at least a single role to be a part of an organization.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserCreateRoleInput"
          }
        }
      }
    },
    "UserCreateRoleInput": {
      "type": "object",
      "required": [
        "roleId"
      ],
      "properties": {
        "roleId": {
          "description": "The id of the role the user has been granted.",
          "type": "string",
          "example": "8a9371af-82d1-4158-bf91-4ecc8d3a114c"
        }
      }
    },
    "UserRole": {
      "description": "A user role object.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/userRoleTinyResponse"
        }
      ]
    },
    "UserRoleInput": {
      "type": "object",
      "required": [
        "roleId"
      ],
      "properties": {
        "roleId": {
          "description": "The id of the role the user has been granted.",
          "type": "string",
          "example": "8a9371af-82d1-4158-bf91-4ecc8d3a114c"
        },
        "tagId": {
          "description": "The id of the tag used to grant a role. If no tag is specified, this role applies at the organization level.",
          "type": "string",
          "example": "3914"
        }
      },
      "example": [
        {
          "roleId": "8a9371af-82d1-4158-bf91-4ecc8d3a114c"
        },
        {
          "roleId": "717fe0f3-f87f-4a57-b3ce-33a5a9f394cd",
          "tagId": "3914"
        }
      ]
    },
    "UserRoleResponse": {
      "description": "A user role",
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/userRoleTinyResponse"
        },
        "tag": {
          "allOf": [
            {
              "description": "The id of the tag used to grant a role. If no tag is specified, this role applies at the organization level."
            },
            {
              "$ref": "#/definitions/tagTinyResponse"
            }
          ]
        }
      },
      "example": [
        {
          "role": {
            "id": "8a9371af-82d1-4158-bf91-4ecc8d3a114c",
            "name": "Full Admin"
          }
        },
        {
          "role": {
            "id": "717fe0f3-f87f-4a57-b3ce-33a5a9f394cd",
            "name": "Read-Only Admin"
          },
          "tag": {
            "id": "3914",
            "name": "East Coast"
          }
        }
      ]
    },
    "UserUpdate": {
      "description": "The user update arguments",
      "type": "object",
      "properties": {
        "authType": {
          "description": "The authentication type the user uses to authenticate. To use SAML this organization must have a configured SAML integration.",
          "type": "string",
          "enum": [
            "default",
            "saml"
          ]
        },
        "name": {
          "description": "The first and last name of the user.",
          "type": "string",
          "maxLength": 255,
          "example": "Bob Smith"
        },
        "roles": {
          "description": "The roles for this user. Users must have at least a single role to be a part of an organization.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRoleInput"
          }
        }
      }
    },
    "V1CargoResponse": {
      "description": "Contains the current cargo status of a sensor.",
      "type": "object",
      "properties": {
        "groupId": {
          "type": "integer",
          "format": "int64",
          "example": 101
        },
        "sensors": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "cargoEmpty": {
                "description": "Flag indicating whether the current cargo is empty or loaded.",
                "type": "boolean",
                "example": true
              },
              "cargoStatusTime": {
                "description": "The timestamp of reported cargo status, specified in RFC 3339 time.",
                "type": "string",
                "example": "2019-04-17T16:42:55Z"
              },
              "id": {
                "description": "ID of the sensor.",
                "type": "integer",
                "format": "int64",
                "example": 122
              },
              "name": {
                "description": "Name of the sensor.",
                "type": "string",
                "example": "Trailer Cargo V1Sensor"
              },
              "trailerId": {
                "description": "ID of the trailer associated with the sensor for the data point. If no trailer is connected, this parameter will not be reported.",
                "type": "integer",
                "example": 123
              },
              "vehicleId": {
                "description": "ID of the vehicle associated with the sensor for the data point. If no vehicle is connected, this parameter will not be reported.",
                "type": "integer",
                "example": 124
              }
            }
          }
        }
      }
    },
    "V1DataInputHistoryResponse": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "description": "The ID of this data input",
          "type": "integer",
          "format": "int64",
          "example": 12345
        },
        "name": {
          "description": "Name of this data input",
          "type": "string",
          "example": "Pump Flow"
        },
        "points": {
          "description": "Data points from this data input",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "timeMs": {
                "type": "integer",
                "format": "int64",
                "example": 1453449599999
              },
              "value": {
                "type": "number",
                "format": "double",
                "example": 12.332
              }
            }
          }
        }
      }
    },
    "V1DispatchJob": {
      "allOf": [
        {
          "type": "object",
          "required": [
            "id",
            "group_id",
            "dispatch_route_id",
            "job_state"
          ],
          "properties": {
            "arrived_at_ms": {
              "description": "The time at which the driver arrived at the job destination.",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "completed_at_ms": {
              "description": "The time at which the job was marked complete (e.g. started driving to the next destination).",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "dispatch_route_id": {
              "description": "ID of the route that this job belongs to.",
              "type": "integer",
              "format": "int64",
              "example": 55
            },
            "documents": {
              "description": "Document submissions associated with this job.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/V1DispatchJobDocumentInfo"
              }
            },
            "driver_id": {
              "description": "ID of the driver assigned to the dispatch job.",
              "type": "integer",
              "format": "int64",
              "example": 444
            },
            "en_route_at_ms": {
              "description": "The time at which the assigned driver started fulfilling the job (e.g. started driving to the destination).",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "estimated_arrival_ms": {
              "description": "The time at which the assigned driver is estimated to arrive at the job destination. Only valid for en-route jobs.",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "fleet_viewer_url": {
              "description": "Fleet viewer url of the dispatch job.",
              "type": "string",
              "example": "https://cloud.samsara.com/fleet/viewer/job/fleet_viewer_token"
            },
            "group_id": {
              "type": "integer",
              "format": "int64",
              "example": 101
            },
            "id": {
              "description": "ID of the Samsara dispatch job.",
              "type": "integer",
              "format": "int64",
              "example": 773
            },
            "job_state": {
              "$ref": "#/definitions/V1jobStatus"
            },
            "skipped_at_ms": {
              "description": "The time at which the job was marked skipped.",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "vehicle_id": {
              "description": "ID of the vehicle used for the dispatch job.",
              "type": "integer",
              "format": "int64",
              "example": 112
            }
          }
        },
        {
          "$ref": "#/definitions/V1DispatchJobCreate"
        }
      ]
    },
    "V1DispatchJobCreate": {
      "type": "object",
      "required": [
        "scheduled_arrival_time_ms"
      ],
      "properties": {
        "destination_address": {
          "description": "The address of the job destination, as it would be recognized if provided to maps.google.com. Optional if a valid destination address ID is provided.",
          "type": "string",
          "example": "123 Main St, Philadelphia, PA 19106"
        },
        "destination_address_id": {
          "description": "ID of the job destination associated with an address book entry. Optional if valid values are provided for destination address and latitude/longitude. If a valid destination address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the destination name is not provided.",
          "type": "integer",
          "format": "int64",
          "example": 67890
        },
        "destination_lat": {
          "description": "Latitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.",
          "type": "number",
          "format": "double",
          "example": 123.456
        },
        "destination_lng": {
          "description": "Longitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.",
          "type": "number",
          "format": "double",
          "example": 37.459
        },
        "destination_name": {
          "description": "The name of the job destination. If provided, it will take precedence over the name of the address book entry.",
          "type": "string",
          "example": "ACME Inc. Philadelphia HQ"
        },
        "notes": {
          "description": "Notes regarding the details of this job, maximum of 2000 characters; newline characters ('\\n')can be used for formatting.",
          "type": "string",
          "example": "Ensure crates are stacked no more than 3 high."
        },
        "scheduled_arrival_time_ms": {
          "description": "The time at which the assigned driver is scheduled to arrive at the job destination.",
          "type": "integer",
          "format": "int64",
          "example": 1462881998034
        },
        "scheduled_departure_time_ms": {
          "description": "The time at which the assigned driver is scheduled to depart from the job destination.",
          "type": "integer",
          "format": "int64",
          "example": 1462881998034
        }
      }
    },
    "V1DispatchJobDocumentInfo": {
      "type": "object",
      "required": [
        "driverId",
        "id"
      ],
      "properties": {
        "driverId": {
          "description": "ID of driver that submitted the document.",
          "type": "integer",
          "example": 1234
        },
        "id": {
          "description": "ID of document. This can be used to query for the document's info via the /v1/fleet/drivers/{driver_id}/documents/{document_id} endpoint",
          "type": "string",
          "example": "2018_42424242"
        }
      }
    },
    "V1DispatchJobUpdate": {
      "allOf": [
        {
          "type": "object",
          "required": [
            "id",
            "dispatch_jobs"
          ],
          "properties": {
            "id": {
              "description": "ID of the Samsara dispatch job to update",
              "type": "integer",
              "format": "int64",
              "example": 42
            }
          }
        },
        {
          "$ref": "#/definitions/V1DispatchJobCreate"
        }
      ]
    },
    "V1DispatchRoute": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "dispatch_jobs": {
              "description": "The dispatch jobs associated with this route.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/V1DispatchJob"
              }
            },
            "id": {
              "description": "ID of the Samsara dispatch route.",
              "type": "integer",
              "format": "int64",
              "example": 556
            }
          }
        },
        {
          "$ref": "#/definitions/V1DispatchRouteBase"
        }
      ]
    },
    "V1DispatchRouteBase": {
      "type": "object",
      "properties": {
        "actual_end_ms": {
          "description": "The time in Unix epoch milliseconds that the route actually ended.",
          "type": "integer",
          "format": "int64",
          "example": 1462882101000
        },
        "actual_start_ms": {
          "description": "The time in Unix epoch milliseconds that the route actually started.",
          "type": "integer",
          "format": "int64",
          "example": 1462882098000
        },
        "driver_id": {
          "description": "ID of the driver assigned to the dispatch route. Note that driver_id and vehicle_id are mutually exclusive. If neither is specified, then the route is unassigned.",
          "type": "integer",
          "format": "int64",
          "example": 555
        },
        "group_id": {
          "description": "ID of the group if the organization has multiple groups (optional).",
          "type": "integer",
          "format": "int64",
          "example": 101
        },
        "name": {
          "description": "Descriptive name of this route.",
          "type": "string",
          "example": "Bid #123"
        },
        "notes": {
          "description": "Notes regarding the details of this route; maximum of 2000 characters; newline characters ('\\n')can be used for formatting.",
          "type": "string",
          "example": "Please make sure to confirm crate count at each stop on this route.\nTotal number of crates for route: 23."
        },
        "odometer_end_meters": {
          "description": "Odometer reading at the end of the route. Will not be returned if Route is not completed or if Odometer information is not available for the relevant vehicle.",
          "type": "integer",
          "format": "int64",
          "example": 2000000
        },
        "odometer_start_meters": {
          "description": "Odometer reading at the start of the route. Will not be returned if Route has not started or if Odometer information is not available for the relevant vehicle.",
          "type": "integer",
          "format": "int64",
          "example": 1000000
        },
        "scheduled_end_ms": {
          "description": "The time in Unix epoch milliseconds that the last job in the route is scheduled to end.",
          "type": "integer",
          "format": "int64",
          "example": 1462881998034
        },
        "scheduled_meters": {
          "description": "The distance expected to be traveled for this route in meters.",
          "type": "integer",
          "format": "int64",
          "example": 10000
        },
        "scheduled_start_ms": {
          "description": "The time in Unix epoch milliseconds that the route is scheduled to start.",
          "type": "integer",
          "format": "int64",
          "example": 1462881998034
        },
        "start_location_address": {
          "description": "The address of the route's starting location, as it would be recognized if provided to maps.google.com. Optional if a valid start location address ID is provided.",
          "type": "string",
          "example": "123 Main St, Philadelphia, PA 19106"
        },
        "start_location_address_id": {
          "description": "ID of the start location associated with an address book entry. Optional if valid values are provided for start location address and latitude/longitude. If a valid start location address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the start location name is not provided.",
          "type": "integer",
          "format": "int64",
          "example": 67890
        },
        "start_location_lat": {
          "description": "Latitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.",
          "type": "number",
          "format": "double",
          "example": 123.456
        },
        "start_location_lng": {
          "description": "Longitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.",
          "type": "number",
          "format": "double",
          "example": 37.459
        },
        "start_location_name": {
          "description": "The name of the route's starting location. If provided, it will take precedence over the name of the address book entry.",
          "type": "string",
          "example": "ACME Inc. Philadelphia HQ"
        },
        "trailer_id": {
          "description": "ID of the trailer assigned to the dispatch route. Note that trailers can only be assigned to routes that have a Vehicle or Driver assigned to them.",
          "type": "integer",
          "format": "int64",
          "example": 666
        },
        "vehicle_id": {
          "description": "ID of the vehicle assigned to the dispatch route. Note that vehicle_id and driver_id are mutually exclusive. If neither is specified, then the route is unassigned.",
          "type": "integer",
          "format": "int64",
          "example": 444
        }
      }
    },
    "V1DispatchRouteCreate": {
      "allOf": [
        {
          "type": "object",
          "required": [
            "dispatch_jobs"
          ],
          "properties": {
            "dispatch_jobs": {
              "description": "The dispatch jobs to create for this route.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/V1DispatchJobCreate"
              }
            }
          }
        },
        {
          "$ref": "#/definitions/V1DispatchRouteCreateBase"
        }
      ]
    },
    "V1DispatchRouteCreateBase": {
      "type": "object",
      "required": [
        "name",
        "scheduled_start_ms"
      ],
      "properties": {
        "driver_id": {
          "description": "ID of the driver assigned to the dispatch route. Note that driver_id and vehicle_id are mutually exclusive. If neither is specified, then the route is unassigned.",
          "type": "integer",
          "format": "int64",
          "example": 555
        },
        "group_id": {
          "description": "ID of the group. This can be found on the API Tokens page.",
          "type": "integer",
          "format": "int64",
          "example": 101
        },
        "name": {
          "description": "Descriptive name of this route.",
          "type": "string",
          "example": "Bid #123"
        },
        "notes": {
          "description": "Notes regarding the details of this route; maximum of 2000 characters; newline characters ('\\n')can be used for formatting.",
          "type": "string",
          "example": "Please make sure to confirm crate count at each stop on this route.\nTotal number of crates for route: 23."
        },
        "scheduled_end_ms": {
          "description": "The time in Unix epoch milliseconds that the last job in the route is scheduled to end.",
          "type": "integer",
          "format": "int64",
          "example": 1462881998034
        },
        "scheduled_meters": {
          "description": "The distance expected to be traveled for this route in meters.",
          "type": "integer",
          "format": "int64",
          "example": 10000
        },
        "scheduled_start_ms": {
          "description": "The time in Unix epoch milliseconds that the route is scheduled to start.",
          "type": "integer",
          "format": "int64",
          "example": 1462881998034
        },
        "start_location_address": {
          "description": "The address of the route's starting location, as it would be recognized if provided to maps.google.com. Optional if a valid start location address ID is provided.",
          "type": "string",
          "example": "123 Main St, Philadelphia, PA 19106"
        },
        "start_location_address_id": {
          "description": "ID of the start location associated with an address book entry. Optional if valid values are provided for start location address and latitude/longitude. If a valid start location address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the start location name is not provided.",
          "type": "integer",
          "format": "int64",
          "example": 67890
        },
        "start_location_lat": {
          "description": "Latitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.",
          "type": "number",
          "format": "double",
          "example": 123.456
        },
        "start_location_lng": {
          "description": "Longitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.",
          "type": "number",
          "format": "double",
          "example": 37.459
        },
        "start_location_name": {
          "description": "The name of the route's starting location. If provided, it will take precedence over the name of the address book entry.",
          "type": "string",
          "example": "ACME Inc. Philadelphia HQ"
        },
        "trailer_id": {
          "description": "ID of the trailer assigned to the dispatch route. Note that trailers can only be assigned to routes that have a Vehicle or Driver assigned to them.",
          "type": "integer",
          "format": "int64",
          "example": 666
        },
        "vehicle_id": {
          "description": "ID of the vehicle assigned to the dispatch route. Note that vehicle_id and driver_id are mutually exclusive. If neither is specified, then the route is unassigned.",
          "type": "integer",
          "format": "int64",
          "example": 444
        }
      }
    },
    "V1DispatchRouteHistoricalEntry": {
      "type": "object",
      "properties": {
        "changed_at_ms": {
          "description": "Timestamp that the route was updated, represented as Unix milliseconds since epoch.",
          "type": "integer",
          "format": "int64",
          "example": 1499411220000
        },
        "route": {
          "$ref": "#/definitions/V1DispatchRoute"
        }
      }
    },
    "V1DispatchRouteHistory": {
      "type": "object",
      "properties": {
        "history": {
          "description": "History of the route's state changes.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/V1DispatchRouteHistoricalEntry"
          }
        }
      }
    },
    "V1DispatchRouteUpdate": {
      "allOf": [
        {
          "type": "object",
          "required": [
            "dispatch_jobs",
            "group_id"
          ],
          "properties": {
            "dispatch_jobs": {
              "description": "The dispatch jobs for the route.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/V1DispatchJobUpdate"
              }
            }
          }
        },
        {
          "$ref": "#/definitions/V1DispatchRouteUpdateBase"
        }
      ]
    },
    "V1DispatchRouteUpdateBase": {
      "allOf": [
        {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "description": "ID of route. This must match the route ID passed in URL.",
              "type": "integer",
              "format": "int64",
              "example": "42"
            }
          }
        },
        {
          "$ref": "#/definitions/V1DispatchRouteCreateBase"
        }
      ]
    },
    "V1DispatchRoutes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/V1DispatchRoute"
      }
    },
    "V1Document": {
      "allOf": [
        {
          "type": "object",
          "required": [
            "id",
            "orgId",
            "driverId",
            "driverCreatedAtMs",
            "serverCreatedAtMs",
            "serverUpdatedAtMs",
            "documentType",
            "fields"
          ],
          "properties": {
            "documentType": {
              "description": "Descriptive name of this type of document.",
              "type": "string",
              "example": "Fuel Receipt"
            },
            "driverCreatedAtMs": {
              "description": "The time in Unix epoch milliseconds that the document is created on the driver app.",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "driverId": {
              "description": "ID of the driver for whom the document is submitted",
              "type": "integer",
              "format": "int64",
              "example": 555
            },
            "fields": {
              "description": "The fields associated with this document.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/V1DocumentField"
              },
              "example": [
                {
                  "label": "Photos",
                  "photoValue": [],
                  "valueType": "ValueType_Photo"
                },
                {
                  "label": "Gallons",
                  "numberValue": 12.34,
                  "valueType": "ValueType_Number"
                },
                {
                  "label": "City",
                  "stringValue": "San Francisco, CA",
                  "valueType": "ValueType_String"
                },
                {
                  "label": "Fuel Type",
                  "multipleChoiceValue": [
                    {
                      "selected": true,
                      "value": "Diesel"
                    },
                    {
                      "selected": false,
                      "value": "Gas"
                    }
                  ],
                  "valueType": "ValueType_MultipleChoice"
                }
              ]
            },
            "id": {
              "description": "ID of the document",
              "type": "string",
              "example": "2018_42424242"
            },
            "orgId": {
              "description": "Organization ID that the document \u0026 driver who submitted the doc belongs to",
              "type": "integer",
              "format": "int64",
              "example": 555
            },
            "serverCreatedAtMs": {
              "description": "The time in Unix epoch milliseconds that the document is created on the server.",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "serverUpdatedAtMs": {
              "description": "The time in Unix epoch milliseconds that the document is updated on the server.",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "vehicleId": {
              "description": "VehicleID of the driver at document creation.",
              "type": "integer",
              "format": "int64",
              "example": 222
            }
          }
        },
        {
          "$ref": "#/definitions/V1DocumentBase"
        }
      ]
    },
    "V1DocumentBase": {
      "type": "object",
      "required": [
        "dispatchJobId",
        "notes"
      ],
      "properties": {
        "dispatchJobId": {
          "description": "ID of the Samsara dispatch job for which the document is submitted",
          "type": "integer",
          "format": "int64",
          "example": 773
        },
        "notes": {
          "description": "Notes submitted with this document.",
          "type": "string",
          "example": "Fueled up before delivery."
        },
        "state": {
          "description": "The condition of the document created for the driver. Can be either `Required` or `Submitted`, if no value is specified, `state` defaults to `Required`. `Required` documents are pre-populated documents for the Driver to fill out in the Driver App.",
          "type": "string",
          "default": "Required",
          "enum": [
            "Required",
            "Submitted"
          ],
          "example": "Submitted"
        }
      }
    },
    "V1DocumentCreate": {
      "allOf": [
        {
          "description": "Arguments to create a document.",
          "type": "object",
          "required": [
            "documentTypeUuid",
            "fields"
          ],
          "properties": {
            "documentTypeUuid": {
              "description": "Universally unique identifier for the document type this document is being created for.",
              "type": "string",
              "example": "4aff772c-a7bb-45e6-8e41-6a53e34feb83"
            },
            "fields": {
              "description": "List of fields and associated values for a given document. The fields must be listed in the order that that they appear in the specificied document type. Today `stringValue`, `numberValue`, and `multipleChoiceValue` are the supported document upload field types.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/V1DocumentField"
              },
              "example": [
                {
                  "label": "Gallons",
                  "numberValue": 12.34,
                  "valueType": "ValueType_Number"
                },
                {
                  "label": "City",
                  "stringValue": "San Francisco, CA",
                  "valueType": "ValueType_String"
                },
                {
                  "label": "Fuel Type",
                  "multipleChoiceValue": [
                    {
                      "selected": true,
                      "value": "Diesel"
                    },
                    {
                      "selected": false,
                      "value": "Gas"
                    }
                  ],
                  "valueType": "ValueType_MultipleChoice"
                }
              ]
            }
          }
        },
        {
          "$ref": "#/definitions/V1DocumentCreateBase"
        }
      ]
    },
    "V1DocumentCreateBase": {
      "type": "object",
      "properties": {
        "dispatchJobId": {
          "description": "ID of the Samsara dispatch job for which the document is submitted",
          "type": "integer",
          "format": "int64",
          "example": 773
        },
        "notes": {
          "description": "Notes submitted with this document.",
          "type": "string",
          "example": "Fueled up before delivery."
        },
        "state": {
          "description": "The condition of the document created for the driver. Can be either `Required` or `Submitted`, if no value is specified, `state` defaults to `Required`. `Required` documents are pre-populated documents for the Driver to fill out in the Driver App.",
          "type": "string",
          "default": "Required",
          "enum": [
            "Required",
            "Submitted"
          ],
          "example": "Submitted"
        }
      }
    },
    "V1DocumentField": {
      "allOf": [
        {
          "description": "A field of a document. A field can be a string type, number type, or photo type, which can be identified from its valueType. Between stringValue, numberValue, and photoValue, only one can exist for a single document field depending on the valueType.",
          "type": "object",
          "required": [
            "label"
          ],
          "properties": {
            "label": {
              "description": "Descriptive name of this field.",
              "type": "string",
              "example": "Fuel Cost ($)"
            },
            "value": {
              "description": "DEPRECATED: Please use stringValue, numberValue, or photoValue instead. Value of this field. Depending on what kind of field it is, this may be one of the following: an array of image urls, a float, an integer, or a string.",
              "example": 23.45
            }
          }
        },
        {
          "$ref": "#/definitions/V1DocumentFieldCreate"
        }
      ]
    },
    "V1DocumentFieldCreate": {
      "type": "object",
      "required": [
        "valueType"
      ],
      "properties": {
        "multipleChoiceValue": {
          "description": "Value of this field if this document field has valueType: ValueType_MultipleChoice. Array of objects containing two fields: the string value of the multiple choice option and a boolean representing whether or not the choice was selected",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "selected": {
                "type": "boolean"
              },
              "value": {
                "type": "string"
              }
            }
          }
        },
        "numberValue": {
          "description": "Value of this field if this document field has valueType: ValueType_Number.",
          "type": "number",
          "format": "double",
          "example": 12.34
        },
        "photoValue": {
          "description": "Value of this field if this document field has valueType: ValueType_Photo. Array of photo objects where each object contains a URL for a photo.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "url": {
                "description": "Photo URL for a JPG image",
                "type": "string"
              }
            }
          },
          "example": [
            {
              "url": "https://www.samsara.com/photo1"
            },
            {
              "url": "https://www.samsara.com/photo2"
            }
          ]
        },
        "stringValue": {
          "description": "Value of this field if this document field has valueType: ValueType_String.",
          "type": "string",
          "example": "This is a string."
        },
        "valueType": {
          "description": "Determines the type of this field and what type of value this field has. It should be either ValueType_Number, ValueType_String, ValueType_Photo, or ValueType_MultipleChoice.",
          "type": "string",
          "example": "ValueType_Number"
        }
      }
    },
    "V1DocumentFieldType": {
      "type": "object",
      "required": [
        "label",
        "valueType"
      ],
      "properties": {
        "label": {
          "description": "Descriptive name of this field type.",
          "type": "string",
          "example": "Fuel Cost ($)"
        },
        "numberValueTypeMetadata": {
          "description": "Additional metadata information for a number field type. Only defined when a field type has valueType: ValueType_Number.",
          "type": "object",
          "properties": {
            "numDecimalPlaces": {
              "description": "Number of decimal places that values for this field type can have.",
              "type": "number",
              "format": "int64",
              "example": 2
            }
          }
        },
        "valueType": {
          "description": "The kind of value that can be submitted for this fieldType. It should be either ValueType_Number, ValueType_String, or ValueType_Photo.",
          "type": "string",
          "example": "ValueType_Number"
        }
      }
    },
    "V1DocumentType": {
      "type": "object",
      "required": [
        "name",
        "orgId",
        "uuid"
      ],
      "properties": {
        "fieldTypes": {
          "description": "The field types determine the names of fields for this document type. They also determine the types of values a document submitted for this document type can have.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/V1DocumentFieldType"
          }
        },
        "name": {
          "description": "Name of the document type.",
          "type": "string",
          "example": "Fuel Receipt"
        },
        "orgId": {
          "description": "ID for the organization this document belongs to.",
          "type": "integer",
          "format": "int64",
          "example": 773
        },
        "uuid": {
          "description": "Universally unique identifier for the document type. Can be passed in as a documentTypeUuid when creating a document for this document type.",
          "type": "string",
          "example": "4aff772c-a7bb-45e6-8e41-6a53e34feb83"
        }
      }
    },
    "V1DocumentTypes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/V1DocumentType"
      }
    },
    "V1Documents": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/V1Document"
      }
    },
    "V1DoorResponse": {
      "description": "Contains the current door status of a sensor.",
      "type": "object",
      "properties": {
        "groupId": {
          "type": "integer",
          "format": "int64",
          "example": 101
        },
        "sensors": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "doorClosed": {
                "description": "Flag indicating whether the current door is closed or open.",
                "type": "boolean",
                "example": true
              },
              "doorStatusTime": {
                "description": "The timestamp of reported door status, specified in RFC 3339 time.",
                "type": "string",
                "example": "2019-04-17T16:42:55Z"
              },
              "id": {
                "description": "ID of the sensor.",
                "type": "integer",
                "format": "int64",
                "example": 122
              },
              "name": {
                "description": "Name of the sensor.",
                "type": "string",
                "example": "Trailer Door V1Sensor"
              },
              "trailerId": {
                "description": "ID of the trailer associated with the sensor for the data point. If no trailer is connected, this parameter will not be reported.",
                "type": "integer",
                "example": 123
              },
              "vehicleId": {
                "description": "ID of the vehicle associated with the sensor for the data point. If no vehicle is connected, this parameter will not be reported.",
                "type": "integer",
                "example": 124
              }
            }
          }
        }
      }
    },
    "V1DriverDailyLogResponse": {
      "type": "object",
      "properties": {
        "days": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "activeHours": {
                "description": "Hours spent on duty or driving, rounded to two decimal places.",
                "type": "number",
                "format": "double",
                "example": 5.4
              },
              "activeMs": {
                "description": "Milliseconds spent on duty or driving.",
                "type": "integer",
                "format": "int64",
                "example": 691200
              },
              "certified": {
                "description": "Whether this HOS day chart was certified by the driver.",
                "type": "boolean"
              },
              "certifiedAtMs": {
                "description": "Unix epoch time (in ms) of time when this chart was certified. If this chart is uncertified, 0.",
                "type": "number",
                "format": "int64"
              },
              "distanceMiles": {
                "description": "Distance driven in miles, rounded to two decimal places.",
                "type": "number",
                "format": "double",
                "example": 123.24
              },
              "endMs": {
                "description": "End of the HOS day, specified in milliseconds UNIX time.",
                "type": "integer",
                "example": 1473836400000
              },
              "shippingDocIds": {
                "description": "List of customer shipping document IDs associated with the driver for the day.",
                "type": "object",
                "format": "int64",
                "example": [
                  14334,
                  104920
                ]
              },
              "startMs": {
                "description": "End of the HOS day, specified in milliseconds UNIX time.",
                "type": "integer",
                "example": 1473750000000
              },
              "trailerIds": {
                "description": "List of trailer ID's associated with the driver for the day.",
                "type": "object",
                "format": "int64",
                "example": [
                  10293,
                  192933
                ]
              },
              "vehicleIds": {
                "description": "List of vehicle ID's associated with the driver for the day.",
                "type": "object",
                "format": "int64",
                "example": [
                  192319,
                  12958
                ]
              }
            }
          }
        }
      }
    },
    "V1DriverSafetyScoreResponse": {
      "description": "Safety score details for a driver",
      "type": "object",
      "properties": {
        "crashCount": {
          "description": "Crash event count",
          "type": "integer",
          "example": 0
        },
        "driverId": {
          "description": "Driver ID",
          "type": "integer",
          "example": 1234
        },
        "harshAccelCount": {
          "description": "Harsh acceleration event count",
          "type": "integer",
          "example": 1
        },
        "harshBrakingCount": {
          "description": "Harsh braking event count",
          "type": "integer",
          "example": 2
        },
        "harshEvents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/V1SafetyReportHarshEvent"
          }
        },
        "harshTurningCount": {
          "description": "Harsh turning event count",
          "type": "integer",
          "example": 0
        },
        "safetyScore": {
          "description": "Safety Score",
          "type": "integer",
          "example": 97
        },
        "safetyScoreRank": {
          "description": "Safety Score Rank",
          "type": "string",
          "example": "26"
        },
        "timeOverSpeedLimitMs": {
          "description": "Amount of time driven over the speed limit in milliseconds",
          "type": "integer",
          "example": 3769
        },
        "totalDistanceDrivenMeters": {
          "description": "Total distance driven in meters",
          "type": "integer",
          "example": 291836
        },
        "totalHarshEventCount": {
          "description": "Total harsh event count",
          "type": "integer",
          "example": 3
        },
        "totalTimeDrivenMs": {
          "description": "Amount of time driven in milliseconds",
          "type": "integer",
          "example": 19708293
        }
      }
    },
    "V1DvirBase": {
      "type": "object",
      "properties": {
        "authorSignature": {
          "description": "The authors signature for the DVIR.",
          "type": "object",
          "properties": {
            "driverId": {
              "description": "ID of the driver who signed the DVIR. Will not be returned if mechanicUserId is returned.",
              "type": "integer",
              "format": "int64",
              "example": 2581
            },
            "email": {
              "description": "Email of the  driver|mechanic who signed the DVIR.",
              "type": "string",
              "example": "j.smith@yahoo.com"
            },
            "mechanicUserId": {
              "description": "ID of the mechanic who signed the DVIR. Will not be returned if driverId is returned.",
              "type": "integer",
              "format": "int64",
              "example": 14849
            },
            "name": {
              "description": "The name of the driver or mechanic who signed the DVIR.",
              "type": "string",
              "example": "John Smith"
            },
            "signedAt": {
              "description": "The time in millis when the DVIR was signed",
              "type": "integer",
              "format": "int64",
              "example": 12535500000
            },
            "type": {
              "description": "Type corresponds to whether the signature corresponds to driver|mechanic.",
              "type": "string",
              "example": "driver"
            },
            "username": {
              "description": "Username of the  driver|mechanic who signed the DVIR.",
              "type": "string",
              "example": "jsmith"
            }
          }
        },
        "defectsCorrected": {
          "description": "Signifies if the defects on the vehicle corrected after the DVIR is done.",
          "type": "boolean",
          "example": true
        },
        "defectsNeedNotBeCorrected": {
          "description": "Signifies if the defects on this vehicle can be ignored.",
          "type": "boolean",
          "example": false
        },
        "id": {
          "description": "The id of this DVIR record.",
          "type": "integer",
          "format": "int64",
          "example": 19
        },
        "inspectionType": {
          "description": "Inspection type of the DVIR.",
          "type": "string",
          "example": "pre trip"
        },
        "mechanicNotes": {
          "description": "The mechanics notes on the DVIR.",
          "type": "string",
          "example": "The vehicle is now safe."
        },
        "mechanicOrAgentSignature": {
          "description": "The mechanic's or agent's signature for the DVIR.",
          "type": "object",
          "properties": {
            "driverId": {
              "description": "ID of the driver who signed the DVIR. Will not be returned if mechanicUserId is returned.",
              "type": "integer",
              "format": "int64",
              "example": 2581
            },
            "email": {
              "description": "Email of the  agent|mechanic who signed the DVIR.",
              "type": "string",
              "example": "j.smith@yahoo.com"
            },
            "mechanicUserId": {
              "description": "ID of the mechanic who signed the DVIR. Will not be returned if driverId is returned.",
              "type": "integer",
              "format": "int64",
              "example": 14849
            },
            "name": {
              "description": "The name of the agent or mechanic who signed the DVIR.",
              "type": "string",
              "example": "John Smith"
            },
            "signedAt": {
              "description": "The time in millis when the DVIR was signed",
              "type": "integer",
              "format": "int64",
              "example": 12535500000
            },
            "type": {
              "description": "Type corresponds to whether the signature corresponds to driver|mechanic.",
              "type": "string",
              "example": "driver"
            },
            "username": {
              "description": "Username of the  agent|mechanic who signed the DVIR.",
              "type": "string",
              "example": "jsmith"
            }
          }
        },
        "nextDriverSignature": {
          "description": "The next driver signature for the DVIR.",
          "type": "object",
          "properties": {
            "driverId": {
              "description": "ID of the driver who signed the DVIR",
              "type": "integer",
              "format": "int64",
              "example": 2581
            },
            "email": {
              "description": "Email of the  driver who signed the next DVIR on this vehicle.",
              "type": "string",
              "example": "j.smith@yahoo.com"
            },
            "name": {
              "description": "The name of the driver who signed the next DVIR on this vehicle.",
              "type": "string",
              "example": "John Smith"
            },
            "signedAt": {
              "description": "The time in millis when the next driver signed the DVIR on this vehicle.",
              "type": "integer",
              "format": "int64",
              "example": 12535500000
            },
            "type": {
              "description": "Type corresponds to driver.",
              "type": "string",
              "example": "driver"
            },
            "username": {
              "description": "Username of the  driver who signed the next DVIR on this vehicle.",
              "type": "string",
              "example": "jsmith"
            }
          }
        },
        "odometerMiles": {
          "description": "The odometer reading in miles for the vehicle when the DVIR was done.",
          "type": "integer",
          "format": "int64",
          "example": 49912
        },
        "startedAtMs": {
          "description": "Timestamp when driver began filling out this DVIR, in UNIX milliseconds.",
          "type": "integer",
          "format": "int64",
          "example": 1453449599999
        },
        "timeMs": {
          "description": "Timestamp of when this DVIR was signed \u0026 completed, in UNIX milliseconds.",
          "type": "integer",
          "format": "int64",
          "example": 1453449599999
        },
        "trailerDefects": {
          "description": "Defects registered for the trailer which was part of the DVIR.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "comment": {
                "description": "The comment describing the type of DVIR defect",
                "type": "string",
                "example": "Air Compressor not working"
              },
              "defectType": {
                "description": "The type of DVIR defect",
                "type": "string",
                "example": "Air Compressor"
              }
            }
          }
        },
        "trailerId": {
          "description": "The id of the trailer which was part of the DVIR.",
          "type": "integer",
          "example": 19
        },
        "trailerName": {
          "description": "The name of the trailer which was part of the DVIR.",
          "type": "string",
          "example": "Storer's Trailer 19"
        },
        "vehicle": {
          "description": "The vehicle on which DVIR was done.",
          "type": "object",
          "properties": {
            "id": {
              "description": "The vehicle id on which DVIR was done.",
              "type": "integer",
              "format": "int64",
              "example": 19
            },
            "name": {
              "description": "The vehicle on which DVIR was done.",
              "type": "string",
              "example": "Storer's vehicle 19"
            }
          }
        },
        "vehicleCondition": {
          "description": "The condition of vechile on which DVIR was done.",
          "type": "string",
          "example": "SATISFACTORY"
        },
        "vehicleDefects": {
          "description": "Defects registered for the vehicle which was part of the DVIR.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "comment": {
                "description": "The comment describing the type of DVIR defect",
                "type": "string",
                "example": "Air Compressor not working"
              },
              "defectType": {
                "description": "The type of DVIR defect",
                "type": "string",
                "example": "Air Compressor"
              }
            }
          }
        }
      }
    },
    "V1DvirListResponse": {
      "type": "object",
      "properties": {
        "dvirs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/V1DvirBase"
          }
        }
      }
    },
    "V1ErrorResponse": {
      "description": "Error message describing why the request failed.",
      "type": "string"
    },
    "V1FleetVehicleLocation": {
      "description": "Contains the location and speed of a vehicle at a particular time",
      "type": "object",
      "properties": {
        "latitude": {
          "description": "The latitude of the location in degrees.",
          "type": "number",
          "format": "double",
          "example": 37.2
        },
        "location": {
          "description": "The best effort (street,city,state) for the latitude and longitude.",
          "type": "string",
          "example": "525 York, San Francisco, CA"
        },
        "longitude": {
          "description": "The longitude of the location in degrees.",
          "type": "number",
          "format": "double",
          "example": -122.5
        },
        "speedMilesPerHour": {
          "description": "The speed calculated from GPS that the asset was traveling at in miles per hour.",
          "type": "number",
          "format": "double",
          "example": 35.2
        },
        "timeMs": {
          "description": "Time in Unix milliseconds since epoch when the asset was at the location.",
          "type": "number",
          "format": "int64",
          "example": 1535586471332
        }
      }
    },
    "V1FleetVehicleLocations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/V1FleetVehicleLocation"
      }
    },
    "V1FleetVehiclesLocations": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of the vehicle.",
            "type": "integer",
            "format": "int64",
            "example": 112
          },
          "locations": {
            "$ref": "#/definitions/V1FleetVehicleLocations"
          },
          "name": {
            "description": "Name of the vehicle.",
            "type": "string",
            "example": "Truck A7"
          }
        }
      }
    },
    "V1HosAuthenticationLogsResponse": {
      "type": "object",
      "properties": {
        "authenticationLogs": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "actionType": {
                "description": "The log type - one of 'signin' or 'signout'",
                "type": "string",
                "example": "signin"
              },
              "address": {
                "description": "DEPRECATED: THIS FIELD IS NOT POPULATED",
                "type": "string",
                "example": "THIS FIELD IS NOT USED"
              },
              "addressName": {
                "description": "DEPRECATED: THIS FIELD IS NOT POPULATED",
                "type": "string",
                "example": "THIS FIELD IS NOT USED"
              },
              "city": {
                "description": "DEPRECATED: THIS FIELD IS NOT POPULATED",
                "type": "string",
                "example": "THIS FIELD IS NOT USED"
              },
              "happenedAtMs": {
                "description": "The time at which the event was recorded in UNIX milliseconds.",
                "type": "integer",
                "format": "int64",
                "example": 1462881998034
              },
              "state": {
                "description": "DEPRECATED: THIS FIELD IS NOT POPULATED",
                "type": "string",
                "example": "THIS FIELD IS NOT USED"
              }
            }
          }
        }
      }
    },
    "V1HosLogsResponse": {
      "type": "object",
      "properties": {
        "logs": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "codriverIds": {
                "type": "array",
                "items": {
                  "description": "Ids of codrivers during any of the logged trips",
                  "type": "number",
                  "example": 445
                }
              },
              "driverId": {
                "description": "ID of the driver.",
                "type": "integer",
                "format": "int64",
                "example": 444
              },
              "groupId": {
                "description": "ID of the group.",
                "type": "integer",
                "format": "int64",
                "example": 101
              },
              "hosStatusType": {
                "description": "The Hours of Service status type. One of `OFF_DUTY`, `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`, `PERSONAL_CONVEYANCE`.",
                "type": "string",
                "example": "OFF_DUTY"
              },
              "locCity": {
                "description": "City in which the log was recorded.",
                "type": "string",
                "example": "Ahwatukee"
              },
              "locLat": {
                "description": "Latitude at which the log was recorded.",
                "type": "number",
                "format": "float",
                "example": 23.413702345
              },
              "locLng": {
                "description": "Longitude at which the log was recorded.",
                "type": "number",
                "format": "float",
                "example": -98.502888123
              },
              "locName": {
                "description": "Name of location at which the log was recorded.",
                "type": "string",
                "example": "McLean Site A"
              },
              "locState": {
                "description": "State in which the log was recorded.",
                "type": "string",
                "example": "Arizona"
              },
              "logStartMs": {
                "description": "The time at which the log/HOS status started in UNIX milliseconds.",
                "type": "integer",
                "format": "int64",
                "example": 1462881998034
              },
              "remark": {
                "description": "Remark associated with the log entry.",
                "type": "string",
                "example": "Lunch Break"
              },
              "vehicleId": {
                "description": "ID of the vehicle.",
                "type": "integer",
                "format": "int64",
                "example": 112
              }
            }
          }
        }
      }
    },
    "V1HosLogsSummaryResponse": {
      "type": "object",
      "properties": {
        "drivers": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "currentDutyStatusCode": {
                "description": "The Hours of Service status type.",
                "type": "string",
                "enum": [
                  "AUTO_DUTY",
                  "DRIVING",
                  "OFF_DUTY",
                  "ON_DUTY",
                  "PERSONAL_CONVEYANCE",
                  "SLEEPER_BED",
                  "YARD_MOVE",
                  "WAITING_TIME"
                ],
                "example": "OFF_DUTY"
              },
              "cycleRemaining": {
                "description": "The amount of remaining cycle time (in ms).",
                "type": "integer",
                "format": "int64",
                "example": 252000000
              },
              "cycleTomorrow": {
                "description": "The amount of cycle time (in ms) available tomorrow.",
                "type": "integer",
                "format": "int64",
                "example": 252000000
              },
              "driveMsToday": {
                "description": "The amount of driving time today (in ms).",
                "type": "number",
                "format": "int64",
                "example": 252000000
              },
              "driverId": {
                "description": "ID of the driver.",
                "type": "integer",
                "format": "int64",
                "example": 444
              },
              "driverName": {
                "description": "Name of the driver.",
                "type": "string",
                "example": "Fred Jacobs"
              },
              "drivingInViolationCycle": {
                "description": "The amount of driving time in violation in this cycle (in ms).",
                "type": "integer",
                "format": "int64",
                "example": 50400000
              },
              "drivingInViolationToday": {
                "description": "The amount of driving time in violation today (in ms).",
                "type": "integer",
                "format": "int64",
                "example": 39600000
              },
              "onDutyMsToday": {
                "description": "The amount of on duty time today (in ms).",
                "type": "number",
                "format": "int64",
                "example": 252000000
              },
              "pendingDriveMsToday": {
                "description": "The amount of driving time today for pending logs (in ms).",
                "type": "number",
                "format": "int64",
                "example": 252000000
              },
              "pendingOnDutyMsToday": {
                "description": "The amount of on duty time today for pending logs (in ms).",
                "type": "number",
                "format": "int64",
                "example": 252000000
              },
              "shiftDriveRemaining": {
                "description": "The amount of remaining shift drive time (in ms).",
                "type": "integer",
                "format": "int64",
                "example": 39600000
              },
              "shiftRemaining": {
                "description": "The amount of remaining shift time (in ms).",
                "type": "integer",
                "format": "int64",
                "example": 50400000
              },
              "timeInCurrentStatus": {
                "description": "The amount of time (in ms) that the driver has been in the current `dutyStatus`.",
                "type": "integer",
                "format": "int64",
                "example": 5000
              },
              "timeUntilBreak": {
                "description": "The amount of time (in ms) remaining until the driver cannot drive without a rest break.",
                "type": "integer",
                "format": "int64",
                "example": 28800000
              },
              "vehicleName": {
                "description": "Name of the vehicle.",
                "type": "string",
                "example": "Vehicle 1"
              }
            }
          }
        },
        "pagination": {
          "type": "object",
          "required": [
            "hasNextPage",
            "endCursor"
          ],
          "properties": {
            "endCursor": {
              "description": "Cursor identifier representing the last element in the response. This value should be used in conjunction with a subsequent request's 'after' query parameter.",
              "type": "string",
              "example": "MTA1MDc5MB=="
            },
            "hasNextPage": {
              "description": "True if there are more pages of results after this response.",
              "type": "boolean"
            }
          }
        }
      }
    },
    "V1HumidityResponse": {
      "description": "Contains the current humidity of a sensor.",
      "type": "object",
      "properties": {
        "groupId": {
          "type": "integer",
          "format": "int64",
          "example": 101
        },
        "sensors": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "humidity": {
                "description": "Currently reported relative humidity in percent, from 0-100.",
                "type": "integer",
                "example": 53
              },
              "humidityTime": {
                "description": "The timestamp of reported relative humidity, specified in RFC 3339 time.",
                "type": "string",
                "example": "2019-04-17T16:42:55Z"
              },
              "id": {
                "description": "ID of the sensor.",
                "type": "integer",
                "format": "int64",
                "example": 122
              },
              "name": {
                "description": "Name of the sensor.",
                "type": "string",
                "example": "Freezer Humidity V1Sensor"
              },
              "trailerId": {
                "description": "ID of the trailer associated with the sensor for the data point. If no trailer is connected, this parameter will not be reported.",
                "type": "integer",
                "example": 123
              },
              "vehicleId": {
                "description": "ID of the vehicle associated with the sensor for the data point. If no vehicle is connected, this parameter will not be reported.",
                "type": "integer",
                "example": 124
              }
            }
          }
        }
      }
    },
    "V1Machine": {
      "description": "Contains information about a machine.",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "ID of the machine.",
          "type": "integer",
          "format": "int64",
          "example": 123
        },
        "name": {
          "description": "Name of the machine.",
          "type": "string",
          "example": "Freezer ABC"
        },
        "notes": {
          "description": "Notes about the machine",
          "type": "string",
          "example": "This is in the left hallway behind the conveyor belt"
        }
      }
    },
    "V1MachineHistoryResponse": {
      "description": "Contains the results for a machine history request",
      "type": "object",
      "properties": {
        "machines": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "description": "Machine ID",
                "type": "integer",
                "example": 1
              },
              "name": {
                "description": "Machine name",
                "type": "string",
                "example": "1/3 HP Motor"
              },
              "vibrations": {
                "description": "List of vibration datapoints, with timestamp and vibration measurement for x/y/z axis in mm/s",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "X": {
                      "type": "number",
                      "format": "double",
                      "example": 0.01
                    },
                    "Y": {
                      "type": "number",
                      "format": "double",
                      "example": 1.23
                    },
                    "Z": {
                      "type": "number",
                      "format": "double",
                      "example": 2.55
                    },
                    "time": {
                      "type": "integer",
                      "format": "int64",
                      "example": 1453449599999
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "V1Message": {
      "type": "object",
      "required": [
        "driverId",
        "text"
      ],
      "properties": {
        "driverId": {
          "description": "ID of the driver for whom the message is sent to or sent by.",
          "type": "integer",
          "format": "int64",
          "example": 555
        },
        "text": {
          "description": "The text sent in the message.",
          "type": "string",
          "example": "This is a message."
        }
      }
    },
    "V1MessageResponse": {
      "type": "object",
      "required": [
        "driverId",
        "text",
        "sentAtMs",
        "sender",
        "isRead"
      ],
      "properties": {
        "driverId": {
          "description": "ID of the driver for whom the message is sent to or sent by.",
          "type": "integer",
          "format": "int64",
          "example": 555
        },
        "isRead": {
          "description": "True if the message was read by the recipient.",
          "type": "boolean",
          "example": true
        },
        "sender": {
          "$ref": "#/definitions/V1MessageSender"
        },
        "sentAtMs": {
          "description": "The time in Unix epoch milliseconds that the message is sent to the recipient.",
          "type": "integer",
          "format": "int64",
          "example": 1462881998034
        },
        "text": {
          "description": "The text sent in the message.",
          "type": "string",
          "example": "This is a message."
        }
      }
    },
    "V1MessageSender": {
      "type": "object",
      "required": [
        "type",
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of user that is sending the message.",
          "type": "string",
          "example": "John Doe"
        },
        "type": {
          "description": "Type of user that is sending the message. It will be either dispatch or driver.",
          "type": "string",
          "example": "dispatch"
        }
      }
    },
    "V1Messages": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/V1Message"
      }
    },
    "V1MessagesResponse": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/V1MessageResponse"
      }
    },
    "V1ProgramsForTheCameraResponse": {
      "description": "Contains the list of Programs configured on the given Camera.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "programId": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "programName": {
            "type": "string",
            "example": "Barcode verification program"
          }
        }
      }
    },
    "V1SafetyReportHarshEvent": {
      "description": "List of harsh events",
      "type": "object",
      "properties": {
        "harshEventType": {
          "description": "Type of the harsh event",
          "type": "string",
          "example": "Harsh Braking"
        },
        "timestampMs": {
          "description": "Timestamp that the harsh event occurred in Unix milliseconds since epoch",
          "type": "integer",
          "example": 1535590776000
        },
        "vehicleId": {
          "description": "Vehicle associated with the harsh event",
          "type": "integer",
          "example": 212014918086169
        }
      }
    },
    "V1Sensor": {
      "description": "Contains information about a sensor.",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "ID of the sensor.",
          "type": "integer",
          "format": "int64",
          "example": 123
        },
        "macAddress": {
          "description": "MAC address of the sensor.",
          "type": "string",
          "example": "11:11:11:11:11:11"
        },
        "name": {
          "description": "Name of the sensor.",
          "type": "string",
          "example": "Freezer ABC"
        }
      }
    },
    "V1SensorHistoryResponse": {
      "description": "Contains the results for a sensor history request. Each result contains a timestamp and datapoint for each requested (sensor, field) pair.",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "series": {
                "description": "List of datapoints, one for each requested (sensor, field) pair.",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64",
                  "example": 1
                }
              },
              "timeMs": {
                "description": "Timestamp in UNIX milliseconds.",
                "type": "integer",
                "example": 1453449599999
              }
            }
          }
        }
      }
    },
    "V1TemperatureResponse": {
      "description": "Contains the current temperatures of a sensor.",
      "type": "object",
      "properties": {
        "groupId": {
          "type": "integer",
          "format": "int64",
          "example": 101
        },
        "sensors": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "ambientTemperature": {
                "description": "Currently reported ambient temperature in millidegrees celsius.",
                "type": "integer",
                "example": 11057
              },
              "ambientTemperatureTime": {
                "description": "The timestamp of reported ambient temperature, specified in RFC 3339 time.",
                "type": "string",
                "example": "2019-04-17T16:42:55Z"
              },
              "id": {
                "description": "ID of the sensor.",
                "type": "integer",
                "format": "int64",
                "example": 122
              },
              "name": {
                "description": "Name of the sensor.",
                "type": "string",
                "example": "Freezer Temp V1Sensor"
              },
              "probeTemperature": {
                "description": "Currently reported probe temperature in millidegrees celsius. If no probe is connected, this parameter will not be reported.",
                "type": "integer",
                "example": -20145
              },
              "probeTemperatureTime": {
                "description": "The timestamp of reported probe temperature, specified in RFC 3339 time.",
                "type": "string",
                "example": "2019-04-17T16:42:55Z"
              },
              "trailerId": {
                "description": "ID of the trailer associated with the sensor for the data point. If no trailer is connected, this parameter will not be reported.",
                "type": "integer",
                "example": 123
              },
              "vehicleId": {
                "description": "ID of the vehicle associated with the sensor for the data point. If no vehicle is connected, this parameter will not be reported.",
                "type": "integer",
                "example": 124
              }
            }
          }
        }
      }
    },
    "V1TripResponse": {
      "description": "Contains the trips for the vehicle in the requested timeframe. A trip is represented as an object that contains startMs, startLocation, startAddress, startCoordinates, endMs, endLocation, endAddress and endCoordinates. Ongoing trips will be returned with 9223372036854775807 as their endMs.",
      "type": "object",
      "properties": {
        "trips": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "assetIds": {
                "description": "List of associated asset IDs",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                },
                "example": [
                  122
                ]
              },
              "codriverIds": {
                "description": "List of codriver IDs",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                },
                "example": [
                  122
                ]
              },
              "distanceMeters": {
                "description": "Length of the trip in meters.",
                "type": "integer",
                "example": 2500
              },
              "driverId": {
                "description": "ID of the driver.",
                "type": "integer",
                "example": 719
              },
              "endAddress": {
                "description": "Text representation of nearest identifiable location to the end (latitude, longitude) coordinates.",
                "type": "object",
                "properties": {
                  "address": {
                    "description": "The formatted address",
                    "type": "string",
                    "example": "123 Main St, Sunnyvale, CA 94089"
                  },
                  "id": {
                    "description": "The ID of the address",
                    "type": "number",
                    "format": "int64",
                    "example": 581
                  },
                  "name": {
                    "description": "The name of the address",
                    "type": "string",
                    "example": "Ramen Tatsunoya"
                  }
                }
              },
              "endCoordinates": {
                "description": "End (latitude, longitude) in decimal degrees.",
                "type": "object",
                "properties": {
                  "latitude": {
                    "type": "number",
                    "format": "double",
                    "example": 23.413702345
                  },
                  "longitude": {
                    "type": "number",
                    "format": "double",
                    "example": -91.502888123
                  }
                }
              },
              "endLocation": {
                "description": "Geocoded street address of start (latitude, longitude) coordinates.",
                "type": "string",
                "example": "571 S Lake Ave, Pasadena, CA 91101"
              },
              "endMs": {
                "description": "End of the trip in UNIX milliseconds. Ongoing trips are indicated by an endMs value of 9223372036854775807.",
                "type": "integer",
                "example": 1462881998034
              },
              "endOdometer": {
                "description": "Odometer reading (in meters) at the end of the trip.",
                "type": "integer",
                "example": 210430500
              },
              "fuelConsumedMl": {
                "description": "Amount in milliliters of fuel consumed on this trip.",
                "type": "integer",
                "example": 75700
              },
              "startAddress": {
                "description": "Text representation of nearest identifiable location to the start (latitude, longitude) coordinates.",
                "type": "object",
                "properties": {
                  "address": {
                    "description": "The formatted address",
                    "type": "string",
                    "example": "123 Main St, Sunnyvale, CA 94089"
                  },
                  "id": {
                    "description": "The ID of the address",
                    "type": "number",
                    "format": "int64",
                    "example": 581
                  },
                  "name": {
                    "description": "The name of the address",
                    "type": "string",
                    "example": "Ramen Tatsunoya"
                  }
                }
              },
              "startCoordinates": {
                "description": "Start (latitude, longitude) in decimal degrees.",
                "type": "object",
                "properties": {
                  "latitude": {
                    "type": "number",
                    "format": "double",
                    "example": 29.443702345
                  },
                  "longitude": {
                    "type": "number",
                    "format": "double",
                    "example": -98.502888123
                  }
                }
              },
              "startLocation": {
                "description": "Geocoded street address of start (latitude, longitude) coordinates.",
                "type": "string",
                "example": "16 N Fair Oaks Ave, Pasadena, CA 91103"
              },
              "startMs": {
                "description": "Beginning of the trip in UNIX milliseconds.",
                "type": "integer",
                "example": 1462878398034
              },
              "startOdometer": {
                "description": "Odometer reading (in meters) at the beginning of the trip.",
                "type": "integer",
                "example": 210430450
              },
              "tollMeters": {
                "description": "Length in meters trip spent on toll roads.",
                "type": "integer",
                "example": 32000
              }
            }
          }
        }
      }
    },
    "V1VehicleHarshEventResponse": {
      "description": "Harsh event details for a vehicle",
      "type": "object",
      "required": [
        "incidentReportUrl",
        "harshEventType"
      ],
      "properties": {
        "downloadForwardVideoUrl": {
          "description": "URL for downloading the forward facing video",
          "type": "string",
          "example": "https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-123456789.mp4?..."
        },
        "downloadInwardVideoUrl": {
          "description": "URL for downloading the inward facing video",
          "type": "string",
          "example": "https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-driver-123456789.mp4?..."
        },
        "downloadTrackedInwardVideoUrl": {
          "description": "URL for downloading the tracked inward facing video",
          "type": "string",
          "example": "https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-driver-123456789.tracked.mp4?..."
        },
        "harshEventType": {
          "description": "Type of the harsh event. One of: [Crash, Harsh Acceleration, Harsh Braking, Harsh Turn, ROP Engine, ROP Brake, YC Engine, YC Brake, Harsh Event]",
          "type": "string",
          "example": "Harsh Braking"
        },
        "incidentReportUrl": {
          "description": "URL of the associated incident report page",
          "type": "string",
          "example": "https://cloud.samsara.com/groups/1234/fleet/reports/safety/vehicle/212123456789012/incident/1539201882984"
        },
        "isDistracted": {
          "description": "Whether the driver was deemed distracted during this harsh event",
          "type": "boolean",
          "example": true
        },
        "location": {
          "type": "object",
          "properties": {
            "address": {
              "description": "Address of location where the harsh event occurred",
              "type": "string",
              "example": "350 Rhode Island St, San Francisco, CA"
            },
            "latitude": {
              "description": "Latitude of location where the harsh event occurred",
              "type": "string",
              "example": "33.07614328"
            },
            "longitude": {
              "description": "Longitude of location where the harsh event occurred",
              "type": "string",
              "example": "-96.14907287"
            }
          }
        }
      }
    },
    "V1VehicleLocation": {
      "description": "Contains the location, in latitude and longitude, of a vehicle.",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "driverId": {
          "description": "The ID of the driver currently assigned to this vehicle.",
          "type": "integer",
          "example": 1
        },
        "heading": {
          "description": "Heading in degrees.",
          "type": "number",
          "format": "double",
          "example": 246.42
        },
        "id": {
          "description": "ID of the vehicle.",
          "type": "integer",
          "format": "int64",
          "example": 112
        },
        "latitude": {
          "description": "Latitude in decimal degrees.",
          "type": "number",
          "format": "double",
          "example": 123.456
        },
        "location": {
          "description": "Text representation of nearest identifiable location to (latitude, longitude) coordinates.",
          "type": "string",
          "example": "1 Main St, Dallas, TX"
        },
        "longitude": {
          "description": "Longitude in decimal degrees.",
          "type": "number",
          "format": "double",
          "example": 32.897
        },
        "name": {
          "description": "Name of the vehicle.",
          "type": "string",
          "example": "Truck A7"
        },
        "odometerMeters": {
          "description": "The number of meters reported by the odometer.",
          "type": "integer",
          "format": "int64",
          "example": 71774705
        },
        "odometerType": {
          "description": "The source of data for odometerMeters. Will be either GPS or OBD",
          "type": "string",
          "enum": [
            "GPS",
            "OBD"
          ],
          "example": "GPS"
        },
        "onTrip": {
          "description": "Whether or not a trip is currently in progress for this vehicle. More information available via /fleet/trips endpoint.",
          "type": "boolean",
          "example": true
        },
        "routeIds": {
          "description": "A list of currently active route IDs that the vehicle is in.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "example": [
            2244514,
            2311654
          ]
        },
        "speed": {
          "description": "Speed in miles per hour.",
          "type": "number",
          "format": "double",
          "example": 64.37
        },
        "time": {
          "description": "The time the reported location was logged, reported as a UNIX timestamp in milliseconds.",
          "type": "integer",
          "example": 1462881998034
        },
        "vin": {
          "description": "Vehicle Identification Number (VIN) of the vehicle.",
          "type": "string",
          "example": "JTNBB46KX73011966"
        }
      }
    },
    "V1VehicleMaintenance": {
      "description": "Contains any J1939/Passenger engine light warnings and engine faults.",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "ID of the vehicle.",
          "type": "integer",
          "format": "int64",
          "example": 112
        },
        "j1939": {
          "description": "J1939 based data. Null if no data is available.",
          "type": "object",
          "properties": {
            "checkEngineLight": {
              "description": "J1939 check engine lights.",
              "type": "object",
              "properties": {
                "emissionsIsOn": {
                  "type": "boolean"
                },
                "protectIsOn": {
                  "type": "boolean"
                },
                "stopIsOn": {
                  "type": "boolean"
                },
                "warningIsOn": {
                  "type": "boolean"
                }
              }
            },
            "diagnosticTroubleCodes": {
              "description": "J1939 DTCs.",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "fmiId",
                  "fmiText",
                  "occurrenceCount",
                  "spnDescription",
                  "spnId",
                  "txId"
                ],
                "properties": {
                  "fmiId": {
                    "type": "integer"
                  },
                  "fmiText": {
                    "type": "string"
                  },
                  "occurrenceCount": {
                    "type": "integer"
                  },
                  "spnDescription": {
                    "type": "string"
                  },
                  "spnId": {
                    "type": "integer"
                  },
                  "txId": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "passenger": {
          "description": "Passenger vehicle data. Null if no data is available.",
          "type": "object",
          "properties": {
            "checkEngineLight": {
              "description": "Passenger vehicle check engine light.",
              "type": "object",
              "properties": {
                "isOn": {
                  "type": "boolean"
                }
              }
            },
            "diagnosticTroubleCodes": {
              "description": "Passenger vehicle DTCs.",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "dtcId",
                  "dtcDescription",
                  "dtcShortCode"
                ],
                "properties": {
                  "dtcDescription": {
                    "type": "string"
                  },
                  "dtcId": {
                    "type": "integer"
                  },
                  "dtcShortCode": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "V1VehicleSafetyScoreResponse": {
      "description": "Safety score details for a vehicle",
      "type": "object",
      "properties": {
        "crashCount": {
          "description": "Crash event count",
          "type": "integer",
          "example": 0
        },
        "harshAccelCount": {
          "description": "Harsh acceleration event count",
          "type": "integer",
          "example": 1
        },
        "harshBrakingCount": {
          "description": "Harsh braking event count",
          "type": "integer",
          "example": 2
        },
        "harshEvents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/V1SafetyReportHarshEvent"
          }
        },
        "harshTurningCount": {
          "description": "Harsh turning event count",
          "type": "integer",
          "example": 0
        },
        "safetyScore": {
          "description": "Safety Score",
          "type": "integer",
          "example": 97
        },
        "safetyScoreRank": {
          "description": "Safety Score Rank",
          "type": "string",
          "example": "26"
        },
        "timeOverSpeedLimitMs": {
          "description": "Amount of time driven over the speed limit in milliseconds",
          "type": "integer",
          "example": 3769
        },
        "totalDistanceDrivenMeters": {
          "description": "Total distance driven in meters",
          "type": "integer",
          "example": 291836
        },
        "totalHarshEventCount": {
          "description": "Total harsh event count",
          "type": "integer",
          "example": 3
        },
        "totalTimeDrivenMs": {
          "description": "Amount of time driven in milliseconds",
          "type": "integer",
          "example": 19708293
        },
        "vehicleId": {
          "description": "Vehicle ID",
          "type": "integer",
          "example": 4321
        }
      }
    },
    "V1VisionCamerasResponse": {
      "description": "Contains the list of Cameras installed in the org.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "cameraId": {
            "type": "integer",
            "format": "int64",
            "example": 1234512345999
          },
          "cameraName": {
            "type": "string",
            "example": "Line 32"
          },
          "ethernetIp": {
            "type": "string",
            "example": "10.1.2.34"
          },
          "wifiIp": {
            "type": "string",
            "example": "10.1.2.35"
          }
        }
      }
    },
    "V1VisionRunByCameraResponse": {
      "type": "object",
      "properties": {
        "cameraId": {
          "type": "integer",
          "format": "int64",
          "example": 1234512345123
        },
        "endedAtMs": {
          "type": "integer",
          "format": "int64",
          "example": 0
        },
        "inspectionResults": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "captureAtMs": {
                "type": "number",
                "format": "float64",
                "example": 1553811994730
              },
              "result": {
                "type": "string",
                "example": "PASS"
              },
              "stepResults": {
                "$ref": "#/definitions/V1VisionStepResults"
              }
            }
          }
        },
        "isOngoing": {
          "type": "boolean",
          "example": true
        },
        "program": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "name": {
              "type": "string",
              "example": "Barcode verification program"
            }
          }
        },
        "runSummary": {
          "type": "object",
          "properties": {
            "itemsPerMinute": {
              "type": "number",
              "format": "float64",
              "example": 0.1
            },
            "noReadCount": {
              "type": "integer",
              "format": "int64",
              "example": 0
            },
            "rejectCount": {
              "type": "integer",
              "format": "int64",
              "example": 0
            },
            "successCount": {
              "type": "integer",
              "format": "int64",
              "example": 181
            }
          }
        },
        "startedAtMs": {
          "type": "integer",
          "format": "int64",
          "example": 1553808606097
        }
      }
    },
    "V1VisionRunsByCameraAndProgramResponse": {
      "type": "object",
      "properties": {
        "deviceId": {
          "type": "integer",
          "format": "int64",
          "example": 1234512345123
        },
        "endedAtMs": {
          "type": "integer",
          "format": "int64",
          "example": 0
        },
        "programId": {
          "type": "integer",
          "format": "int64",
          "example": 1
        },
        "reportMetadata": {
          "type": "object",
          "properties": {
            "itemsPerMinute": {
              "type": "number",
              "format": "float64",
              "example": 0.1
            },
            "noReadCount": {
              "type": "integer",
              "format": "int64",
              "example": 0
            },
            "rejectCount": {
              "type": "integer",
              "format": "int64",
              "example": 0
            },
            "successCount": {
              "type": "integer",
              "format": "int64",
              "example": 181
            }
          }
        },
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "captureAtMs": {
                "type": "number",
                "format": "float64",
                "example": 1553811994730
              },
              "result": {
                "type": "string",
                "example": "PASS"
              },
              "stepResults": {
                "$ref": "#/definitions/V1VisionStepResults"
              }
            }
          }
        },
        "startedAtMs": {
          "type": "integer",
          "format": "int64",
          "example": 1553808606097
        }
      }
    },
    "V1VisionRunsByCameraResponse": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "deviceId": {
            "type": "integer",
            "format": "int64",
            "example": 1234512345123
          },
          "endedAtMs": {
            "type": "integer",
            "format": "int64",
            "example": 0
          },
          "program": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "example": 1
              },
              "name": {
                "type": "string",
                "example": "Barcode verification program"
              }
            }
          },
          "reportMetadata": {
            "type": "object",
            "properties": {
              "itemsPerMinute": {
                "type": "number",
                "format": "float64",
                "example": 0.1
              },
              "noReadCount": {
                "type": "integer",
                "format": "int64",
                "example": 0
              },
              "rejectCount": {
                "type": "integer",
                "format": "int64",
                "example": 0
              },
              "successCount": {
                "type": "integer",
                "format": "int64",
                "example": 181
              }
            }
          },
          "startedAtMs": {
            "type": "integer",
            "format": "int64",
            "example": 1553808606097
          }
        }
      }
    },
    "V1VisionRunsResponse": {
      "type": "object",
      "properties": {
        "visionRuns": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "deviceId": {
                "type": "integer",
                "format": "int64",
                "example": 1234512345123
              },
              "endedAtMs": {
                "type": "integer",
                "format": "int64",
                "example": 0
              },
              "programId": {
                "type": "integer",
                "format": "int64",
                "example": 1
              },
              "reportMetadata": {
                "description": "The response includes 4 additional fields that are now deprecated",
                "type": "object",
                "properties": {
                  "itemsPerMinute": {
                    "description": "Returns average scanned items per minute. Should be used instead of scanRate.",
                    "type": "number",
                    "format": "float64",
                    "example": 0.1
                  },
                  "noReadCount": {
                    "description": "Returns no read count for the run. Should be used instead of noReadScansCount",
                    "type": "integer",
                    "format": "int64",
                    "example": 181
                  },
                  "rejectCount": {
                    "description": "Returns reject count for the run. Should be used instead of failedScansCount",
                    "type": "integer",
                    "format": "int64",
                    "example": 0
                  },
                  "successCount": {
                    "description": "Returns success count for the run. Should be used instead of successfulScansCount",
                    "type": "integer",
                    "format": "int64",
                    "example": 181
                  }
                }
              },
              "startedAtMs": {
                "type": "integer",
                "format": "int64",
                "example": 1553808606097
              }
            }
          }
        }
      }
    },
    "V1VisionStepResults": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "angleCheck": {
            "type": "object",
            "properties": {
              "angleConfigured": {
                "description": "The configured angle allowance range (in degrees)",
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int64",
                    "example": 150
                  },
                  "low": {
                    "type": "integer",
                    "format": "int64",
                    "example": 90
                  }
                }
              },
              "angleFound": {
                "description": "The counter-clockwise angle detected from the first edge to the second edge",
                "type": "integer",
                "format": "int64",
                "example": 60
              },
              "endStepName": {
                "description": "The name of the second reference step used to check the angle",
                "type": "string",
                "example": "Edge 2"
              },
              "startStepName": {
                "description": "The name of the first reference step used to check the angle",
                "type": "string",
                "example": "Edge 1"
              }
            }
          },
          "barcode": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "contents": {
                  "type": "string",
                  "example": "10855639004823"
                },
                "matchString": {
                  "type": "string",
                  "example": "10855639004823"
                },
                "type": {
                  "type": "string",
                  "example": "EAN8"
                }
              }
            }
          },
          "booleanLogic": {
            "type": "object",
            "properties": {
              "operator": {
                "type": "string",
                "example": "AND"
              },
              "steps": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Expiration Date"
                    },
                    "result": {
                      "type": "string",
                      "example": "PASS"
                    }
                  }
                }
              }
            }
          },
          "caliper": {
            "type": "object",
            "properties": {
              "angleRange": {
                "description": "The configured angle allowance range",
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int32",
                    "example": 360
                  },
                  "low": {
                    "type": "integer",
                    "format": "int32",
                    "example": 0
                  }
                }
              },
              "contrastRange": {
                "description": "The configured contrast allowance range",
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int64",
                    "example": 100
                  },
                  "low": {
                    "type": "integer",
                    "format": "int64",
                    "example": 50
                  }
                }
              },
              "distanceFound": {
                "description": "The distance found between the found edges",
                "type": "number",
                "format": "float",
                "example": 555.55
              },
              "filterPolarity": {
                "description": "The configured polarity for finding edges",
                "type": "string",
                "default": "LIGHT TO DARK",
                "enum": [
                  "LIGHT TO DARK",
                  "DARK TO LIGHT"
                ],
                "example": "LIGHT TO DARK"
              },
              "maxDistance": {
                "description": "The maximum allowed distance threshold",
                "type": "number",
                "format": "float",
                "example": 1000
              },
              "minDistance": {
                "description": "The minumum allowed distance threshold",
                "type": "number",
                "format": "float",
                "example": 500
              },
              "sharpnessRange": {
                "description": "The configured sharpness allowance range",
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int64",
                    "example": 100
                  },
                  "low": {
                    "type": "integer",
                    "format": "int64",
                    "example": 80
                  }
                }
              },
              "straightnessRange": {
                "description": "The configured straightness allowance range",
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int32",
                    "example": 100
                  },
                  "low": {
                    "type": "integer",
                    "format": "int32",
                    "example": 80
                  }
                }
              },
              "unit": {
                "description": "The measurement unit of the distance found and the min and max distance threshold",
                "type": "string",
                "example": "Millimeters"
              }
            }
          },
          "contour": {
            "type": "object",
            "properties": {
              "angleDegrees": {
                "description": "The rotation angle found",
                "type": "integer",
                "format": "int64",
                "example": 0
              },
              "angleTolerance": {
                "description": "The rotation angle allowance",
                "type": "integer",
                "format": "int64",
                "example": 50
              },
              "matchPercentage": {
                "description": "The contour match percentage with the configured contour",
                "type": "integer",
                "format": "int64",
                "example": 46
              },
              "matchThreshold": {
                "description": "The configured match threshold for contours",
                "type": "integer",
                "format": "int64",
                "example": 18
              }
            }
          },
          "distance": {
            "type": "object",
            "properties": {
              "distanceFound": {
                "description": "The distance found between the start and end references",
                "type": "integer",
                "format": "float64",
                "example": 1000.22
              },
              "endStepName": {
                "description": "The name of the second reference step that we're checking the distances between",
                "type": "string",
                "example": "Bottom Right Square"
              },
              "enforceOffsetAngleRange": {
                "description": "Whether an offset angle range is enforced",
                "type": "boolean",
                "example": true
              },
              "maxDistance": {
                "description": "The maximum allowed distance threshold",
                "type": "integer",
                "format": "float64",
                "example": 900
              },
              "maxOffsetAngle": {
                "description": "The maximum angle allowance (in degrees) if enforceOffsetAngleRange is true",
                "type": "integer",
                "format": "int64",
                "example": 90
              },
              "minDistance": {
                "description": "The minumum allowed distance threshold",
                "type": "integer",
                "format": "float64",
                "example": 1500
              },
              "minOffsetAngle": {
                "description": "The minimum angle allowance (in degrees) if enforceOffsetAngleRange is true",
                "type": "integer",
                "format": "int64",
                "example": 45
              },
              "offsetAngleFound": {
                "description": "The counter-clockwise angle (in degrees) found between the horizontal axis of the start reference step and the last",
                "type": "integer",
                "format": "int64",
                "example": 50
              },
              "startStepName": {
                "description": "The name of the first reference step that we're checking the distances between",
                "type": "string",
                "example": "Top Left Square"
              },
              "unit": {
                "description": "The measurement unit of the distance found and the min and max distance threshold",
                "type": "string",
                "example": "Millimeters"
              }
            }
          },
          "expirationDate": {
            "type": "object",
            "properties": {
              "dateOffset": {
                "type": "integer",
                "format": "int64",
                "example": 1
              },
              "foundDate": {
                "type": "string",
                "example": "06/13/2019"
              },
              "matchDate": {
                "type": "string",
                "example": "06/13/2019"
              }
            }
          },
          "findCopies": {
            "type": "object",
            "properties": {
              "angleTolerance": {
                "description": "The orientation angle tolerance (+/- °)",
                "type": "integer",
                "format": "int64",
                "example": 10
              },
              "foundCount": {
                "description": "The number of copies found",
                "type": "integer",
                "format": "int64",
                "example": 1
              },
              "maxCount": {
                "description": "The maximum number of copies allowed",
                "type": "integer",
                "format": "int64",
                "example": 5
              },
              "minCount": {
                "description": "The minimum number of copies allowed",
                "type": "integer",
                "format": "int64",
                "example": 1
              },
              "threshold": {
                "description": "The minimum required similarity (in %) of a found copy compared to the configured match region",
                "type": "integer",
                "format": "int64",
                "example": 70
              }
            }
          },
          "findEdge": {
            "type": "object",
            "properties": {
              "angleFound": {
                "description": "The detected angle in degrees",
                "type": "integer",
                "format": "float64",
                "example": 90
              },
              "angleRange": {
                "description": "The configured angle allowance range",
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int32",
                    "example": 360
                  },
                  "low": {
                    "type": "integer",
                    "format": "int32",
                    "example": 0
                  }
                }
              },
              "contrastPercent": {
                "description": "The detected contrast percentage",
                "type": "integer",
                "format": "float64",
                "example": 72.8
              },
              "contrastRange": {
                "description": "The configured contrast allowance range",
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int64",
                    "example": 100
                  },
                  "low": {
                    "type": "integer",
                    "format": "int64",
                    "example": 50
                  }
                }
              },
              "filterPolarity": {
                "description": "The configured polarity for finding edges",
                "type": "string",
                "example": "ANY"
              },
              "sharpnessPercent": {
                "description": "The detected sharpness percentage",
                "type": "integer",
                "format": "float64",
                "example": 95
              },
              "sharpnessRange": {
                "description": "The configured sharpness allowance range",
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int64",
                    "example": 100
                  },
                  "low": {
                    "type": "integer",
                    "format": "int64",
                    "example": 80
                  }
                }
              },
              "straightnessFound": {
                "description": "The detected straightness percentage",
                "type": "integer",
                "format": "float64",
                "example": 95
              },
              "straightnessRange": {
                "description": "The configured straightness allowance range",
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int32",
                    "example": 100
                  },
                  "low": {
                    "type": "integer",
                    "format": "int32",
                    "example": 80
                  }
                }
              }
            }
          },
          "findShapes": {
            "type": "object",
            "properties": {
              "foundCount": {
                "type": "integer",
                "format": "int32",
                "example": 1
              },
              "maxCount": {
                "type": "integer",
                "format": "int32",
                "example": 5
              },
              "minCount": {
                "type": "integer",
                "format": "int32",
                "example": 1
              }
            }
          },
          "fixture": {
            "type": "object",
            "properties": {
              "coordinates": {
                "type": "object",
                "properties": {
                  "x": {
                    "type": "integer",
                    "format": "int32",
                    "example": 10
                  },
                  "y": {
                    "type": "integer",
                    "format": "int32",
                    "example": 10
                  }
                }
              },
              "found": {
                "type": "boolean",
                "example": true
              },
              "rotationDegrees": {
                "type": "integer",
                "format": "int64",
                "example": 90
              }
            }
          },
          "labelMatch": {
            "type": "object",
            "properties": {
              "score": {
                "type": "integer",
                "format": "int64",
                "example": 10
              },
              "threshold": {
                "type": "integer",
                "format": "int64",
                "example": 10
              }
            }
          },
          "name": {
            "type": "string",
            "example": "Chicken Caesar Label"
          },
          "presenceAbsence": {
            "type": "object",
            "properties": {
              "blueRange": {
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int64",
                    "example": 150
                  },
                  "low": {
                    "type": "integer",
                    "format": "int64",
                    "example": 90
                  }
                }
              },
              "checkForAbsence": {
                "type": "boolean",
                "example": true
              },
              "grayscaleRange": {
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int64",
                    "example": 100
                  },
                  "low": {
                    "type": "integer",
                    "format": "int64",
                    "example": 20
                  }
                }
              },
              "greenRange": {
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int64",
                    "example": 150
                  },
                  "low": {
                    "type": "integer",
                    "format": "int64",
                    "example": 90
                  }
                }
              },
              "hueRange": {
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int64",
                    "example": 100
                  },
                  "low": {
                    "type": "integer",
                    "format": "int64",
                    "example": 20
                  }
                }
              },
              "redRange": {
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int64",
                    "example": 150
                  },
                  "low": {
                    "type": "integer",
                    "format": "int64",
                    "example": 90
                  }
                }
              },
              "saturationRange": {
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int64",
                    "example": 50
                  },
                  "low": {
                    "type": "integer",
                    "format": "int64",
                    "example": 10
                  }
                }
              },
              "score": {
                "type": "integer",
                "format": "int64",
                "example": 50
              },
              "threshold": {
                "type": "integer",
                "format": "int64",
                "example": 50
              },
              "valueRange": {
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int64",
                    "example": 50
                  },
                  "low": {
                    "type": "integer",
                    "format": "int64",
                    "example": 10
                  }
                }
              }
            }
          },
          "result": {
            "type": "string",
            "example": "PASS"
          },
          "textMatch": {
            "type": "object",
            "properties": {
              "foundText": {
                "type": "string",
                "example": "TFNJ"
              },
              "matchString": {
                "type": "string",
                "example": "TFNJ"
              }
            }
          }
        }
      }
    },
    "V1allRouteJobUpdates": {
      "type": "object",
      "properties": {
        "job_updates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/V1jobUpdateObject"
          }
        },
        "sequence_id": {
          "description": "Sequence ID of the last update returned in the response",
          "type": "string",
          "example": "eyJpZCI6MywiY3JlYXRlZF9hdCI6MTQ5OTQyOTIyMDAwMn0="
        }
      }
    },
    "V1jobStatus": {
      "description": "The current state of the dispatch job.",
      "type": "string",
      "enum": [
        "JobState_Unassigned",
        "JobState_Scheduled",
        "JobState_EnRoute",
        "JobState_Arrived",
        "JobState_Completed",
        "JobState_Skipped"
      ],
      "example": "JobState_Arrived"
    },
    "V1jobUpdateObject": {
      "type": "object",
      "properties": {
        "changed_at_ms": {
          "description": "Timestamp that this event was updated, represented as Unix milliseconds since epoch.",
          "type": "integer",
          "format": "int64",
          "example": 1462881998034
        },
        "job_id": {
          "description": "ID of the Samsara job.",
          "type": "integer",
          "format": "int64",
          "example": 773
        },
        "job_state": {
          "$ref": "#/definitions/V1jobStatus"
        },
        "prev_job_state": {
          "$ref": "#/definitions/V1prevJobStatus"
        },
        "route": {
          "$ref": "#/definitions/V1DispatchRoute"
        },
        "route_id": {
          "description": "ID of the Samsara dispatch route.",
          "type": "integer",
          "format": "int64",
          "example": 556
        }
      }
    },
    "V1prevJobStatus": {
      "description": "The previous state of the dispatch job.",
      "type": "string",
      "enum": [
        "JobState_Unassigned",
        "JobState_Scheduled",
        "JobState_EnRoute",
        "JobState_Arrived",
        "JobState_Completed",
        "JobState_Skipped"
      ],
      "example": "JobState_EnRoute"
    },
    "VehicleEngineStates": {
      "description": "Stat point for the state of the engine.",
      "type": "object",
      "properties": {
        "time": {
          "description": "UTC timestamp of the time the data point was generated by the object stat, in RFC3339 format.",
          "type": "string",
          "example": "2019-05-03T04:30:31.492Z"
        },
        "value": {
          "description": "Engine state of the vehicle as read by the vehicle gateway.",
          "type": "string",
          "enum": [
            "Off",
            "On",
            "Idle"
          ],
          "example": "On"
        }
      }
    },
    "VehicleFuelPercents": {
      "description": "Stat point for the fuel percent of the vehicle.",
      "type": "object",
      "properties": {
        "time": {
          "description": "UTC timestamp of the time the data point was generated by the object stat, in RFC3339 format.",
          "type": "string",
          "example": "2019-05-03T04:30:31.492Z"
        },
        "value": {
          "description": "Percent of fuel in the vehicle as read by the vehicle gateway.",
          "type": "integer",
          "example": "54"
        }
      }
    },
    "VehicleListResponse": {
      "description": "Response for retreiving a list of vehicles.",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VehicleResponse"
          }
        },
        "pagination": {
          "$ref": "#/definitions/paginationResponse"
        }
      }
    },
    "VehicleLocation": {
      "description": "Location object with heading \u0026 speed",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/location"
        },
        {
          "type": "object",
          "properties": {
            "heading": {
              "description": "Heading of the vehicle in degrees.",
              "type": "number",
              "format": "double",
              "example": 120
            },
            "speed": {
              "description": "Speed of the vehicle in miles per hour.",
              "type": "number",
              "format": "double",
              "example": 48.3
            }
          }
        }
      ]
    },
    "VehicleLocationWrapper": {
      "description": "Location for a given vehicle.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/vehicleTinyResponse"
        },
        {
          "type": "object",
          "properties": {
            "location": {
              "type": "object",
              "$ref": "#/definitions/LocationsWrapper"
            }
          }
        }
      ]
    },
    "VehicleLocationsListResponse": {
      "description": "List of vehicle locations for the specified time period.",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VehicleLocationsWrapper"
          }
        },
        "pagination": {
          "$ref": "#/definitions/timeseriesPaginationResponse"
        }
      }
    },
    "VehicleLocationsSnapshotResponse": {
      "description": "List of vehicles with location.",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VehicleLocationWrapper"
          }
        },
        "pagination": {
          "$ref": "#/definitions/timeseriesPaginationResponse"
        }
      }
    },
    "VehicleLocationsWrapper": {
      "description": "List of vehicle locations for the specified time period.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/vehicleTinyResponse"
        },
        {
          "type": "object",
          "properties": {
            "locations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LocationsWrapper"
              }
            }
          }
        }
      ]
    },
    "VehiclePatch": {
      "description": "All the editable portions of the vehicle object.",
      "type": "object",
      "properties": {
        "auxInputType1": {
          "description": "The type of aux input that this vehicle has connected to port 1. Setting to \"none\" will remove the configured aux input.",
          "type": "string",
          "enum": [
            "none",
            "emergencyLights",
            "emergencyAlarm",
            "stopPaddle",
            "powerTakeOff",
            "plow",
            "sweeper",
            "salter",
            "reefer",
            "door",
            "boom",
            "auxiliaryEngine",
            "generator",
            "eightWayLights"
          ],
          "example": "boom"
        },
        "auxInputType2": {
          "description": "The type of aux input that this vehicle has connected to port 2. Setting to \"none\" will remove the configured aux input.",
          "type": "string",
          "enum": [
            "none",
            "emergencyLights",
            "emergencyAlarm",
            "stopPaddle",
            "powerTakeOff",
            "plow",
            "sweeper",
            "salter",
            "reefer",
            "door",
            "boom",
            "auxiliaryEngine",
            "generator",
            "eightWayLights"
          ],
          "example": "plow"
        },
        "engineHours": {
          "description": "Current engine hours value of the vehicle. This is typically pulled automatically from the vehicle, but can be manually overridden when it's not read automatically.",
          "type": "integer",
          "example": 10943
        },
        "externalIds": {
          "description": "Dictionary of external IDs (key-value string pairs). Setting a value to \"\" will delete that external ID.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "maintenanceId": "98KJ81F"
          }
        },
        "harshAccelerationSettingType": {
          "description": "Enumeration of the harsh acceleration setting types. This setting influences the accelereation sensitivity from which a harsh event is triggered. If set to `off`, then no acceleration based harsh events are triggered for the vehicle.",
          "type": "string",
          "enum": [
            "passengerCar",
            "lightTruck",
            "heavyDuty",
            "off",
            "automatic"
          ],
          "example": "off"
        },
        "licensePlate": {
          "description": "License plate number for the vehicle.",
          "type": "string",
          "maxLength": 12,
          "example": "8KDB021"
        },
        "name": {
          "description": "Name of the vehicle.",
          "type": "string",
          "example": "Truck A7"
        },
        "notes": {
          "description": "Notes about a vehicle with a maximum of 255 characters.",
          "type": "string",
          "maxLength": 255,
          "example": "These are notes about this given vehicle."
        },
        "odometerMeters": {
          "description": "Current odometer value of the vehicle. This is typically pulled automatically from the vehicle, but can be manually overridden when it's not read automatically.",
          "type": "integer",
          "example": 9182
        },
        "staticAssignedDriverId": {
          "description": "ID of driver assigned to the vehicle for static vehicle assignments. (uncommon).",
          "type": "string",
          "example": "8921"
        },
        "tagIds": {
          "description": "An array of IDs of tags to associate with this vehicle.",
          "type": "array",
          "items": {
            "type": "string",
            "example": "321"
          }
        },
        "vin": {
          "description": "A vehicle identification number.",
          "type": "string",
          "maxLength": 17,
          "example": "1FUJA6BD31LJ09646"
        }
      }
    },
    "VehicleResponse": {
      "description": "The vehicle object.",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "auxInputType1": {
          "description": "The type of aux input that this vehicle has connected to port 1. Setting to \"none\" will remove the configured aux input.",
          "type": "string",
          "enum": [
            "none",
            "emergencyLights",
            "emergencyAlarm",
            "stopPaddle",
            "powerTakeOff",
            "plow",
            "sweeper",
            "salter",
            "reefer",
            "door",
            "boom",
            "auxiliaryEngine",
            "generator",
            "eightWayLights"
          ],
          "example": "boom"
        },
        "auxInputType2": {
          "description": "The type of aux input that this vehicle has connected to port 2. Setting to \"none\" will remove the configured aux input.",
          "type": "string",
          "enum": [
            "none",
            "emergencyLights",
            "emergencyAlarm",
            "stopPaddle",
            "powerTakeOff",
            "plow",
            "sweeper",
            "salter",
            "reefer",
            "door",
            "boom",
            "auxiliaryEngine",
            "generator",
            "eightWayLights"
          ],
          "example": "plow"
        },
        "externalIds": {
          "description": "Dictionary of external IDs (key-value string pairs).",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "maintenanceId": "98KJ81F"
          }
        },
        "harshAccelerationSettingType": {
          "description": "Enumeration of the harsh acceleration setting types. This setting influences the acceleration sensitivity from which a harsh event is triggered. If set to `off`, then no acceleration based harsh events are triggered for the vehicle.",
          "type": "string",
          "enum": [
            "passengerCar",
            "lightTruck",
            "heavyDuty",
            "off",
            "automatic"
          ],
          "example": "off"
        },
        "id": {
          "description": "Unique Samsara ID for the vehicle.",
          "type": "string",
          "example": "112"
        },
        "licensePlate": {
          "description": "The license plate of this vehicle.",
          "type": "string",
          "maxLength": 12,
          "example": "XHK1234"
        },
        "make": {
          "description": "Vehicle's manufacturing make.",
          "type": "string",
          "maxLength": 255,
          "example": "Ford"
        },
        "model": {
          "description": "Vehicle's manufacturing model.",
          "type": "string",
          "maxLength": 255,
          "example": "F150"
        },
        "name": {
          "description": "Name of the vehicle.",
          "type": "string",
          "example": "Truck A7"
        },
        "notes": {
          "description": "Notes about a vehicle. Samsara supports a maximum of 255 chars.",
          "type": "string",
          "maxLength": 255,
          "example": "These are notes about this given vehicle."
        },
        "staticAssignedDriver": {
          "$ref": "#/definitions/driverTinyResponse"
        },
        "tags": {
          "description": "An array of all tag mini-objects that are associated with the given vehicle.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/tagTinyResponse"
          }
        },
        "vin": {
          "description": "A vehicle identification number.",
          "type": "string",
          "maxLength": 17,
          "example": "1FUJA6BD31LJ09646"
        },
        "year": {
          "description": "Vehicle's manufacturing year.",
          "type": "string",
          "example": "2008"
        }
      }
    },
    "VehicleStatsResponse": {
      "description": "List of vehicle stats for the specified time period.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/vehicleTinyResponse"
        },
        {
          "type": "object",
          "properties": {
            "engineStates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VehicleEngineStates"
              }
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "fuelPercents": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VehicleFuelPercents"
              }
            }
          }
        }
      ]
    },
    "Webhook": {
      "description": "A webhook object",
      "type": "object",
      "allOf": [
        {
          "required": [
            "id",
            "name",
            "eventType",
            "url",
            "secret"
          ],
          "properties": {
            "eventType": {
              "description": "The eventType that will trigger this webhook.",
              "type": "string",
              "enum": [
                "ping",
                "alert"
              ],
              "example": "alert"
            },
            "id": {
              "description": "A unique identifier for the webhook.",
              "type": "string",
              "example": "81238238123"
            },
            "name": {
              "description": "The name of the webhook.",
              "type": "string",
              "example": "Test Webhook"
            },
            "secret": {
              "description": "The secret that this webhook is signed with.",
              "type": "string",
              "example": "+iG5T4j+R74d5nHZKiJStRWMS2Y="
            },
            "url": {
              "description": "The URL of the webserver endpoint that the webhook payload should be sent to. Must be a https URL.",
              "type": "string",
              "example": "https://www.mysite.com/webhooks"
            }
          }
        }
      ]
    },
    "WebhookCreate": {
      "description": "A webhook object",
      "type": "object",
      "allOf": [
        {
          "required": [
            "name",
            "eventType",
            "url"
          ],
          "properties": {
            "eventType": {
              "description": "The eventType that will trigger this webhook.",
              "type": "string",
              "enum": [
                "ping",
                "alert"
              ],
              "example": "alert"
            },
            "name": {
              "description": "The name of the webhook.",
              "type": "string",
              "example": "Test Webhook"
            },
            "url": {
              "description": "The URL of the webserver endpoint that the webhook payload should be sent to. Must be a https URL.",
              "type": "string",
              "example": "https://www.mysite.com/webhooks"
            }
          }
        }
      ]
    },
    "annotation": {
      "description": "Annotation for the driving segment.",
      "type": "string",
      "format": "string",
      "example": "Yard move."
    },
    "contactTinyResponse": {
      "description": "A minified contact object",
      "type": "object",
      "properties": {
        "firstName": {
          "description": "First name of the contact.",
          "type": "string",
          "example": "Jane"
        },
        "id": {
          "description": "ID of the contact.",
          "type": "string",
          "example": "22408"
        },
        "lastName": {
          "description": "Last name of the contact.",
          "type": "string",
          "example": "Jones"
        }
      }
    },
    "documentTypeTinyResponse": {
      "description": "A tiny document type response object.",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "Unique Samsara ID for the document type.",
          "type": "string",
          "example": "112"
        },
        "name": {
          "description": "Name of the document type.",
          "type": "string",
          "example": "112"
        }
      }
    },
    "driverId": {
      "description": "ID of Driver to assign this segment to. The driver assignment is a tentative assignment until the ID is 'ACCEPTED'.",
      "type": "string",
      "example": "1234"
    },
    "driverTinyResponse": {
      "description": "A minified driver object.",
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the driver.",
          "type": "string",
          "example": "88668"
        },
        "name": {
          "description": "Name of the driver.",
          "type": "string",
          "example": "Susan Bob"
        }
      }
    },
    "endTimeBodyParam": {
      "description": "End time of the driving segment, specified in RFC 3339 format.",
      "type": "string",
      "format": "date-time",
      "example": "2019-04-17T16:42:55Z"
    },
    "equipmentTinyResponse": {
      "description": "A minified equipment object.",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "ID of the equipment.",
          "type": "string",
          "example": "123456789"
        },
        "name": {
          "description": "Name of the equipment.",
          "type": "string",
          "example": "40' crane #5"
        }
      }
    },
    "location": {
      "description": "Location object",
      "type": "object",
      "required": [
        "latitude",
        "longitude"
      ],
      "properties": {
        "latitude": {
          "description": "GPS latitude represented in degrees",
          "type": "number",
          "format": "double",
          "example": 122.142
        },
        "longitude": {
          "description": "GPS longitude represented in degrees",
          "type": "number",
          "format": "double",
          "example": -93.343
        }
      }
    },
    "paginationResponse": {
      "description": "Pagination parameters.",
      "type": "object",
      "required": [
        "endCursor",
        "hasNextPage"
      ],
      "properties": {
        "endCursor": {
          "description": "Cursor identifier representing the last element in the response. This value should be used in conjunction with a subsequent request's 'after' query parameter.",
          "type": "string",
          "format": "string",
          "example": "MjkY"
        },
        "hasNextPage": {
          "description": "True if there are more pages of results immediately available after this endCursor. Otherwise, wait nextPageAfter seconds before fetching the next page with endCursor.",
          "type": "boolean",
          "example": true
        }
      }
    },
    "routeStopTinyResponse": {
      "description": "A tiny route stop response object.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique Samsara ID for the route stop.",
          "type": "string",
          "example": "112"
        },
        "name": {
          "description": "Name of the route stop.",
          "type": "string",
          "example": "Sam Ave"
        }
      }
    },
    "standardErrorResponse": {
      "description": "Error response",
      "type": "object",
      "properties": {
        "message": {
          "description": "The message of the error.",
          "type": "string"
        },
        "requestId": {
          "description": "The ID of the request.",
          "type": "string"
        }
      }
    },
    "startTimeBodyParam": {
      "description": "Start time of the driving segment, specified in RFC 3339 format.",
      "type": "string",
      "format": "date-time",
      "example": "2019-04-17T15:42:55Z"
    },
    "tagTinyResponse": {
      "description": "A minified tag object",
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the tag.",
          "type": "string",
          "example": "3914"
        },
        "name": {
          "description": "Name of the tag.",
          "type": "string",
          "example": "East Coast"
        }
      }
    },
    "time": {
      "description": "UTC timestamp in RFC 3339 milliseconds format.",
      "type": "string",
      "example": "2019-05-03T04:30:31.492Z"
    },
    "timeseriesPaginationResponse": {
      "description": "Pagination parameters for timeseries pages where results may be delayed.",
      "type": "object",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "nextPageAfter": {
              "description": "The number of seconds to wait before fetching the next page of results. Only populated if hasNextPage is false and additional pages may be available in the future. For example, if nextPageAfter=5, then wait 5 seconds before fetching the next page of results. If pagination is complete or hasNextPage=true, then nextPageAfter will be omitted.",
              "type": "integer",
              "example": 5
            }
          }
        },
        {
          "description": "Pagination parameters.",
          "type": "object",
          "required": [
            "endCursor",
            "hasNextPage"
          ],
          "properties": {
            "endCursor": {
              "description": "Cursor identifier representing the last element in the response. This value should be used in conjunction with a subsequent request's 'after' query parameter.",
              "type": "string",
              "format": "string",
              "example": "MjkY"
            },
            "hasNextPage": {
              "description": "True if there are more pages of results immediately available after this endCursor. Otherwise, wait nextPageAfter seconds before fetching the next page with endCursor.",
              "type": "boolean",
              "example": true
            }
          }
        }
      ]
    },
    "userRoleTinyResponse": {
      "description": "A minified user role object.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique ID for the role.",
          "type": "string",
          "example": "8a9371af-82d1-4158-bf91-4ecc8d3a114c"
        },
        "name": {
          "description": "The name of the role.",
          "type": "string",
          "example": "Full Admin"
        }
      }
    },
    "vehicleTinyResponse": {
      "description": "A minified vehicle object.",
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the vehicle.",
          "type": "string",
          "example": "123456789"
        },
        "name": {
          "description": "Name of the vehicle.",
          "type": "string",
          "example": "Midwest Truck #4"
        }
      }
    }
  },
  "parameters": {
    "V1createDvirParam": {
      "description": "DVIR creation body",
      "name": "V1createDvirParam",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "safe",
          "inspectionType",
          "userEmail"
        ],
        "properties": {
          "inspectionType": {
            "description": "Only type 'mechanic' is currently accepted.",
            "type": "string",
            "enum": [
              "mechanic"
            ],
            "example": "mechanic"
          },
          "mechanicNotes": {
            "description": "Any notes from the mechanic.",
            "type": "string",
            "example": "Replaced headlight on passenger side."
          },
          "odometerMiles": {
            "description": "The current odometer of the vehicle.",
            "type": "integer",
            "example": 38426
          },
          "previousDefectsCorrected": {
            "description": "Whether any previous defects were corrected. If this vehicle or trailer was previously marked unsafe, and this DVIR marks it as safe, either previousDefectsCorrected or previousDefectsIgnored must be true.",
            "type": "boolean",
            "example": true
          },
          "previousDefectsIgnored": {
            "description": "Whether any previous defects were ignored. If this vehicle or trailer was previously marked unsafe, and this DVIR marks it as safe, either previousDefectsCorrected or previousDefectsIgnored must be true.",
            "type": "boolean",
            "example": false
          },
          "safe": {
            "description": "Whether or not this vehicle or trailer is safe to drive.",
            "type": "string",
            "enum": [
              "safe",
              "unsafe"
            ],
            "example": "safe"
          },
          "trailerId": {
            "description": "Id of trailer being inspected. Either vehicleId or trailerId must be provided.",
            "type": "integer",
            "example": 11
          },
          "userEmail": {
            "description": "The Samsara login email for the person creating the DVIR. The email must correspond to a Samsara user's email.",
            "type": "string",
            "example": "j.smith@yahoo.com"
          },
          "vehicleId": {
            "description": "Id of vehicle being inspected. Either vehicleId or trailerId must be provided.",
            "type": "integer",
            "example": 10
          }
        }
      }
    },
    "V1createMessagesParam": {
      "description": "Text to send to a list of driverIds.",
      "name": "createMessages",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "driverIds",
          "text"
        ],
        "properties": {
          "driverIds": {
            "description": "IDs of the drivers for whom the messages are sent to.",
            "type": "array",
            "items": {
              "type": "number",
              "format": "int64",
              "example": 555
            },
            "example": [
              111,
              222,
              333
            ]
          },
          "text": {
            "description": "The text sent in the message.",
            "type": "string",
            "example": "This is a message."
          }
        }
      }
    },
    "V1dataInputEndTimeParam": {
      "type": "integer",
      "format": "int64",
      "description": "Timestamp in unix milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Defaults to nowMs.",
      "name": "endMs",
      "in": "query"
    },
    "V1dataInputIdParam": {
      "type": "integer",
      "format": "int64",
      "description": "ID of the data input. Must contain only digits 0-9.",
      "name": "data_input_id",
      "in": "path",
      "required": true
    },
    "V1dataInputStartTimeParam": {
      "type": "integer",
      "format": "int64",
      "description": "Timestamp in unix milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. defaults to nowMs.",
      "name": "startMs",
      "in": "query"
    },
    "V1documentCreateParam": {
      "description": "To create a document for a given document type, the document type's uuid needs to be passed in to documentTypeUuid. The list of fields passed in should match the document type’s list of field types in the correct order. In other words, a field's valueType and value (i.e. only one of: stringValue, numberValue, or photoValue) at index _i_ should match with the document field type’s valueType at index _i_.",
      "name": "createDocumentParams",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/V1DocumentCreate"
      }
    },
    "V1documentQueryByParam": {
      "enum": [
        "created",
        "updated"
      ],
      "type": "string",
      "format": "string",
      "description": "Retrieve most recent documents based on either driverCreatedAtMs or serverUpdatedAtMs. If no value is provided, the default is driverCreatedAtMs.",
      "name": "queryBy",
      "in": "query"
    },
    "V1documentsDurationMsParam": {
      "type": "integer",
      "format": "int64",
      "description": "Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.",
      "name": "durationMs",
      "in": "query"
    },
    "V1documentsEndMsParam": {
      "type": "integer",
      "format": "int64",
      "description": "Time in unix milliseconds that represents the oldest documents to return. Used in combination with durationMs. Defaults to now.",
      "name": "endMs",
      "in": "query"
    },
    "V1getMessagesDurationMsParam": {
      "type": "integer",
      "format": "int64",
      "description": "Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.",
      "name": "durationMs",
      "in": "query"
    },
    "V1getMessagesEndMsParam": {
      "type": "integer",
      "format": "int64",
      "description": "Time in unix milliseconds that represents the end of time range of messages to return. Used in combination with durationMs. Defaults to now.",
      "name": "endMs",
      "in": "query"
    },
    "V1groupIdBodyParam": {
      "description": "Optional group ID if the organization has multiple groups (uncommon).",
      "name": "V1groupIdBodyParam",
      "in": "body",
      "schema": {
        "type": "object",
        "required": [
          "groupId"
        ],
        "properties": {
          "groupId": {
            "description": "Optional group ID if the organization has multiple groups (uncommon).",
            "type": "integer",
            "format": "int64",
            "example": 101
          }
        }
      }
    },
    "V1groupIdParam": {
      "type": "integer",
      "format": "int64",
      "description": "Optional group ID if the organization has multiple groups (uncommon).",
      "name": "group_id",
      "in": "query"
    },
    "V1groupIdQueryParam": {
      "type": "integer",
      "format": "int64",
      "description": "Optional group ID if the organization has multiple groups (uncommon).",
      "name": "groupId",
      "in": "query"
    },
    "V1harshEventMsParam": {
      "type": "integer",
      "format": "int64",
      "description": "Timestamp in milliseconds representing the timestamp of a harsh event.",
      "name": "timestamp",
      "in": "query",
      "required": true
    },
    "V1jobUpdatesIncludeParam": {
      "type": "string",
      "description": "Optionally set include=route to include route object in response payload.",
      "name": "include",
      "in": "query"
    },
    "V1lastReceivedSequenceIDParam": {
      "type": "string",
      "description": "Sequence ID from the response payload of the last request. Defaults to fetching updates from last 24 hours.",
      "name": "sequence_id",
      "in": "query"
    },
    "V1routeCreateParam": {
      "name": "createDispatchRouteParams",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/V1DispatchRouteCreate"
      }
    },
    "V1routeDurationParam": {
      "type": "integer",
      "format": "int64",
      "description": "Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.",
      "name": "duration",
      "in": "query"
    },
    "V1routeEndTimeParam": {
      "type": "integer",
      "format": "int64",
      "description": "Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.",
      "name": "end_time",
      "in": "query"
    },
    "V1routeHistoryEndTimeParam": {
      "type": "integer",
      "format": "int64",
      "description": "Timestamp representing the end of the period to fetch, inclusive. Used in combination with start_time. Defaults to nowMs.",
      "name": "end_time",
      "in": "query"
    },
    "V1routeHistoryStartTimeParam": {
      "type": "integer",
      "format": "int64",
      "description": "Timestamp representing the start of the period to fetch, inclusive. Used in combination with end_time. Defaults to 0.",
      "name": "start_time",
      "in": "query"
    },
    "V1routeUpdateParam": {
      "name": "updateDispatchRouteParams",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/V1DispatchRouteUpdate"
      }
    },
    "V1safetyScoreEndMsParam": {
      "type": "integer",
      "format": "int64",
      "description": "Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour.",
      "name": "endMs",
      "in": "query",
      "required": true
    },
    "V1safetyScoreStartMsParam": {
      "type": "integer",
      "format": "int64",
      "description": "Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour.",
      "name": "startMs",
      "in": "query",
      "required": true
    },
    "V1sensorParam": {
      "description": "Group ID and list of sensor IDs to query.",
      "name": "V1sensorParam",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "groupId",
          "sensors"
        ],
        "properties": {
          "groupId": {
            "description": "Optional group ID if the organization has multiple groups (uncommon).",
            "type": "integer",
            "format": "int64",
            "example": 101
          },
          "sensors": {
            "description": "List of sensor IDs to query.",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "example": [
              122
            ]
          }
        }
      }
    },
    "V1visionCameraIdParam": {
      "type": "integer",
      "format": "int64",
      "description": "The camera_id should be valid for the given accessToken.",
      "name": "camera_id",
      "in": "path",
      "required": true
    },
    "V1visionDurationMsParam": {
      "type": "integer",
      "format": "int64",
      "description": "DurationMs is a required param. This works with the EndMs parameter. Indicates the duration in which the visionRuns will be fetched",
      "name": "durationMs",
      "in": "query",
      "required": true
    },
    "V1visionEndMsParam": {
      "type": "integer",
      "format": "int64",
      "description": "EndMs is an optional param. It will default to the current time.",
      "name": "endMs",
      "in": "query"
    },
    "V1visionIncludeParam": {
      "type": "string",
      "description": "Include is a filter parameter. Accepts 'pass', 'reject' or 'no_read'.",
      "name": "include",
      "in": "query"
    },
    "V1visionLimitParam": {
      "type": "integer",
      "format": "int64",
      "description": "Limit is an integer value from 1 to 1,000.",
      "name": "limit",
      "in": "query"
    },
    "V1visionProgramIdParam": {
      "type": "integer",
      "format": "int64",
      "description": "The configured program's ID on the camera.",
      "name": "program_id",
      "in": "query"
    },
    "V1visionProgramIdPathParam": {
      "type": "integer",
      "format": "int64",
      "description": "The configured program's ID on the camera.",
      "name": "program_id",
      "in": "path",
      "required": true
    },
    "V1visionStartAtMsParam": {
      "type": "integer",
      "format": "int64",
      "description": "EndMs is an optional param. It will default to the current time.",
      "name": "startedAtMs",
      "in": "query"
    },
    "V1visionStartAtMsPathParam": {
      "type": "integer",
      "format": "int64",
      "description": "Started_at_ms is a required param. Indicates the start time of the run to be fetched.",
      "name": "started_at_ms",
      "in": "path",
      "required": true
    },
    "createContactParam": {
      "description": "Add a contact.",
      "name": "contact",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/ContactInput"
      }
    },
    "createMessagesParam": {
      "description": "Text to send to a list of driverIds.",
      "name": "createMessages",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "driverIds",
          "text"
        ],
        "properties": {
          "driverIds": {
            "description": "IDs of the drivers for whom the messages are sent to.",
            "type": "array",
            "items": {
              "type": "number",
              "format": "int64",
              "example": 555
            },
            "example": [
              111,
              222,
              333
            ]
          },
          "text": {
            "description": "The text sent in the message.",
            "type": "string",
            "maxLength": 65533,
            "minLength": 1,
            "example": "This is a message."
          }
        }
      }
    },
    "documentTypeIdParam": {
      "type": "string",
      "description": "A document type ID.",
      "name": "documentTypeId",
      "in": "query"
    },
    "endTimeParam": {
      "type": "string",
      "format": "date-time",
      "description": "An end time in RFC 3339 format. Queries documents on updatedAtTime (if the document has not been updated, updatedAtTime is equal to createdAtTime). Defaults to current time if not provided. (Example: 2019-06-13T19:08:25Z).",
      "name": "endTime",
      "in": "query"
    },
    "endTimeQueryParam": {
      "type": "string",
      "format": "date-time",
      "description": "End of the filter time range, specified in RFC 3339 format. (Example: 2019-06-13T19:08:25Z) Filters based on the server timestamp, i.e. createAtTime.",
      "name": "endTime",
      "in": "query"
    },
    "equipmentStatTypes": {
      "type": "array",
      "items": {
        "enum": [
          "engineStates",
          "fuelPercents",
          "engineRpm",
          "engineSeconds"
        ],
        "type": "string",
        "format": "string"
      },
      "collectionFormat": "csv",
      "description": "A comma separated list of stat types.",
      "name": "types",
      "in": "query"
    },
    "startTimeParam": {
      "type": "string",
      "format": "date-time",
      "description": "A start time in RFC 3339 format. Queries documents on updatedAtTime (if the document has not been updated, updatedAtTime is equal to createdAtTime). Defaults to current time - 1 hour if not provided. (Example: 2019-06-13T19:08:25Z).",
      "name": "startTime",
      "in": "query"
    },
    "startTimeQueryParam": {
      "type": "string",
      "format": "date-time",
      "description": "Beginning of the filter time range, specified in RFC 3339 format. (Example: 2019-06-13T18:08:25Z) Filters based on the server timestamp, i.e. createAtTime.",
      "name": "startTime",
      "in": "query"
    }
  },
  "tags": [
    {
      "description": "Address book entries in Samsara can be used to collect useful data about operations within a particular address's geofence area. Once an address book entry is established, this address can then subsequently be used in order to create routes, set geofence arrival alerts, or detect trips that begin or end within a given geofence area.",
      "name": "Addresses"
    },
    {
      "description": "Contacts are an easy way to manage which users receive alerts (via sms or email).",
      "name": "Contacts"
    },
    {
      "description": "The documents feature allows you to manage driver-submitted documents from the Samsara app. Submitted documents are grouped by document types, and back office users can create new types of documents. For more information on the driver workflow around documents, see this [KB article](https://kb.samsara.com/hc/en-us/articles/360006911551-Using-Documents-in-the-Dashboard).",
      "name": "Documents"
    },
    {
      "description": "Driver objects allow you to track your driver-vehicle assignments, manage driver profiles, and update mobile app credential logins. You can retrieve a list of all drivers, or you can fetch each driver object individually.\nDrivers can be either active or inactive. You should inactivate a driver if you wish to keep the driver's driving history and HOS logs. If your driver is inactive, you can still get information about a driver summary.",
      "name": "Drivers"
    },
    {
      "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThese endpoints are still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nHours of Service refers to driver duty status logs.",
      "name": "Hours of Service"
    },
    {
      "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThese endpoints are still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nMaintenance refers to both DVIRs and reports on vehicle fault codes.",
      "name": "Maintenance"
    },
    {
      "description": "Fleet Admins can send direct free-form messages to drivers. This will send a message to the driver's Samsara driver app, in which you can track whether or not a message has been read by a given driver. For sending structured messages, see the Documents API.",
      "name": "Messages"
    },
    {
      "description": "Samsara's Routes feature allows you to build routes and track and share driver progress in real-time.",
      "name": "Routes"
    },
    {
      "description": "Samsara provides you with more visibility on whether or not your fleets are being safe. With the collection of safety endpoints, you can get aggregate metrics around the performance of a particular driver or vehicle, as well as detailed logs of all the harsh events that take place in an organization.",
      "name": "Safety"
    },
    {
      "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThese endpoints are still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nThe sensor object describes a sensor's attributes and settings within Samsara. Samsara has many different types of sensors, such as temperature and humidity monitors, door monitors, and more.",
      "name": "Sensors"
    },
    {
      "description": "Tags are a simple way to organize vehicles, drivers, assets, and sensors into easily identifiable groups. You can add unlimited entities to each tag, and entities can have multiple different tags. You can also use tag hierarchies in order to create nested classes, such as parent tag 'Massachusetts' and child tag 'Boston'. For more information on tags functionality, see [this Knowledge Base article](https://kb.samsara.com/hc/en-us/articles/360026674631-Using-Tags-and-Tag-Nesting).",
      "name": "Tags"
    },
    {
      "name": "Trips"
    },
    {
      "description": "The users API allows you to manage access to the Samsara dashboard. This can be particularly useful if you are looking to set up a connection with your identity provider to manage roles and permissions for certain types of users within your system.",
      "name": "Users"
    },
    {
      "description": "The vehicle object describes a vehicle's attributes and settings within Samsara. A vehicle is generated in the Samsara platform when a vehicle gateway is installed. The gateway often auto-populates information such as the VIN, make, model, and year.\nThe vehicle object is often referenced in other objects. For these references, you will see a mini-object of the vehicle, rather than the full vehicle information. The mini-object encompasses a smaller subset of commonly-referenced field, such as the Samsara ID, name, and external ID.",
      "name": "Vehicles"
    },
    {
      "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThese endpoints are still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nAccess to industrial data",
      "name": "Industrial"
    }
  ]
}