{
    "consumes": [
      "application/json"
    ],
    "produces": [
      "application/json"
    ],
    "schemes": [
      "https"
    ],
    "swagger": "2.0",
    "info": {
      "description": "# ** Introducing the new Samsara Open API **\n\nAt Samsara, we’re committed to delivering the best functionality to help you achieve your business goals. We heard your feedback from our v1 API, and we're excited to provide you with the new official Samsara Open API. You can read more about this new API on our [Samsara Open API Release FAQ](https://google.com) page.\n\n If you would like to access the existing API docs, you can still do so at this link: [Samara V1 API](https://samsara.com/api-v1).\n\n*Note: This is an API preview, and not a final API spec. Samsara is making this available to outside parties to gather feedback, but we do not recommend coding directly against this API just yet. Samsara reserves the right to make breaking changes until the API’s full release.* \n\n# Overview\n\nSamsara provides API endpoints for interacting with Samsara Cloud, so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.\n\nThe Samsara Cloud API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer) accessed by an [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) client such as wget or curl, or HTTP libraries of most modern programming languages including python, ruby, java. We use built-in HTTP features, like HTTP authentication and HTTP verbs, which are understood by off-the-shelf HTTP clients. We allow you to interact securely with our API from a client-side web application (though you should never expose your secret API key). [JSON](http://www.json.org/) is returned by all API responses, including errors. If you’re familiar with what you can build with a REST API, the following API reference guide will be your go-to resource.\n\nAPI access to the Samsara cloud is available to all Samsara administrators. To start developing with Samsara APIs you will need to [obtain your API keys](#section/Authentication) to authenticate your API requests.\n\nIf you have any questions you can reach out to us on [support@samsara.com](mailto:support@samsara.com)\n\n# Endpoints\n\nAll our APIs can be accessed through HTTP requests to URLs like:\n\n```curl\nhttps://api.samsara.com/\u003cendpoint\u003e\n```\n\nAll our APIs are [versioned](#section/Versioning). If we intend to make breaking changes to an API which either changes the response format or request parameter, we will increment the version.\n\n# Authentication\n\nTo authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings-\u003eOrganization-\u003eAPI Tokens`.\n\nYour API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on. Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the access_token value in an Authorization: Bearer header. You do not need to provide a password. \n\n```curl Authorization: Bearer {access_token}```\n\n All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail. \n\n# Versioning\n\nAll our APIs are versioned. Our current API version is v1 and we are continuously working on improving it further and providing additional endpoints. If we intend to make breaking changes in a backwards-incompatible way, we release a new dated version to your API. Thus, you can use our current API version worry free. For a detailed guide on how to upgrade your API token, please check out this [Knowledge Base article](https://kb.samsara.com/hc/en-us/articles/360026132972-Upgrading-API-Tokens).\n\n# FAQs\n\nCheck out our [responses to FAQs here](https://kb.samsara.com/hc/en-us/sections/360000538054-APIs). Don’t see an answer to your question? Reach out to us on [support@samsara.com](mailto:support@samsara.com).",
      "title": "Samsara API",
      "version": "1.0.0"
    },
    "host": "api.samsara.com",
    "paths": {
      "/addresses": {
        "get": {
          "description": "Returns a list of all addresses in an organization",
          "tags": [
            "Addresses"
          ],
          "summary": "List all addresses",
          "operationId": "getAddresses",
          "parameters": [
            {
              "maximum": 512,
              "minimum": 0,
              "type": "integer",
              "format": "int64",
              "default": 512,
              "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
              "name": "limit",
              "in": "query"
            },
            {
              "type": "string",
              "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
              "name": "after",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "List of all addresses in the organization",
              "schema": {
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Address"
                    }
                  },
                  "pagination": {
                    "$ref": "#/definitions/paginationResponse"
                  }
                }
              }
            },
            "default": {
              "description": "Error response.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        },
        "post": {
          "description": "Creates a new address in the organization",
          "tags": [
            "Addresses"
          ],
          "summary": "Create an address",
          "operationId": "createAddress",
          "parameters": [
            {
              "description": "The address to create.",
              "name": "address",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/AddressCreate"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Newly created address object with ID",
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/definitions/Address"
                  }
                }
              }
            },
            "default": {
              "description": "Error response.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        }
      },
      "/documents": {
        "get": {
          "tags": ["Documents"],
          "description": "Get all documents",
          "summary": "Get all documents",
          "operationId": "getDocuments",
          "parameters": [
            {
              "maximum": 512,
              "minimum": 0,
              "type": "integer",
              "format": "int64",
              "default": 512,
              "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
              "name": "limit",
              "in": "query"
            },
            {
              "type": "string",
              "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
              "name": "after",
              "in": "query"
            },
            {
              "type": "string",
              "format": "string",
              "description": "Beginning of the time range, specified in RFC 3339 time.",
              "name": "startTime",
              "in": "query"
            },
            {
              "type": "string",
              "format": "string",
              "description": "End of the time range, specified in RFC 3339 time.",
              "name": "endTime",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "description": "A comma-separated list of vehicle IDs.",
              "name": "vehicleIds",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "List of all documents",
              "schema": {
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Document"
                    }
                  },
                  "pagination": {
                    "$ref": "#/definitions/paginationResponse"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": ["Documents"],
          "description": "Create a document.",
          "operationId": "createDocument",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Newly created document object with ID.",
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/definitions/Document"
                  }
                }
              }
            }
          }
        }
      },
      "/addresses/{id}": {
        "get": {
          "description": "Returns a specific address.",
          "tags": [
            "Addresses"
          ],
          "summary": "Get information about a specific address",
          "operationId": "getAddressById",
          "responses": {
            "200": {
              "description": "Newly created address object with ID",
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/definitions/Address"
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        },
        "delete": {
          "description": "Delete a specific address.",
          "tags": [
            "Addresses"
          ],
          "summary": "Delete a specific address",
          "operationId": "deleteAddressById",
          "responses": {
            "204": {
              "description": "Empty success body"
            },
            "default": {
              "description": "Error response.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        },
        "patch": {
          "description": "Update a specific address.",
          "tags": [
            "Addresses"
          ],
          "summary": "Update information about a specific address",
          "operationId": "updateAddressById",
          "parameters": [
            {
              "description": "The address fields to update.",
              "name": "address",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/AddressPatch"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Newly created address object with ID",
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/definitions/Address"
                  }
                }
              }
            },
            "default": {
              "description": "Error response",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        },
        "parameters": [
          {
            "type": "string",
            "description": "Unique Samsara ID for the address",
            "name": "id",
            "in": "path",
            "required": true
          }
        ]
      },
      "/contacts": {
        "get": {
          "description": "Returns a list of all contacts in an organization.",
          "tags": [
            "Contacts"
          ],
          "summary": "List all contacts",
          "operationId": "getContacts",
          "parameters": [
            {
              "maximum": 512,
              "minimum": 0,
              "type": "integer",
              "format": "int64",
              "default": 512,
              "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
              "name": "limit",
              "in": "query"
            },
            {
              "type": "string",
              "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
              "name": "after",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "List of all contacts",
              "schema": {
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Contact"
                    }
                  },
                  "pagination": {
                    "$ref": "#/definitions/paginationResponse"
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        },
        "post": {
          "description": "Add a contact to the organization",
          "tags": [
            "Contacts"
          ],
          "summary": "Add a contact to the organization",
          "operationId": "createContact",
          "parameters": [
            {
              "description": "Add a contact.",
              "name": "contact",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ContactInput"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Contact was successfully added.",
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/definitions/Contact"
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        }
      },
      "/contacts/{id}": {
        "get": {
          "description": "Get a specific contact's information.",
          "tags": [
            "Contacts"
          ],
          "summary": "Get a contact's information",
          "operationId": "getContactById",
          "responses": {
            "200": {
              "description": "Returns the specified contact.",
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/definitions/Contact"
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        },
        "delete": {
          "description": "Delete the given contact.",
          "tags": [
            "Contacts"
          ],
          "summary": "Delete a contact",
          "operationId": "deleteContactById",
          "responses": {
            "204": {
              "description": "Returns an empty success response.",
              "schema": {}
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        },
        "patch": {
          "description": "Update a specific contact's information.",
          "tags": [
            "Contacts"
          ],
          "summary": "Update a contact's information",
          "operationId": "updateContactById",
          "parameters": [
            {
              "description": "Updates to the contact.",
              "name": "contact",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/ContactInput"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Updated contact object with given ID.",
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/definitions/Contact"
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        },
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier for the contact.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ]
      },
      "/fleet/drivers": {
        "get": {
          "description": "Get all drivers in organization.",
          "tags": [
            "Drivers"
          ],
          "summary": "List all drivers",
          "operationId": "getDrivers",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter only for inactive drivers. This parameter will default to false if not provided.",
              "name": "isInactive",
              "in": "query"
            },
            {
              "maximum": 512,
              "minimum": 0,
              "type": "integer",
              "format": "int64",
              "default": 512,
              "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
              "name": "limit",
              "in": "query"
            },
            {
              "type": "string",
              "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
              "name": "after",
              "in": "query"
            },
            {
              "type": "string",
              "description": "A comma-separated list of tag IDs.",
              "name": "tagIds",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "List of all driver objects.",
              "schema": {
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Driver"
                    }
                  },
                  "pagination": {
                    "$ref": "#/definitions/paginationResponse"
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        },
        "post": {
          "description": "Add a driver to the organization.",
          "tags": [
            "Drivers"
          ],
          "summary": "Create a driver",
          "operationId": "createDriver",
          "parameters": [
            {
              "description": "The driver to create.",
              "name": "driver",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/DriverCreate"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Newly created driver object, with Samsara-generated ID.",
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/definitions/Driver"
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        }
      },
      "/fleet/drivers/safety-scores": {
        "get": {
          "description": "Fetch safety scores for all drivers in the organization in a given time period.",
          "tags": [
            "Safety"
          ],
          "summary": "Fetch all safety scores by driver",
          "operationId": "getOrgDriverSafetyScores",
          "parameters": [
            {
              "type": "string",
              "format": "string",
              "description": "Beginning of the time range, specified in RFC 3339 time.",
              "name": "startTime",
              "in": "query",
              "required": true
            },
            {
              "type": "string",
              "format": "string",
              "description": "End of the time range, specified in RFC 3339 time.",
              "name": "endTime",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "Safety scores for all vehicles in the organization",
              "schema": {
                "$ref": "#/definitions/OrgSafetyScoresResponse"
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        }
      },
      "/fleet/drivers/{id}": {
        "get": {
          "description": "Get information about a driver.",
          "tags": [
            "Drivers"
          ],
          "summary": "Get a driver",
          "operationId": "getDriverById",
          "responses": {
            "200": {
              "description": "Returns the specified driver.",
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/definitions/Driver"
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        },
        "patch": {
          "description": "Update a specific driver's information. This can also be used to activate or de-activate a given driver",
          "tags": [
            "Drivers"
          ],
          "summary": "Update driver properties",
          "operationId": "updateDriverById",
          "parameters": [
            {
              "description": "Updates to the driver properties.",
              "name": "driver",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/DriverUpdate"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Updated driver object, with ID.",
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/definitions/Driver"
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        },
        "delete": {
          "description": "Samsara does not allow the deletion of drivers today. If you would like to delete a driver, please use the PATCH drivers endpoint in order to inactivate a driver.",
          "tags": [
            "Drivers"
          ],
          "summary": "Delete driver",
          "responses": {
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        },
        "parameters": [
          {
            "type": "string",
            "description": "ID of the driver. This can either be the Samsara-specified ID, or an external ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ]
      },
      "/fleet/equipment/locations": {
        "get": {
          "description": "This endpoint allows you to both fetch historical locations for all equipment as well as a feed of all new equipment locations.\n\nIf you wish to just fetch historical location data, you can pass in a startTime and endTime range. This will return all location data points ingested by Samsara during the given time range. Note that there may be certain data points within the response with a timestamp before the startTime, in the case that there is a connectivity lag between the asset and the server.",
          "tags": [
            "Equipment"
          ],
          "summary": "Fetch locations for all equipment",
          "operationId": "getEquipmentLocationsHistory",
          "parameters": [
            {
              "type": "string",
              "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
              "name": "after",
              "in": "query"
            },
            {
              "type": "string",
              "format": "date-time",
              "description": "A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
              "name": "startTime",
              "in": "query"
            },
            {
              "type": "string",
              "format": "date-time",
              "description": "An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
              "name": "endTime",
              "in": "query"
            },
            {
              "type": "string",
              "description": "A comma-separated list of tag IDs.",
              "name": "tagIds",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "description": "A comma-separated list of equipment IDs.",
              "name": "equipmentIds",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "List of all equipment location objects and pagination parameters",
              "schema": {
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/EquipmentLocationsResponse"
                    }
                  },
                  "pagination": {
                    "type": "object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/EquipmentTimeSeriesPaginationResponse"
                      }
                    ]
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        }
      },
      "/fleet/equipment/stats": {
        "get": {
          "description": "This endpoint allows you to both fetch historical stats for all equipment as well as a feed of all new equipment stats.\n\nIf you wish to just fetch historical stat data, you can pass in a startTime and endTime range. This will return all stat data points ingested by Samsara during the given time range. Note that there may be certain data points within the response with a timestamp before the startTime, in the case that there is a connectivity lag between the asset and the server.",
          "tags": [
            "Equipment"
          ],
          "summary": "Fetch stats for all equipment",
          "operationId": "getEquipmentStatsHistory",
          "parameters": [
            {
              "type": "string",
              "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
              "name": "after",
              "in": "query"
            },
            {
              "type": "string",
              "format": "date-time",
              "description": "A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
              "name": "startTime",
              "in": "query"
            },
            {
              "type": "string",
              "format": "date-time",
              "description": "An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
              "name": "endTime",
              "in": "query"
            },
            {
              "type": "string",
              "description": "A comma-separated list of tag IDs.",
              "name": "tagIds",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "description": "A comma-separated list of equipment IDs.",
              "name": "equipmentIds",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "List of all equipment stat objects and pagination parameters",
              "schema": {
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/EquipmentStatsResponse"
                    }
                  },
                  "pagination": {
                    "type": "object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/EquipmentTimeSeriesPaginationResponse"
                      }
                    ]
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        }
      },
      "/fleet/vehicles": {
        "get": {
          "description": "Returns a list of all vehicles in an organization, ordered by vehicle ID.",
          "tags": [
            "Vehicles"
          ],
          "summary": "List all vehicles",
          "operationId": "listVehiclesKondo",
          "parameters": [
            {
              "maximum": 512,
              "minimum": 0,
              "type": "integer",
              "format": "int64",
              "default": 512,
              "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
              "name": "limit",
              "in": "query"
            },
            {
              "type": "string",
              "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
              "name": "after",
              "in": "query"
            },
            {
              "type": "string",
              "description": "A comma-separated list of tag IDs.",
              "name": "tagIds",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "List of all vehicle objects, and pagination parameters.",
              "schema": {
                "$ref": "#/definitions/VehicleListResponse"
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        }
      },
      "/fleet/vehicles/harsh-events": {
        "get": {
          "description": "Fetch all harsh events for the organization in a given time period.",
          "tags": [
            "Safety"
          ],
          "summary": "Fetch all harsh events",
          "operationId": "getOrgHarshEvents",
          "parameters": [
            {
              "type": "string",
              "format": "string",
              "description": "Beginning of the time range, specified in RFC 3339 time.",
              "name": "startTime",
              "in": "query",
              "required": true
            },
            {
              "type": "string",
              "format": "string",
              "description": "End of the time range, specified in RFC 3339 time.",
              "name": "endTime",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "Harsh events for the organization",
              "schema": {
                "$ref": "#/definitions/OrgHarshEventsKondoResponse"
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        }
      },
      "/fleet/vehicles/locations": {
        "get": {
          "description": "This endpoint allows you to both fetch historical locations for a vehicle, as well as a feed of all new vehicle locations.\n\nIf you wish to just fetch the historical location data for a vehicle, you can pass in a `startTime` and `endTime` range. This will return all known locations for a vehicle during a given time range.\n\nIf an `endTime` is not provided, then this will provide a continuous feed of all vehicle locations. In order to follow the feed, you can follow the pagination `endCursor` cursor continuously.  If there is not yet a `hasNextPage=true` for the feed follow, then we recommend you wait and retry in 5 seconds.",
          "tags": [
            "Vehicles"
          ],
          "summary": "Fetch vehicle locations",
          "operationId": "getVehicleLocationsHistory",
          "parameters": [
            {
              "type": "string",
              "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
              "name": "after",
              "in": "query"
            },
            {
              "type": "string",
              "format": "date-time",
              "description": "A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
              "name": "startTime",
              "in": "query"
            },
            {
              "type": "string",
              "format": "date-time",
              "description": "An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
              "name": "endTime",
              "in": "query"
            },
            {
              "type": "string",
              "description": "A comma-separated list of tag IDs.",
              "name": "tagIds",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "description": "A comma-separated list of vehicle IDs.",
              "name": "vehicleIds",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "List of all locations for the specified vehicles and time range.",
              "schema": {
                "$ref": "#/definitions/VehicleLocationsListResponse"
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        }
      },
      "/fleet/vehicles/safety-scores": {
        "get": {
          "description": "Fetch safety scores for all vehicles in the organization in a given time period.",
          "tags": [
            "Safety"
          ],
          "summary": "Fetch all safety scores by vehicle",
          "operationId": "getOrgVehicleSafetyScores",
          "parameters": [
            {
              "type": "string",
              "format": "string",
              "description": "Beginning of the time range, specified in RFC 3339 time.",
              "name": "startTime",
              "in": "query",
              "required": true
            },
            {
              "type": "string",
              "format": "string",
              "description": "End of the time range, specified in RFC 3339 time.",
              "name": "endTime",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "Safety scores for all vehicles in the organization",
              "schema": {
                "$ref": "#/definitions/OrgSafetyScoresResponse"
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        }
      },
      "/messages": {
        "post": {
          "description": "Send a message to a list of driver ids.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "Messages"
          ],
          "summary": "Create a message",
          "operationId": "createMessagesKondo",
          "parameters": [
            {
              "description": "Text to send to a list of driverIds.",
              "name": "createMessages",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "required": [
                  "driverIds",
                  "text"
                ],
                "properties": {
                  "driverIds": {
                    "description": "IDs of the drivers for whom the messages are sent to.",
                    "type": "array",
                    "items": {
                      "type": "number",
                      "format": "int64",
                      "example": 555
                    },
                    "example": [
                      111,
                      222,
                      333
                    ]
                  },
                  "text": {
                    "description": "The text sent in the message.",
                    "type": "string",
                    "maxLength": 65533,
                    "minLength": 1,
                    "example": "This is a message."
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the created messages.",
              "schema": {
                "description": "A list of created messages.",
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/definitions/Messages"
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        }
      },
      
      "/v1/fleet/drivers/{driver_id}/hos_daily_logs": {
        "post": {
          "description": "Get summarized daily HOS charts for a specified driver.",
          "tags": [
            "Compliance"
          ],
          "summary": "/fleet/drivers/{driver_id}/hos_daily_logs",
          "operationId": "getFleetDriversHosDailyLogs",
          "parameters": [
            {
              "type": "integer",
              "format": "int64",
              "description": "ID of the driver with HOS logs.",
              "name": "driver_id",
              "in": "path",
              "required": true
            },
            {
              "name": "hosLogsParam",
              "in": "body",
              "schema": {
                "type": "object",
                "required": [
                  "groupId",
                  "startMs",
                  "endMs"
                ],
                "properties": {
                  "endMs": {
                    "description": "End of the time range, specified in milliseconds UNIX time.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1462881998034
                  },
                  "groupId": {
                    "description": "Group ID to query.",
                    "type": "integer",
                    "format": "int64",
                    "example": 101
                  },
                  "startMs": {
                    "description": "Beginning of the time range, specified in milliseconds UNIX time.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1462878398034
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Distance traveled and time active for each driver in the organization over the specified time period.",
              "schema": {
                "$ref": "#/definitions/DriverDailyLogResponse"
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/v1/fleet/hos_authentication_logs": {
        "get": {
          "description": "Get the HOS (hours of service) signin and signout logs for the specified driver. The response includes 4 fields that are now deprecated.",
          "tags": [
            "Compliance"
          ],
          "summary": "/fleet/hos_authentication_logs",
          "operationId": "getFleetHosAuthenticationLogs",
          "parameters": [
            {
              "type": "integer",
              "format": "int64",
              "description": "Driver ID to query.",
              "name": "driverId",
              "in": "query",
              "required": true
            },
            {
              "type": "integer",
              "format": "int64",
              "description": "Beginning of the time range, specified in milliseconds UNIX time.",
              "name": "startMs",
              "in": "query",
              "required": true
            },
            {
              "type": "integer",
              "format": "int64",
              "description": "End of the time range, specified in milliseconds UNIX time.",
              "name": "endMs",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "HOS authentication logs for the specified driver.",
              "schema": {
                "$ref": "#/definitions/HosAuthenticationLogsResponse"
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/v1/fleet/hos_logs": {
        "post": {
          "description": "Get the HOS (hours of service) logs for the specified driver. This method returns all the HOS statuses that the driver was in during this time period.",
          "tags": [
            "Compliance"
          ],
          "summary": "/fleet/hos_logs",
          "operationId": "getFleetHosLogs",
          "parameters": [
            {
              "name": "hosLogsParam",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "required": [
                  "groupId",
                  "driverId",
                  "startMs",
                  "endMs"
                ],
                "properties": {
                  "driverId": {
                    "description": "Driver ID to query.",
                    "type": "integer",
                    "format": "int64",
                    "example": 444
                  },
                  "endMs": {
                    "description": "End of the time range, specified in milliseconds UNIX time.",
                    "type": "integer",
                    "example": 1462881998034
                  },
                  "groupId": {
                    "description": "Optional group ID if the organization has multiple groups (uncommon).",
                    "type": "integer",
                    "format": "int64",
                    "example": 101
                  },
                  "startMs": {
                    "description": "Beginning of the time range, specified in milliseconds UNIX time.",
                    "type": "integer",
                    "example": 1462878398034
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "HOS logs for the specified driver.",
              "schema": {
                "$ref": "#/definitions/HosLogsResponse"
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/v1/fleet/hos_logs_summary": {
        "get": {
          "description": "Get the current HOS status for all drivers in the group. Note that this includes inactive as well as active drivers.",
          "tags": [
            "Compliance"
          ],
          "summary": "/fleet/hos_logs_summary",
          "operationId": "getFleetHosLogsSummary",
          "deprecated": true,
          "parameters": [],
          "responses": {
            "200": {
              "description": "HOS logs for the specified driver.",
              "schema": {
                "$ref": "#/definitions/HosLogsSummaryResponse"
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/tags": {
        "get": {
          "description": "Return all of the tags for an organization.",
          "tags": [
            "Tags"
          ],
          "summary": "List all tags",
          "operationId": "getAllTags",
          "parameters": [
            {
              "maximum": 512,
              "minimum": 0,
              "type": "integer",
              "format": "int64",
              "default": 512,
              "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
              "name": "limit",
              "in": "query"
            },
            {
              "type": "string",
              "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
              "name": "after",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "List of tags.",
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Tag"
                    }
                  },
                  "pagination": {
                    "$ref": "#/definitions/paginationResponse"
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        },
        "post": {
          "description": "Create a new tag for the organization.",
          "tags": [
            "Tags"
          ],
          "summary": "Create a tag",
          "operationId": "createTag",
          "parameters": [
            {
              "name": "Tag create body.",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/TagUpdate"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Newly created tag object, including the new tag ID.",
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/definitions/Tag"
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        }
      },
      "/tags/{id}": {
        "get": {
          "description": "Fetch a tag by id.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "Tags"
          ],
          "summary": "Get a tag object",
          "operationId": "getTagById",
          "responses": {
            "200": {
              "description": "The tag corresponding to request id.",
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/definitions/Tag"
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        },
        "put": {
          "description": "Update a tag with a new name and new members. This API call would replace all old members of a tag with new members specified in the request body. To modify only a few devices associated with a tag use the PATCH endpoint.",
          "tags": [
            "Tags"
          ],
          "summary": "Update a tag",
          "operationId": "putTagById",
          "parameters": [
            {
              "name": "Tag update body.",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/TagUpdate"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "The updated tag data.",
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/definitions/Tag"
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        },
        "delete": {
          "description": "Permanently deletes a tag.",
          "tags": [
            "Tags"
          ],
          "summary": "Delete a tag",
          "operationId": "deleteTagById",
          "responses": {
            "204": {
              "description": "Successfully deleted the tag. No response body is returned."
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        },
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier for the tag.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ]
      },
      "/fleet/vehicles/stats": {
        "get": {
          "tags": ["Vehicles"],
          "summary": "Fetch vehicle diagnostics data",
          "description":
            "This endpoint allows you to both fetch historical diagnostics information for a set of vehicles, as well as a feed of all new vehicle diagnostics information.\n\nIf you wish to just fetch the historical data for a vehicle, you can pass in a `startTime` and `endTime` range. This will return all known states for a vehicle during a  given time range. In other words, this will return all data point readings for each vehicle between the given time range, and often one data point before the `startTime` range that represents the state of the vehicle in the first time segment. As an example, if you are looking to fetch all engine states between `t=4`and `t=10`, and the engine is `OFF` between time 3-6 and `IDLE` from 6-10, then the endpoint will return both the `OFF` and `IDLE` states.\n\nIf an `endTime` is not provided, then this will provide a continuous feed of all data points. In order to follow the feed, you can follow the pagination `hasNextPage` cursor continuously. If there is not yet a `hasNextPage=true` for the feed follow, then we recommend you wait and retry in 5 seconds.",
          "operationId": "listVehicleGaugeHistory",
          "parameters": [
            {
              "maximum": 512,
              "minimum": 0,
              "type": "integer",
              "format": "int64",
              "default": 512,
              "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
              "name": "limit",
              "in": "query"
            },
            {
              "type": "string",
              "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
              "name": "after",
              "in": "query"
            },
            {
              "type": "string",
              "format": "string",
              "description": "Beginning of the time range, specified in RFC 3339 time.",
              "name": "startTime",
              "in": "query",
              "required": true
            },
            {
              "type": "string",
              "format": "string",
              "description": "End of the time range, specified in RFC 3339 time.",
              "name": "endTime",
              "in": "query",
              "required": true
            },
            {
              "type": "string",
              "description": "A comma-separated list of tag IDs.",
              "name": "tagIds",
              "in": "query"
            },
            {
              "name": "diagnosticsParam",
              "description":
                "Comma-separated list of diagnostics information to return. Defaults to returning fuel and odometer information. All entries will include the GPS location for the time at which the value was recorded, if available. Example: gauges=fuel,odometer",
              "type": "string",
              "in": "query",
              "enum": [
                "ignition",
                "fuel-percent",
                "fuel-consumption",
                "oil",
                "battery",
                "odometer",
                "running-time",
                "tire-pressure",
                "barometer",
                "rpm"
              ]
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "description": "A comma-separated list of vehicle IDs.",
              "name": "vehicleIds",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "List of all diagnostics data points for the specified vehicles and time range.",
              "schema": {
                "$ref": "#/definitions/VehicleGaugesListHistoryResponse"
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        }
      },
      "/user-roles": {
        "get": {
          "description": "Returns a list of all user roles in an organization.",
          "tags": [
            "Users"
          ],
          "summary": "List all user roles",
          "operationId": "getUserRoles",
          "parameters": [
            {
              "maximum": 512,
              "minimum": 0,
              "type": "integer",
              "format": "int64",
              "default": 512,
              "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
              "name": "limit",
              "in": "query"
            },
            {
              "type": "string",
              "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
              "name": "after",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "List all user roles.",
              "schema": {
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/UserRole"
                    }
                  },
                  "pagination": {
                    "$ref": "#/definitions/paginationResponse"
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        }
      },
      "/users": {
        "get": {
          "description": "Returns a list of all users in an organization.",
          "tags": [
            "Users"
          ],
          "summary": "List all users",
          "operationId": "getUsers",
          "parameters": [
            {
              "maximum": 512,
              "minimum": 0,
              "type": "integer",
              "format": "int64",
              "default": 512,
              "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
              "name": "limit",
              "in": "query"
            },
            {
              "type": "string",
              "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
              "name": "after",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "List all users.",
              "schema": {
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/User"
                    }
                  },
                  "pagination": {
                    "$ref": "#/definitions/paginationResponse"
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        },
        "post": {
          "description": "Add a user to the organization.",
          "tags": [
            "Users"
          ],
          "summary": "Create a user",
          "operationId": "createUser",
          "parameters": [
            {
              "description": "The user to create.",
              "name": "user",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/UserCreate"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Newly created user object with ID.",
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/definitions/User"
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        }
      },
      "/users/{id}": {
        "get": {
          "description": "Get a specific user's information.",
          "tags": [
            "Users"
          ],
          "summary": "Get a user's information",
          "operationId": "getUserById",
          "responses": {
            "200": {
              "description": "Returns the specified user.",
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/definitions/User"
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        },
        "delete": {
          "description": "Delete the given user.",
          "tags": [
            "Users"
          ],
          "summary": "Delete a user",
          "operationId": "deleteUserById",
          "responses": {
            "204": {
              "description": "Returns an empty success response."
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        },
        "patch": {
          "description": "Update a specific user's information.",
          "tags": [
            "Users"
          ],
          "summary": "Update a user's information",
          "operationId": "updateUserById",
          "parameters": [
            {
              "description": "Updates to the user.",
              "name": "user",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/UserUpdate"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Updated user object with ID.",
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/definitions/User"
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/standardErrorResponse"
              }
            }
          }
        },
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier for the user.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ]
      },
      "/v1/industrial/data": {
        "get": {
          "description": "Fetch all of the data inputs for a group.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "Industrial"
          ],
          "summary": "/industrial/data",
          "operationId": "getAllDataInputs",
          "parameters": [
            {
              "$ref": "#/parameters/dataInputStartTimeParam"
            },
            {
              "$ref": "#/parameters/dataInputEndTimeParam"
            }
          ],
          "responses": {
            "200": {
              "description": "List of data inputs.",
              "schema": {
                "type": "object",
                "properties": {
                  "dataInputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/DataInputHistoryResponse"
                    }
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/v1/industrial/data/{data_input_id}": {
        "get": {
          "description": "Fetch datapoints from a given data input.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "Industrial"
          ],
          "summary": "/industrial/data/{data_input_id}",
          "operationId": "getDataInput",
          "parameters": [
            {
              "$ref": "#/parameters/dataInputIdParam"
            },
            {
              "$ref": "#/parameters/dataInputStartTimeParam"
            },
            {
              "$ref": "#/parameters/dataInputEndTimeParam"
            }
          ],
          "responses": {
            "200": {
              "description": "Returns datapoints for the given data input",
              "schema": {
                "$ref": "#/definitions/DataInputHistoryResponse"
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/v1/industrial/vision/cameras": {
        "get": {
          "description": "Fetch all cameras.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "Industrial"
          ],
          "summary": "/industrial/vision/cameras",
          "operationId": "getCameras",
          "responses": {
            "200": {
              "description": "Returns details about a camera.",
              "schema": {
                "$ref": "#/definitions/VisionCamerasResponse"
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/v1/industrial/vision/cameras/{camera_id}/programs": {
        "get": {
          "description": "Fetch configured programs on the camera.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "Industrial"
          ],
          "summary": "/industrial/vision/cameras/{camera_id}/programs",
          "operationId": "getVisionProgramsByCamera",
          "parameters": [
            {
              "$ref": "#/parameters/visionCameraIdParam"
            }
          ],
          "responses": {
            "200": {
              "description": "Returns programs configured on the camera.",
              "schema": {
                "$ref": "#/definitions/ProgramsForTheCameraResponse"
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/v1/industrial/vision/run/camera/{camera_id}": {
        "get": {
          "description": "Fetch the latest run for a camera or program by default. If startedAtMs is supplied, fetch the specific run that corresponds to that start time.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "Industrial"
          ],
          "summary": "/industrial/vision/run/camera/{camera_id}",
          "operationId": "getVisionLatestRunCamera",
          "parameters": [
            {
              "$ref": "#/parameters/visionCameraIdParam"
            },
            {
              "$ref": "#/parameters/visionProgramIdParam"
            },
            {
              "$ref": "#/parameters/visionStartAtMsParam"
            },
            {
              "$ref": "#/parameters/visionIncludeParam"
            },
            {
              "$ref": "#/parameters/visionLimitParam"
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the details for this run.",
              "schema": {
                "$ref": "#/definitions/VisionRunByCameraResponse"
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/v1/industrial/vision/runs": {
        "get": {
          "description": "Fetch runs.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "Industrial"
          ],
          "summary": "/industrial/vision/runs",
          "operationId": "getVisionRuns",
          "parameters": [
            {
              "$ref": "#/parameters/visionDurationMsParam"
            },
            {
              "$ref": "#/parameters/visionEndMsParam"
            }
          ],
          "responses": {
            "200": {
              "description": "Return runs.",
              "schema": {
                "$ref": "#/definitions/VisionRunsResponse"
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/v1/industrial/vision/runs/{camera_id}": {
        "get": {
          "description": "Fetch runs by camera.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "Industrial"
          ],
          "summary": "/industrial/vision/runs/{camera_id}",
          "operationId": "getVisionRunsByCamera",
          "parameters": [
            {
              "$ref": "#/parameters/visionCameraIdParam"
            },
            {
              "$ref": "#/parameters/visionDurationMsParam"
            },
            {
              "$ref": "#/parameters/visionEndMsParam"
            }
          ],
          "responses": {
            "200": {
              "description": "Return runs by cameraId.",
              "schema": {
                "$ref": "#/definitions/VisionRunsByCameraResponse"
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/v1/fleet/trips": {
        "get": {
          "description": "Get historical trips data for specified vehicle. This method returns a set of historical trips data for the specified vehicle in the specified time range.",
          "tags": [
            "Trips"
          ],
          "summary": "/fleet/trips",
          "operationId": "getFleetTrips",
          "parameters": [
            {
              "type": "integer",
              "format": "int64",
              "description": "Vehicle ID to query.",
              "name": "vehicleId",
              "in": "query",
              "required": true
            },
            {
              "type": "integer",
              "description": "Beginning of the time range, specified in milliseconds UNIX time. Limited to a 90 day window with respect to startMs and endMs",
              "name": "startMs",
              "in": "query",
              "required": true
            },
            {
              "type": "integer",
              "description": "End of the time range, specified in milliseconds UNIX time.",
              "name": "endMs",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "List of trips taken by the requested vehicle within the specified timeframe. Ongoing trips will be returned with 9223372036854775807 as their endMs.",
              "schema": {
                "$ref": "#/definitions/TripResponse"
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/v1/industrial/vision/runs/{camera_id}/{program_id}/{started_at_ms}": {
        "get": {
          "description": "Fetch runs by camera and program.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "Industrial"
          ],
          "summary": "/industrial/vision/runs/{camera_id}/{program_id}/{started_at_ms}",
          "operationId": "getVisionRunsByCameraAndProgram",
          "parameters": [
            {
              "$ref": "#/parameters/visionCameraIdParam"
            },
            {
              "$ref": "#/parameters/visionProgramIdPathParam"
            },
            {
              "$ref": "#/parameters/visionStartAtMsPathParam"
            },
            {
              "$ref": "#/parameters/visionIncludeParam"
            }
          ],
          "responses": {
            "200": {
              "description": "Return runs by camera ID and program ID.",
              "schema": {
                "$ref": "#/definitions/VisionRunsByCameraAndProgramResponse"
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/v1/machines/history": {
        "post": {
          "description": "Get historical data for machine objects. This method returns a set of historical data for all machines in a group",
          "tags": [
            "Industrial"
          ],
          "summary": "/machines/history",
          "operationId": "getMachinesHistory",
          "parameters": [
            {
              "description": "Group ID and time range to query for events",
              "name": "historyParam",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "required": [
                  "groupId",
                  "startMs",
                  "endMs"
                ],
                "properties": {
                  "endMs": {
                    "description": "End of the time range, specified in milliseconds UNIX time.",
                    "type": "integer",
                    "example": 1462881998034
                  },
                  "groupId": {
                    "description": "Optional group ID if the organization has multiple groups (uncommon).",
                    "type": "integer",
                    "format": "int64",
                    "example": 101
                  },
                  "startMs": {
                    "description": "Beginning of the time range, specified in milliseconds UNIX time.",
                    "type": "integer",
                    "example": 1462878398034
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of machine results objects, each containing a time and a datapoint.",
              "schema": {
                "$ref": "#/definitions/MachineHistoryResponse"
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/v1/machines/list": {
        "post": {
          "description": "Get machine objects. This method returns a list of the machine objects in the Samsara Cloud and information about them.",
          "tags": [
            "Industrial"
          ],
          "summary": "/machines/list",
          "operationId": "getMachines",
          "parameters": [],
          "responses": {
            "200": {
              "description": "List of machine objects.",
              "schema": {
                "type": "object",
                "properties": {
                  "machines": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Machine"
                    }
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/v1/sensors/cargo": {
        "post": {
          "description": "Get cargo monitor status (empty / full) for requested sensors.",
          "tags": [
            "Sensors"
          ],
          "summary": "/sensors/cargo",
          "operationId": "getSensorsCargo",
          "parameters": [
            {
              "$ref": "#/parameters/sensorParam"
            }
          ],
          "responses": {
            "200": {
              "description": "List of sensor objects containing the current cargo status reported by each sensor.",
              "schema": {
                "$ref": "#/definitions/CargoResponse"
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/v1/sensors/door": {
        "post": {
          "description": "Get door monitor status (closed / open) for requested sensors.",
          "tags": [
            "Sensors"
          ],
          "summary": "/sensors/door",
          "operationId": "getSensorsDoor",
          "parameters": [
            {
              "$ref": "#/parameters/sensorParam"
            }
          ],
          "responses": {
            "200": {
              "description": "List of sensor objects containing the current door status reported by each sensor.",
              "schema": {
                "$ref": "#/definitions/DoorResponse"
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/v1/sensors/history": {
        "post": {
          "description": "Get historical data for specified sensors. This method returns a set of historical data for the specified sensors in the specified time range and at the specified time resolution.",
          "tags": [
            "Sensors"
          ],
          "summary": "/sensors/history",
          "operationId": "getSensorsHistory",
          "parameters": [
            {
              "description": "Group ID, time range and resolution, and list of sensor ID, field pairs to query.",
              "name": "historyParam",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "required": [
                  "groupId",
                  "startMs",
                  "endMs",
                  "stepMs",
                  "series"
                ],
                "properties": {
                  "endMs": {
                    "description": "End of the time range, specified in milliseconds UNIX time.",
                    "type": "integer",
                    "example": 1462881998034
                  },
                  "fillMissing": {
                    "type": "string",
                    "default": "withNull",
                    "enum": [
                      "withNull",
                      "withPrevious"
                    ]
                  },
                  "groupId": {
                    "description": "Optional group ID if the organization has multiple groups (uncommon).",
                    "type": "integer",
                    "format": "int64",
                    "example": 101
                  },
                  "series": {
                    "type": "array",
                    "items": {
                      "description": "Sensor ID and field to query.",
                      "type": "object",
                      "required": [
                        "widgetId",
                        "field"
                      ],
                      "properties": {
                        "field": {
                          "description": "Field to query.",
                          "type": "string",
                          "enum": [
                            "ambientTemperature",
                            "cargoPercent",
                            "currentLoop1Raw",
                            "currentLoop1Mapped",
                            "currentLoop2Raw",
                            "currentLoop2Mapped",
                            "doorClosed",
                            "humidity",
                            "pmPowerTotal",
                            "pmPhase1Power",
                            "pmPhase2Power",
                            "pmPhase3Power",
                            "pmPhase1PowerFactor",
                            "pmPhase2PowerFactor",
                            "pmPhase3PowerFactor",
                            "probeTemperature"
                          ],
                          "example": "ambientTemperature"
                        },
                        "widgetId": {
                          "description": "Sensor ID to query.",
                          "type": "integer",
                          "format": "int64",
                          "example": 1
                        }
                      }
                    }
                  },
                  "startMs": {
                    "description": "Beginning of the time range, specified in milliseconds UNIX time.",
                    "type": "integer",
                    "example": 1462878398034
                  },
                  "stepMs": {
                    "description": "Time resolution for which data should be returned, in milliseconds. Specifying 3600000 will return data at hour intervals.",
                    "type": "integer",
                    "example": 3600000
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of results objects, each containing a time and a datapoint for each requested sensor/field pair.",
              "schema": {
                "$ref": "#/definitions/SensorHistoryResponse"
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/v1/sensors/humidity": {
        "post": {
          "description": "Get humidity for requested sensors. This method returns the current relative humidity for the requested sensors.",
          "tags": [
            "Sensors"
          ],
          "summary": "/sensors/humidity",
          "operationId": "getSensorsHumidity",
          "parameters": [
            {
              "$ref": "#/parameters/sensorParam"
            }
          ],
          "responses": {
            "200": {
              "description": "List of sensor objects containing the current humidity reported by each sensor.",
              "schema": {
                "$ref": "#/definitions/HumidityResponse"
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/v1/sensors/list": {
        "post": {
          "description": "Get sensor objects. This method returns a list of the sensor objects in the Samsara Cloud and information about them.",
          "tags": [
            "Sensors"
          ],
          "summary": "/sensors/list",
          "operationId": "getSensors",
          "parameters": [],
          "responses": {
            "200": {
              "description": "List of sensor objects.",
              "schema": {
                "type": "object",
                "properties": {
                  "sensors": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Sensor"
                    }
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/v1/sensors/temperature": {
        "post": {
          "description": "Get temperature for requested sensors. This method returns the current ambient temperature (and probe temperature if applicable) for the requested sensors.",
          "tags": [
            "Sensors"
          ],
          "summary": "/sensors/temperature",
          "operationId": "getSensorsTemperature",
          "parameters": [
            {
              "$ref": "#/parameters/sensorParam"
            }
          ],
          "responses": {
            "200": {
              "description": "List of sensor objects containing the current temperature reported by each sensor.",
              "schema": {
                "$ref": "#/definitions/TemperatureResponse"
              }
            },
            "default": {
              "description": "Unexpected error.",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
    },
    "definitions": {
      "Time": {
        "type": "string",
        "description": "UTC timestamp in RFC3339 milliseconds format.",
        "example": "2019-05-03T04:30:31.492Z"
      },
      "DriverDailyLogResponse": {
        "type": "object",
        "properties": {
          "days": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "activeHours": {
                  "description": "Hours spent on duty or driving, rounded to two decimal places.",
                  "type": "number",
                  "format": "double",
                  "example": 5.4
                },
                "activeMs": {
                  "description": "Milliseconds spent on duty or driving.",
                  "type": "integer",
                  "format": "int64",
                  "example": 691200
                },
                "certified": {
                  "description": "Whether this HOS day chart was certified by the driver.",
                  "type": "boolean"
                },
                "certifiedAtMs": {
                  "description": "Unix epoch time (in ms) of time when this chart was certified. If this chart is uncertified, 0.",
                  "type": "number",
                  "format": "int64"
                },
                "distanceMiles": {
                  "description": "Distance driven in miles, rounded to two decimal places.",
                  "type": "number",
                  "format": "double",
                  "example": 123.24
                },
                "endMs": {
                  "description": "End of the HOS day, specified in milliseconds UNIX time.",
                  "type": "integer",
                  "example": 1473836400000
                },
                "startMs": {
                  "description": "End of the HOS day, specified in milliseconds UNIX time.",
                  "type": "integer",
                  "example": 1473750000000
                },
                "trailerIds": {
                  "description": "List of trailer ID's associated with the driver for the day.",
                  "type": "object",
                  "format": "int64",
                  "example": [
                    10293,
                    192933
                  ]
                },
                "vehicleIds": {
                  "description": "List of vehicle ID's associated with the driver for the day.",
                  "type": "object",
                  "format": "int64",
                  "example": [
                    192319,
                    12958
                  ]
                }
              }
            }
          }
        }
      },
      "EngineState": {
        "type": "object",
        "description": "The state of the engine at a particular point in time. State can be Running, Off, or Idle.",
        "required": ["time", "state"],
        "properties": {
          "time": {
            "$ref": "#/definitions/Time"
          },
          "state": {
            "type": "string",
            "enum": ["Running", "Off", "Idle"]
          }
        }
      },
      "AuxInputReading": {
        "type": "object",
        "description": "Digital state of an aux input. When the value is true, the aux input is ON or ACTIVATED.",
        "required": ["time", "value"],
        "properties": {
          "time": {
            "$ref": "#/definitions/Time"
          },
          "value": {
            "type": "boolean",
            "description": "Boolean representing the digital value of the aux input.",
            "example": true
          }
        }
      },
      "AuxInputName": {
        "type": "string",
        "description": "The name of the aux input.",
        "example": "Boom",
        "enum": [
          "Emergency Lights",
          "Emergency Alarm",
          "Stop Paddle",
          "Power Take-Off",
          "Plow",
          "Sweeper",
          "Salter",
          "Boom"
        ]
      },
      "FuelConsumption": {
        "type": "object",
        "description":
          "Fuel consumption over time reported in milliliters. This is a running total of the fuel consumed.",
        "required": ["time", "milliliters"],
        "properties": {
          "time": {
            "$ref": "#/definitions/Time"
          },
          "milliliters": {
            "type": "number",
            "description":
              "The total amount of fuel consumed in the lifetime of this vehicle, reported in milliliters of fuel.",
            "format": "int64",
            "example": 78040628
          }
        }
      },
      "FuelPercent": {
        "type": "object",
        "description": "Fuel percent over time reported in decimal percent of available fuel.",
        "required": ["time", "percent"],
        "properties": {
          "time": {
            "$ref": "#/definitions/Time"
          },
          "percent": {
            "type": "number",
            "description":
              "The decimal percent of fuel available for this vehicle. A full gas tank will report 100 while an empty tank will be 0.",
            "format": "int64",
            "example": 79
          }
        }
      },
      "BatteryLevel": {
        "type": "object",
        "description": "Battery voltage reported in millivolts.",
        "required": ["time", "millivolts"],
        "properties": {
          "time": {
            "$ref": "#/definitions/Time"
          },
          "millivolts": {
            "type": "number",
            "description": "The battery voltage level, measured in millivolts.",
            "format": "int64",
            "example": 13500
          }
        }
      },
      "AuxInputSeries": {
        "type": "object",
        "description": "A list of aux input values over a timerange.",
        "required": ["name", "readings"],
        "properties": {
          "name": {
            "$ref": "#/definitions/AuxInputName"
          },
          "readings": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AuxInputReading"
            }
          }
        }
      },
      "OdometerSeries": {
        "type": "object",
        "description": "A listing of odometer history over time",
        "required": ["meters", "time"],
        "properties": {
          "meters": {
            "type": "number",
            "format": "int64",
            "description": "A combined odometer reading based on GPS and engine odometer data.",
            "example": 30949885
          },
          "time": {
            "$ref": "#/definitions/Time"
          }
        }
      },
      "VehicleGaugesHistoryWrapper": {
        "type": "object",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "vehicle": {
                "$ref": "#/definitions/vehicleTinyResponse"
              }
            }
          },
          {
            "$ref": "#/definitions/VehicleGaugeHistory"
          }
        ]
      },
      "VehicleGaugeHistory": {
        "type": "object",
        "properties": {
          "ignition": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EngineState"
            }
          },
          "fuelConsumption": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FuelConsumption"
            }
          },
          "fuelPercent": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FuelPercent"
            }
          },
          "odometer": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OdometerSeries"
            }
          },
          "auxInput1": {
            "$ref": "#/definitions/AuxInputSeries"
          },
          "auxInput2": {
            "$ref": "#/definitions/AuxInputSeries"
          }
        }
      },
      "AuxInputRealtimeReading": {
        "allOf": [
          {
            "$ref": "#/definitions/AuxInputReading"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "$ref": "#/definitions/AuxInputName"
              }
            }
          }
        ]
      },
      "VehicleGaugesListHistoryResponse": {
        "type": "object",
        "description": "List of vehicle stats for the specified time period.",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/VehicleGaugesHistoryWrapper"
            }
          },
          "pagination": {
            "$ref": "#/definitions/timeseriesPaginationResponse"
          }
        }
      },
      "Address": {
        "description": "Information about an address/geofence. Geofences are either a circle or a polygon.",
        "type": "object",
        "allOf": [
          {
            "required": [
              "id"
            ],
            "properties": {
              "contacts": {
                "description": "An array of all contact mini-objects that are associated with the given address entry.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/contactTinyResponse"
                }
              },
              "id": {
                "description": "Unique Samsara ID for the address",
                "type": "string",
                "example": "123"
              },
              "tags": {
                "description": "An array of all tag mini-objects that are associated with the given address entry.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/tagTinyResponse"
                }
              }
            }
          },
          {
            "$ref": "#/definitions/AddressCore"
          }
        ]
      },
      "AddressCore": {
        "description": "Core fields used in both address creation and the actual address object",
        "type": "object",
        "properties": {
          "addressTypes": {
            "description": "Types associated with the address.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "yard",
                "short_haul"
              ],
              "example": "yard"
            }
          },
          "externalIds": {
            "description": "Dictionary of external IDs (string key-value pairs)",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "customerId": "JSD8MKS"
            }
          },
          "formattedAddress": {
            "description": "The full address associated with this address/geofence, as it might be recognized by maps.google.com",
            "type": "string",
            "maxLength": 1024,
            "example": "350 Rhode Island St, San Francisco, CA"
          },
          "geofence": {
            "$ref": "#/definitions/AddressGeofence"
          },
          "name": {
            "description": "Name of the address. At most 255 characters.",
            "type": "string",
            "maxLength": 255,
            "example": "Samsara HQ"
          },
          "notes": {
            "description": "A notes field for addresses. At most 280 characters.",
            "type": "string",
            "maxLength": 280,
            "example": "Hours of operation: 8am - 6pm; Truck entrance on the Rhode Island street side."
          }
        }
      },
      "AddressCreate": {
        "description": "An address object",
        "type": "object",
        "allOf": [
          {
            "required": [
              "name",
              "formattedAddress",
              "geofence"
            ],
            "properties": {
              "contactIds": {
                "description": "An array of IDs of contacts to associate with this address",
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "123"
                }
              },
              "latitude": {
                "description": "Optional latitude field to override the geocoded latitude from the formatted address",
                "type": "number",
                "format": "double",
                "example": 37.765363
              },
              "longitude": {
                "description": "Optional longitude field to override the geocoded longitude from the formatted address",
                "type": "number",
                "format": "double",
                "example": 37.765363
              },
              "tagIds": {
                "description": "An array of IDs of tags to associate with this address",
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "321"
                }
              }
            }
          },
          {
            "$ref": "#/definitions/AddressCore"
          }
        ]
      },
      "AddressGeofence": {
        "description": "The geofence that defines this address and its bounds. This can either be a circle, or a polygon - only one key should be provided, depending on the geofence type.",
        "type": "object",
        "properties": {
          "circle": {
            "description": "Information about a circular geofence. This field is only populated if the geofence is a circle.",
            "type": "object",
            "properties": {
              "latitude": {
                "description": "The latitude of the center of the circular geofence in decimal degrees",
                "type": "number",
                "format": "double",
                "example": 37.765363
              },
              "longitude": {
                "description": "The longitude of the center of the circular geofence in decimal degrees",
                "type": "number",
                "format": "double",
                "example": -122.403098
              },
              "radiusMeters": {
                "description": "The radius of the circular geofence in meters.",
                "type": "number",
                "format": "integer",
                "example": 250
              }
            }
          },
          "polygon": {
            "description": "Information about a polygon geofence. This field is only populated if the geofence is a polygon.",
            "type": "object",
            "properties": {
              "vertices": {
                "description": "The vertices of the polygon geofence. These geofence vertices describe the perimeter of the polygon, and must consist of at least 3 vertices and less than 40.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "latitude": {
                      "description": "The latitude of a geofence vertex in decimal degrees",
                      "type": "number",
                      "format": "double",
                      "example": 37.765363
                    },
                    "longitude": {
                      "description": "The longitude of a geofence vertex in decimal degrees",
                      "type": "number",
                      "format": "double",
                      "example": -122.403098
                    }
                  }
                }
              }
            }
          }
        }
      },
      "AddressPatch": {
        "description": "Information about an address/geofence. Geofences are either a circle or a polygon.",
        "type": "object",
        "properties": {
          "contactIds": {
            "description": "An array of all contact ids to be associated with the given address entry.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "123"
            }
          },
          "externalIds": {
            "description": "Dictionary of external IDs (string key-value pairs)",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "customerId": "JSD8MKS"
            }
          },
          "formattedAddress": {
            "description": "The full address associated with this address/geofence, as it might be recognized by maps.google.com",
            "type": "string",
            "maxLength": 1024,
            "example": "350 Rhode Island St, San Francisco, CA"
          },
          "geofence": {
            "$ref": "#/definitions/AddressGeofence"
          },
          "name": {
            "description": "Name of the address",
            "type": "string",
            "maxLength": 255,
            "example": "Samsara HQ"
          },
          "notes": {
            "description": "A notes field for addresses",
            "type": "string",
            "maxLength": 280,
            "example": "This is a great address."
          },
          "tagIds": {
            "description": "An array of IDs of tags to associate with this address",
            "type": "array",
            "items": {
              "type": "string",
              "example": "321"
            }
          }
        }
      },
      "Contact": {
        "description": "Information about a notification contact for alerts.",
        "type": "object",
        "properties": {
          "email": {
            "description": "Email address of the contact.",
            "type": "string",
            "maxLength": 255,
            "example": "jane.jones@yahoo.com"
          },
          "firstName": {
            "description": "First name of the contact.",
            "type": "string",
            "maxLength": 255,
            "example": "Jane"
          },
          "id": {
            "description": "ID of the contact.",
            "type": "string",
            "example": "123"
          },
          "lastName": {
            "description": "Last name of the contact.",
            "type": "string",
            "maxLength": 255,
            "example": "Jones"
          },
          "phone": {
            "description": "Phone number of the contact.",
            "type": "string",
            "maxLength": 255,
            "example": "555-222-3344"
          }
        }
      },
      "ContactInput": {
        "description": "Information for adding a notification contact for alerts.",
        "type": "object",
        "properties": {
          "email": {
            "description": "Email address of the contact.",
            "type": "string",
            "maxLength": 255,
            "example": "jane.jones@yahoo.com"
          },
          "firstName": {
            "description": "First name of the contact.",
            "type": "string",
            "maxLength": 255,
            "example": "Jane"
          },
          "lastName": {
            "description": "Last name of the contact.",
            "type": "string",
            "maxLength": 255,
            "example": "Jones"
          },
          "phone": {
            "description": "Phone number of the contact.",
            "type": "string",
            "maxLength": 255,
            "example": "111-222-3344"
          }
        }
      },
      "Driver": {
        "description": "A driver object",
        "type": "object",
        "allOf": [
          {
            "properties": {
              "currentVehicle": {
                "$ref": "#/definitions/vehicleTinyResponse"
              },
              "id": {
                "description": "Samsara ID for the driver.",
                "type": "string",
                "example": "123"
              },
              "staticVehicleAssignment": {
                "$ref": "#/definitions/vehicleTinyResponse"
              },
              "tags": {
                "description": "The tags this driver belongs to.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/tagTinyResponse"
                }
              },
              "vehicleGroupTag": {
                "$ref": "#/definitions/tagTinyResponse"
              }
            }
          },
          {
            "$ref": "#/definitions/DriverBase"
          }
        ]
      },
      "DriverBase": {
        "description": "A driver object",
        "type": "object",
        "properties": {
          "carrierSettings": {
            "description": "Carrier for a given driver. If the driver's carrier differs from the general organization's carrier settings, the override value is used. Updating this value only updates the override setting for this driver.",
            "type": "object",
            "properties": {
              "carrierName": {
                "description": "Carrier for a given driver.",
                "type": "string",
                "maxLength": 255,
                "example": "Acme Inc."
              },
              "dotNumber": {
                "description": "Carrier US DOT Number. If this differs from the general organization's settings, the override value is used. Updating this value only updates the override setting for this driver.",
                "type": "integer",
                "format": "int64",
                "example": 98231
              },
              "mainOfficeAddress": {
                "description": "Main office address for a given driver. If this differs from the general organization's settings, the override value is used. ",
                "type": "string",
                "maxLength": 255,
                "example": "1234 Pear St., Scranton, PA 62814"
              }
            }
          },
          "eldAdverseWeatherExemptionEnabled": {
            "description": "Flag indicating this driver may use Adverse Weather exemptions in ELD logs.",
            "type": "boolean"
          },
          "eldBigDayExemptionEnabled": {
            "description": "Flag indicating this driver may use Big Day exemption in ELD logs.",
            "type": "boolean"
          },
          "eldDayStartHour": {
            "description": "`0` indicating midnight-to-midnight ELD driving hours, `12` to indicate noon-to-noon driving hours.",
            "type": "integer"
          },
          "eldExempt": {
            "description": "Flag indicating this driver is exempt from the Electronic Logging Mandate.",
            "type": "boolean"
          },
          "eldExemptReason": {
            "description": "Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).",
            "type": "string",
            "example": "Bad driver"
          },
          "eldPcEnabled": {
            "description": "Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.",
            "type": "boolean",
            "default": false
          },
          "eldYmEnabled": {
            "description": "Flag indicating this driver may select the Yard Move duty status in ELD logs.",
            "type": "boolean",
            "default": false
          },
          "externalIds": {
            "description": "User-defined dictionary of external IDs (string key-value pairs).",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "maintenanceId": "250020",
              "payrollId": "123"
            }
          },
          "isDeactivated": {
            "description": "A boolean that indicates whether or not this driver is deactivated.",
            "type": "boolean",
            "example": false
          },
          "licenseNumber": {
            "description": "Driver's state issued license number.",
            "type": "string",
            "example": "E1234567"
          },
          "licenseState": {
            "description": "Abbreviation of state that issued driver's license.",
            "type": "string",
            "example": "CA"
          },
          "locale": {
            "description": "Locale override (uncommon).",
            "type": "string",
            "enum": [
              "United States",
              "Austria",
              "Belgium",
              "Canada",
              "United Kingdom",
              "France",
              "Germany",
              "Ireland",
              "Luxembourg",
              "Mexico",
              "Netherlands",
              "Spain",
              "Switzerland"
            ]
          },
          "name": {
            "description": "Driver's name.",
            "type": "string",
            "maxLength": 255,
            "example": "Susan Jones"
          },
          "notes": {
            "description": "Notes about the driver.",
            "type": "string",
            "maxLength": 4096,
            "example": "Also goes by the nickname Furious Fred."
          },
          "phone": {
            "description": "Driver's phone number. Please include only digits, ex. 4157771234",
            "type": "string",
            "maxLength": 255,
            "example": "5558234327"
          },
          "timezone": {
            "description": "Home terminal timezone, in order to indicate what time zone should be used to calculate the ELD logs.",
            "type": "string",
            "example": "New York - EST/EDT"
          },
          "username": {
            "description": "Driver's login username into the driver app.",
            "type": "string",
            "maxLength": 189,
            "example": "Susan Jones"
          }
        }
      },
      "DriverCreate": {
        "description": "Driver that should be created.",
        "type": "object",
        "required": [
          "name",
          "username",
          "password"
        ],
        "properties": {
          "carrierSettings": {
            "description": "Carrier for a given driver. If the driver's carrier differs from the general organization's carrier settings, the override value is used. Updating this value only updates the override setting for this driver.",
            "type": "object",
            "properties": {
              "carrierName": {
                "description": "Carrier for a given driver.",
                "type": "string",
                "maxLength": 255,
                "example": "Acme Inc."
              },
              "dotNumber": {
                "description": "Carrier US DOT Number. If this differs from the general organization's settings, the override value is used. Updating this value only updates the override setting for this driver.",
                "type": "integer",
                "format": "int64",
                "example": 98231
              },
              "mainOfficeAddress": {
                "description": "Main office address for a given driver. If this differs from the general organization's settings, the override value is used. ",
                "type": "string",
                "maxLength": 255,
                "example": "1234 Pear St., Scranton, PA 62814"
              }
            }
          },
          "currentVehicleId": {
            "description": "ID of vehicle that driver is currently assigned to.",
            "type": "string",
            "example": "123"
          },
          "eldAdverseWeatherExemptionEnabled": {
            "description": "Flag indicating this driver may use Adverse Weather exemptions in ELD logs.",
            "type": "boolean"
          },
          "eldBigDayExemptionEnabled": {
            "description": "Flag indicating this driver may use Big Day exemption in ELD logs.",
            "type": "boolean"
          },
          "eldDayStartHour": {
            "description": "`0` indicating midnight-to-midnight ELD driving hours, `12` to indicate noon-to-noon driving hours.",
            "type": "integer"
          },
          "eldExempt": {
            "description": "Flag indicating this driver is exempt from the Electronic Logging Mandate.",
            "type": "boolean"
          },
          "eldExemptReason": {
            "description": "Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).",
            "type": "string",
            "example": "Bad driver"
          },
          "eldPcEnabled": {
            "description": "Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.",
            "type": "boolean",
            "default": false
          },
          "eldYmEnabled": {
            "description": "Flag indicating this driver may select the Yard Move duty status in ELD logs.",
            "type": "boolean",
            "default": false
          },
          "externalIds": {
            "description": "User-defined dictionary of external IDs (string key-value pairs).",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "maintenanceId": "250020",
              "payrollId": "123"
            }
          },
          "licenseNumber": {
            "description": "Driver's state issued license number.",
            "type": "string",
            "example": "E1234567"
          },
          "licenseState": {
            "description": "Abbreviation of state that issued driver's license.",
            "type": "string",
            "example": "CA"
          },
          "locale": {
            "description": "Locale override (uncommon).",
            "type": "string",
            "enum": [
              "United States",
              "Austria",
              "Belgium",
              "Canada",
              "United Kingdom",
              "France",
              "Germany",
              "Ireland",
              "Luxembourg",
              "Mexico",
              "Netherlands",
              "Spain",
              "Switzerland"
            ]
          },
          "name": {
            "description": "Driver's name.",
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "example": "Susan Jones"
          },
          "notes": {
            "description": "Notes about the driver.",
            "type": "string",
            "maxLength": 4096,
            "example": "Also goes by the nickname Furious Fred."
          },
          "password": {
            "description": "Password that the driver can use to login to the Samsara driver app.",
            "type": "string",
            "example": "aSecurePassword1234"
          },
          "phone": {
            "description": "Driver's phone number. Please include only digits, ex. 4157771234",
            "type": "string",
            "maxLength": 255,
            "example": "5558234327"
          },
          "staticVehicleAssignmentId": {
            "description": "ID of vehicle assigned to the driver for static vehicle assignments. (uncommon).",
            "type": "string",
            "example": "456"
          },
          "tagIds": {
            "description": "IDs of tags the driver is associated with.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "147"
            }
          },
          "timezone": {
            "description": "Home terminal timezone, in order to indicate what time zone should be used to calculate the ELD logs.",
            "type": "string",
            "example": "New York - EST/EDT"
          },
          "username": {
            "description": "Driver's login username into the driver app. The username may not contain spaces or the '@' symbol.",
            "type": "string",
            "maxLength": 189,
            "minLength": 1,
            "example": "Susan Jones"
          },
          "vehicleGroupTagId": {
            "description": "Tag ID which determines which vehicles a driver will see when selecting vehicles.",
            "type": "string",
            "example": "East Coast"
          }
        }
      },
      "DriverUpdate": {
        "description": "Driver that should be updated.",
        "type": "object",
        "allOf": [
          {
            "properties": {
              "currentVehicleId": {
                "description": "ID of vehicle that driver is currently assigned to.",
                "type": "string",
                "example": "123"
              },
              "password": {
                "description": "Password that the driver can use to login to the Samsara driver app.",
                "type": "string",
                "example": "aSecurePassword1234"
              },
              "staticVehicleAssignmentId": {
                "description": "ID of vehicle assigned to the driver for static vehicle assignments. (uncommon).",
                "type": "string",
                "example": "456"
              },
              "tagIds": {
                "description": "IDs of tags the driver is associated with.",
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "147"
                }
              },
              "vehicleGroupTagId": {
                "description": "Tag ID which determines which vehicles a driver will see when selecting vehicles.",
                "type": "string",
                "example": "East Coast"
              }
            }
          },
          {
            "$ref": "#/definitions/DriverBase"
          }
        ]
      },
      "EquipmentEngineState": {
        "description": "Stat point for the state of the engine.",
        "type": "object",
        "properties": {
          "time": {
            "$ref": "#/definitions/EquipmentTime"
          },
          "value": {
            "type": "string",
            "enum": [
              "Off",
              "On"
            ],
            "example": "On"
          }
        }
      },
      "EquipmentLocation": {
        "allOf": [
          {
            "$ref": "#/definitions/location"
          },
          {
            "type": "object",
            "required": [
              "time"
            ],
            "properties": {
              "time": {
                "$ref": "#/definitions/EquipmentTime"
              }
            }
          }
        ]
      },
      "EquipmentLocationsResponse": {
        "description": "List of equipment locations for the specified time period.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/definitions/equipmentTinyResponse"
          },
          {
            "description": "Location point for the equipment.",
            "type": "object",
            "properties": {
              "locations": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EquipmentLocation"
                }
              }
            }
          }
        ]
      },
      "EquipmentPaginationResponse": {
        "description": "Pagination parameters.",
        "type": "object",
        "required": [
          "endCursor",
          "hasNextPage"
        ],
        "properties": {
          "endCursor": {
            "description": "Cursor identifier representing the last element in the response. This value should be used in conjunction with a subsequent request's 'after' query parameter.",
            "type": "string",
            "format": "string",
            "example": "MjkY"
          },
          "hasNextPage": {
            "description": "True if there are more pages of results immediately available after this endCursor. Otherwise, wait nextPageAfter seconds before fetching the next page with endCursor.",
            "type": "boolean",
            "example": true
          }
        }
      },
      "EquipmentStatsResponse": {
        "description": "List of equipment stats for the specified time period.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/definitions/equipmentTinyResponse"
          },
          {
            "type": "object",
            "properties": {
              "engineStates": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EquipmentEngineState"
                }
              }
            }
          }
        ]
      },
      
      "CargoResponse": {
        "description": "Contains the current cargo status of a sensor.",
        "type": "object",
        "properties": {
          "groupId": {
            "type": "integer",
            "format": "int64",
            "example": 101
          },
          "sensors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "cargoEmpty": {
                  "description": "Flag indicating whether the current cargo is empty or loaded.",
                  "type": "boolean",
                  "example": true
                },
                "cargoStatusTime": {
                  "description": "The timestamp of reported cargo status, specified in RFC 3339 time.",
                  "type": "string",
                  "example": "2019-04-17T16:42:55Z"
                },
                "id": {
                  "description": "ID of the sensor.",
                  "type": "integer",
                  "format": "int64",
                  "example": 122
                },
                "name": {
                  "description": "Name of the sensor.",
                  "type": "string",
                  "example": "Trailer Cargo Sensor"
                },
                "trailerId": {
                  "description": "ID of the trailer associated with the sensor for the data point. If no trailer is connected, this parameter will not be reported.",
                  "type": "integer",
                  "example": 123
                },
                "vehicleId": {
                  "description": "ID of the vehicle associated with the sensor for the data point. If no vehicle is connected, this parameter will not be reported.",
                  "type": "integer",
                  "example": 124
                }
              }
            }
          }
        }
      },
      
      "DoorResponse": {
        "description": "Contains the current door status of a sensor.",
        "type": "object",
        "properties": {
          "groupId": {
            "type": "integer",
            "format": "int64",
            "example": 101
          },
          "sensors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "doorClosed": {
                  "description": "Flag indicating whether the current door is closed or open.",
                  "type": "boolean",
                  "example": true
                },
                "doorStatusTime": {
                  "description": "The timestamp of reported door status, specified in RFC 3339 time.",
                  "type": "string",
                  "example": "2019-04-17T16:42:55Z"
                },
                "id": {
                  "description": "ID of the sensor.",
                  "type": "integer",
                  "format": "int64",
                  "example": 122
                },
                "name": {
                  "description": "Name of the sensor.",
                  "type": "string",
                  "example": "Trailer Door Sensor"
                },
                "trailerId": {
                  "description": "ID of the trailer associated with the sensor for the data point. If no trailer is connected, this parameter will not be reported.",
                  "type": "integer",
                  "example": 123
                },
                "vehicleId": {
                  "description": "ID of the vehicle associated with the sensor for the data point. If no vehicle is connected, this parameter will not be reported.",
                  "type": "integer",
                  "example": 124
                }
              }
            }
          }
        }
      },
      "HumidityResponse": {
        "description": "Contains the current humidity of a sensor.",
        "type": "object",
        "properties": {
          "groupId": {
            "type": "integer",
            "format": "int64",
            "example": 101
          },
          "sensors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "humidity": {
                  "description": "Currently reported relative humidity in percent, from 0-100.",
                  "type": "integer",
                  "example": 53
                },
                "humidityTime": {
                  "description": "The timestamp of reported relative humidity, specified in RFC 3339 time.",
                  "type": "string",
                  "example": "2019-04-17T16:42:55Z"
                },
                "id": {
                  "description": "ID of the sensor.",
                  "type": "integer",
                  "format": "int64",
                  "example": 122
                },
                "name": {
                  "description": "Name of the sensor.",
                  "type": "string",
                  "example": "Freezer Humidity Sensor"
                },
                "trailerId": {
                  "description": "ID of the trailer associated with the sensor for the data point. If no trailer is connected, this parameter will not be reported.",
                  "type": "integer",
                  "example": 123
                },
                "vehicleId": {
                  "description": "ID of the vehicle associated with the sensor for the data point. If no vehicle is connected, this parameter will not be reported.",
                  "type": "integer",
                  "example": 124
                }
              }
            }
          }
        }
      },
      "Machine": {
        "description": "Contains information about a machine.",
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "ID of the machine.",
            "type": "integer",
            "format": "int64",
            "example": 123
          },
          "name": {
            "description": "Name of the machine.",
            "type": "string",
            "example": "Freezer ABC"
          },
          "notes": {
            "description": "Notes about the machine",
            "type": "string",
            "example": "This is in the left hallway behind the conveyor belt"
          }
        }
      },
      "MachineHistoryResponse": {
        "description": "Contains the results for a machine history request",
        "type": "object",
        "properties": {
          "machines": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "description": "Machine ID",
                  "type": "integer",
                  "example": 1
                },
                "name": {
                  "description": "Machine name",
                  "type": "string",
                  "example": "1/3 HP Motor"
                },
                "vibrations": {
                  "description": "List of vibration datapoints, with timestamp and vibration measurement for x/y/z axis in mm/s",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "X": {
                        "type": "number",
                        "format": "double",
                        "example": 0.01
                      },
                      "Y": {
                        "type": "number",
                        "format": "double",
                        "example": 1.23
                      },
                      "Z": {
                        "type": "number",
                        "format": "double",
                        "example": 2.55
                      },
                      "time": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1453449599999
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "EquipmentTime": {
        "description": "UTC timestamp of the time the data point was generated by the equipment, in RFC3339 format.",
        "type": "string",
        "example": "2019-05-03T04:30:31.492Z"
      },
      "EquipmentTimeSeriesPaginationResponse": {
        "description": "Pagination parameters for timeseries pages where results may be delayed.",
        "type": "object",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "nextPageAfter": {
                "description": "The number of seconds to wait before fetching the next page of results. Only populated if hasNextPage is false and additional pages may be available in the future. For example, if nextPageAfter=5, then wait 5 seconds before fetching the next page of results. If pagination is complete or hasNextPage=true, then nextPageAfter will be omitted.",
                "type": "integer",
                "example": 10
              }
            }
          },
          {
            "$ref": "#/definitions/EquipmentPaginationResponse"
          }
        ]
      },
      "LocationsWrapper": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "vehicle": {
                "$ref": "#/definitions/vehicleTinyResponse"
              }
            }
          },
          {
            "$ref": "#/definitions/location"
          },
          {
            "type": "object",
            "required": [
              "time"
            ],
            "properties": {
              "time": {
                "$ref": "#/definitions/time"
              }
            }
          }
        ]
      },
      "Message": {
        "type": "object",
        "required": [
          "driverId",
          "text"
        ],
        "properties": {
          "driverId": {
            "description": "ID of the driver for whom the message is sent to or sent by.",
            "type": "integer",
            "format": "int64",
            "example": 555
          },
          "text": {
            "description": "The text sent in the message.",
            "type": "string",
            "maxLength": 65533,
            "minLength": 1,
            "example": "This is a message."
          }
        }
      },
      "Messages": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Message"
        }
      },
      "OrgHarshEventsKondoResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "behaviorLabels": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "labelSource": {
                        "description": "Label source of the harsh event",
                        "type": "string",
                        "format": "string",
                        "example": "SYSTEM"
                      },
                      "labelType": {
                        "description": "Label type of the harsh event",
                        "type": "string",
                        "format": "string",
                        "example": "Braking"
                      }
                    }
                  }
                },
                "downloadForwardVideoUrl": {
                  "description": "Download forward video url",
                  "type": "string",
                  "format": "string",
                  "example": "samsara-dashcam-videos::3318/222/1499411220000/huKA7IhpBV-camera-video-segment-1244214895.mp4"
                },
                "downloadInwardVideoUrl": {
                  "description": "Download inward video url",
                  "type": "string",
                  "format": "string",
                  "example": "samsara-dashcam-videos::3318/222/1499411220000/huKA7IhpBV-camera-video-segment-1244214895.mp4"
                },
                "downloadTrackedInwardVideoUrl": {
                  "description": "Download tracked inward video url",
                  "type": "string",
                  "format": "string",
                  "example": "samsara-dashcam-videos::3318/222/1499411220000/huKA7IhpBV-camera-video-segment-1244214895.mp4"
                },
                "incidentReportUrl": {
                  "description": "Incident report url",
                  "type": "string",
                  "format": "string",
                  "example": "https://cloud.samsara.com/groups/4185/fleet/reports/safety/vehicle/222/incident/1499411220000"
                },
                "location": {
                  "type": "object",
                  "properties": {
                    "latitude": {
                      "description": "Longitude at which the harsh event happened",
                      "type": "number",
                      "format": "float",
                      "example": 37.762554666
                    },
                    "longitude": {
                      "description": "Longitude at which the harsh event happened",
                      "type": "number",
                      "format": "float",
                      "example": -122.409358166
                    }
                  }
                }
              }
            }
          }
        }
      },
      "OrgSafetyScoresResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "crashCount": {
                  "description": "Crash count",
                  "type": "integer",
                  "format": "int64",
                  "example": 1
                },
                "driverId": {
                  "description": "Driver Id",
                  "type": "integer",
                  "format": "int64",
                  "example": 319596
                },
                "harshAccelCount": {
                  "description": "Harsh accel count",
                  "type": "integer",
                  "format": "int64",
                  "example": 3
                },
                "harshBrakingCount": {
                  "description": "Harsh braking count",
                  "type": "integer",
                  "format": "int64",
                  "example": 5
                },
                "harshEventIdentifiers": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "eventTime": {
                        "description": "Event time, specified in RFC 3339",
                        "type": "string",
                        "format": "string",
                        "example": "2019-04-17T16:42:55Z"
                      },
                      "vehicleId": {
                        "description": "Vehicle Id",
                        "type": "integer",
                        "format": "int64",
                        "example": 212014918214656
                      }
                    }
                  }
                },
                "harshTurningCount": {
                  "description": "Harsh turning count",
                  "type": "integer",
                  "format": "int64",
                  "example": 10
                },
                "safetyScore": {
                  "description": "Vehicle/Driver Safety Score",
                  "type": "integer",
                  "format": "int64",
                  "example": 92
                },
                "safetyScoreRank": {
                  "description": "Vehicle/Driver Safety Rank",
                  "type": "integer",
                  "format": "int64",
                  "example": 7
                },
                "timeOverSpeedLimitMs": {
                  "description": "Overspeed limit time, specified in milliseconds UNIX time.",
                  "type": "integer",
                  "format": "int64",
                  "example": 123
                },
                "totalDistanceDrivenMeters": {
                  "description": "Total distance driven meters",
                  "type": "integer",
                  "format": "int64",
                  "example": 2509
                },
                "totalHarshEventCount": {
                  "description": "Total harsh event count",
                  "type": "integer",
                  "format": "int64",
                  "example": 20
                },
                "totalTimeDrivenMs": {
                  "description": "Total driver time, specified in milliseconds UNIX time.",
                  "type": "integer",
                  "format": "int64",
                  "example": 12343
                },
                "vehicleId": {
                  "description": "Vehicle Id",
                  "type": "integer",
                  "format": "int64",
                  "example": 212014918214656
                }
              }
            }
          }
        }
      },
      "Tag": {
        "allOf": [
          {
            "$ref": "#/definitions/TinyTag"
          },
          {
            "type": "object",
            "properties": {
              "addresses": {
                "description": "The addresses that belong to this tag.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/TaggedObject"
                }
              },
              "assets": {
                "description": "The trailers, unpowered, and powered assets that belong to this tag.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/TaggedObject"
                }
              },
              "drivers": {
                "description": "The drivers that belong to this tag.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/TaggedObject"
                }
              },
              "machines": {
                "description": "The machines that belong to thistag.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/TaggedObject"
                }
              },
              "parentTagId": {
                "description": "If this tag is part a hierarchical tag tree, this is the ID of the parent tag, otherwise this will be null.",
                "type": "string",
                "example": "Tag8389"
              },
              "sensors": {
                "description": "The sensors that belong to this tag.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/TaggedObject"
                }
              },
              "vehicles": {
                "description": "The vehicles that belong to this tag.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/TaggedObject"
                }
              }
            }
          }
        ]
      },
      "TagUpdate": {
        "type": "object",
        "properties": {
          "addresses": {
            "description": "The addresses that belong to this tag.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/TaggedObjectId"
            }
          },
          "assets": {
            "description": "The trailers, unpowered, and powered assets that belong to this tag.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/TaggedObjectId"
            }
          },
          "drivers": {
            "description": "The drivers that belong to this tag.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/TaggedObjectId"
            }
          },
          "machines": {
            "description": "The machines that belong to this tag.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/TaggedObjectId"
            }
          },
          "name": {
            "description": "Name of this tag.",
            "type": "string",
            "maxLength": 191,
            "minLength": 1,
            "example": "California"
          },
          "parentTagId": {
            "description": "If this tag is part a hierarchical tag tree, this is the ID of the parent tag, otherwise this will be null.",
            "type": "string",
            "example": "Tag8389"
          },
          "sensors": {
            "description": "The sensors that belong to this tag.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/TaggedObjectId"
            }
          },
          "vehicles": {
            "description": "The vehicles that belong to this tag.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/TaggedObjectId"
            }
          }
        }
      },
      "TaggedObject": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "$ref": "#/definitions/TaggedObjectId"
          },
          "name": {
            "description": "The object name.",
            "type": "string",
            "example": "My Favorite"
          }
        }
      },
      "TaggedObjectId": {
        "description": "The object ID.",
        "type": "string",
        "example": "Sensor1241"
      },
      "TinyTag": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique Samsara ID of this tag.",
            "type": "string",
            "example": "Tag6821"
          },
          "name": {
            "description": "Name of this tag.",
            "type": "string",
            "example": "California"
          }
        }
      },
      "UnassignedDrivingSegmentListResponse": {
        "description": "A list of driving segments with no associated driver(s).",
        "type": "array",
        "items": {
          "$ref": "#/definitions/UnassignedDrivingSegmentResponse"
        }
      },
      "UnassignedDrivingSegmentResponse": {
        "description": "A driving segment with no associated driver(s) that may or may not be in a unassigned, pending, rejected, or assigned states.",
        "type": "object",
        "properties": {
          "annotation": {
            "$ref": "#/definitions/annotation"
          },
          "createdAtTime": {
            "description": "The time that the server created the driving segment, specified in RFC 3339 format.",
            "type": "string",
            "format": "date-time",
            "example": "2019-04-17T16:43:00Z"
          },
          "driver": {
            "$ref": "#/definitions/driverTinyResponse"
          },
          "endTime": {
            "$ref": "#/definitions/endTimeBodyParam"
          },
          "id": {
            "description": "Unique identifier for the unassigned driving segment.",
            "type": "string",
            "format": "uuid",
            "example": "08b3aeada5f4ab3010c0b4efa28d2d1890dbf8d48d2d"
          },
          "startTime": {
            "$ref": "#/definitions/startTimeBodyParam"
          },
          "status": {
            "description": "Status of assignment for this segment.",
            "type": "string",
            "format": "string",
            "enum": [
              "PENDING",
              "ACCEPTED",
              "REJECTED",
              "UNASSIGNED",
              "UNKNOWN"
            ],
            "example": "PENDING"
          },
          "vehicle": {
            "$ref": "#/definitions/vehicleTinyResponse"
          }
        }
      },
      "User": {
        "description": "A user object",
        "type": "object",
        "required": [
          "id",
          "authType",
          "name",
          "roles"
        ],
        "properties": {
          "authType": {
            "description": "The authentication type the user uses to authenticate. To use SAML this organization must have a configured SAML integration.",
            "type": "string",
            "enum": [
              "default",
              "saml"
            ]
          },
          "id": {
            "description": "Unique ID for the user.",
            "type": "string",
            "example": "123"
          },
          "name": {
            "description": "The first and last name of the user.",
            "type": "string",
            "example": "Bob Smith"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UserRoleResponse"
            }
          }
        }
      },
      "UserCreate": {
        "description": "The user creation arguments",
        "type": "object",
        "required": [
          "name",
          "email",
          "authType",
          "roles"
        ],
        "properties": {
          "authType": {
            "description": "The authentication type the user uses to authenticate. To use SAML this organization must have a configured SAML integration.",
            "type": "string",
            "enum": [
              "default",
              "saml"
            ]
          },
          "email": {
            "description": "The email address of this user. This cannot be changed after creation.",
            "type": "string",
            "maxLength": 191,
            "example": "example@email.com"
          },
          "name": {
            "description": "The first and last name of the user.",
            "type": "string",
            "maxLength": 255,
            "example": "Bob Smith"
          },
          "roles": {
            "description": "The roles for this user. Users must have at least a single role to be a part of an organization.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/UserRoleInput"
            }
          }
        }
      },
      "UserRole": {
        "description": "A user role object.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/definitions/userRoleTinyResponse"
          }
        ]
      },
      "UserRoleInput": {
        "type": "object",
        "required": [
          "roleId"
        ],
        "properties": {
          "roleId": {
            "description": "The id of the role the user has been granted.",
            "type": "string",
            "example": "8a9371af-82d1-4158-bf91-4ecc8d3a114c"
          },
          "tagId": {
            "description": "The id of the tag used to grant a role. If no tag is specified, this role applies at the organization level.",
            "type": "string",
            "example": "8a9371af-82d1-4158-bf91-4ecc8d3a114c"
          }
        }
      },
      "UserRoleResponse": {
        "description": "A user role",
        "type": "object",
        "properties": {
          "role": {
            "$ref": "#/definitions/userRoleTinyResponse"
          },
          "tag": {
            "$ref": "#/definitions/tagTinyResponse"
          }
        }
      },
      "UserUpdate": {
        "description": "The user update arguments",
        "type": "object",
        "properties": {
          "authType": {
            "description": "The authentication type the user uses to authenticate. To use SAML this organization must have a configured SAML integration.",
            "type": "string",
            "enum": [
              "default",
              "saml"
            ]
          },
          "name": {
            "description": "The first and last name of the user.",
            "type": "string",
            "maxLength": 255,
            "example": "Bob Smith"
          },
          "roles": {
            "description": "The roles for this user. Users must have at least a single role to be a part of an organization.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/UserRoleInput"
            }
          }
        }
      },
      "VehicleListResponse": {
        "description": "Response for retreiving a list of vehicles.",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/VehicleResponse"
            }
          },
          "pagination": {
            "$ref": "#/definitions/paginationResponse"
          }
        }
      },
      "VehicleLocationsListResponse": {
        "description": "List of vehicle locations for the specified time period.",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LocationsWrapper"
            }
          },
          "pagination": {
            "$ref": "#/definitions/timeseriesPaginationResponse"
          }
        }
      },
      "VehicleResponse": {
        "description": "The vehicle object.",
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "assignedDriver": {
            "$ref": "#/definitions/driverTinyResponse"
          },
          "auxInputType1": {
            "description": "The type of aux input that this vehicle has connected to port 1.",
            "type": "string",
            "enum": [
              "Emergency Lights",
              "Emergency Alarm",
              "Stop Paddle",
              "Power Take-Off",
              "Plow",
              "Sweeper",
              "Salter",
              "Boom"
            ],
            "example": "Boom"
          },
          "auxInputType2": {
            "description": "The type of aux input that this vehicle has connected to port 2.",
            "type": "string",
            "enum": [
              "Emergency Lights",
              "Emergency Alarm",
              "Stop Paddle",
              "Power Take-Off",
              "Plow",
              "Sweeper",
              "Salter",
              "Boom"
            ],
            "example": "Plow"
          },
          "engineHours": {
            "description": "Vehicle's engine hours.",
            "type": "integer",
            "example": 8002
          },
          "fuelLevelPercent": {
            "description": "Vehicle's current fuel level, as a whole number percent in range 0-100, inclusive.",
            "type": "integer",
            "example": 95
          },
          "harshAccelSetting": {
            "description": "Enumeration of the harsh acceleration setting types. This setting influences the acceleration sensitivity from which a harsh event is triggered. If set to `Off`, then no harsh events are triggered for the vehicle.",
            "type": "string",
            "enum": [
              "Passenger",
              "Light Truck",
              "Heavy",
              "Off",
              "Auto"
            ],
            "example": "Off"
          },
          "id": {
            "description": "Unique Samsara ID for the vehicle.",
            "type": "string",
            "example": "112"
          },
          "licensePlate": {
            "description": "The license plate of this vehicle.",
            "type": "string",
            "example": "XHK1234"
          },
          "make": {
            "description": "Vehicle's manufacturing make.",
            "type": "string",
            "example": "Ford"
          },
          "model": {
            "description": "Vehicle's manufacturing model.",
            "type": "string",
            "example": "F150"
          },
          "name": {
            "description": "Name of the vehicle.",
            "type": "string",
            "example": "Truck A7"
          },
          "notes": {
            "description": "Notes about a vehicle. Samsara supports a maximum of 255 chars.",
            "type": "string",
            "maxLength": 255,
            "example": "These are notes about this given vehicle."
          },
          "odometerMeters": {
            "description": "Vehicle's current odometer in meters.",
            "type": "integer",
            "example": 160934
          },
          "tags": {
            "description": "An array of all tag mini-objects that are associated with the given vehicle.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/tagTinyResponse"
            }
          },
          "vin": {
            "description": "A vehicle identification number.",
            "type": "string",
            "example": "1FUJA6BD31LJ09646"
          },
          "year": {
            "description": "Vehicle's manufacturing year.",
            "type": "string",
            "example": "2008"
          }
        }
      },
      "annotation": {
        "description": "Annotation for the driving segment.",
        "type": "string",
        "format": "string",
        "example": "Yard move."
      },
      "contactTinyResponse": {
        "description": "A minified contact object",
        "type": "object",
        "properties": {
          "firstName": {
            "description": "First name of the contact.",
            "type": "string",
            "example": "Jane"
          },
          "id": {
            "description": "ID of the contact.",
            "type": "string",
            "example": "123"
          },
          "lastName": {
            "description": "Last name of the contact.",
            "type": "string",
            "example": "Jones"
          }
        }
      },
      "driverId": {
        "description": "ID of Driver to assign this segment to. The driver assignment is a tentative assignment until the ID is 'ACCEPTED'.",
        "type": "string",
        "example": "1234"
      },
      "driverTinyResponse": {
        "description": "A minified driver object.",
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of the driver.",
            "type": "string",
            "example": "88668"
          },
          "name": {
            "description": "Name of the driver.",
            "type": "string",
            "example": "Susan Bob"
          }
        }
      },
      "endTimeBodyParam": {
        "description": "End time of the driving segment, specified in RFC 3339 format.",
        "type": "string",
        "format": "date-time",
        "example": "2019-04-17T16:42:55Z"
      },
      "equipmentTinyResponse": {
        "description": "A minified equipment object.",
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "ID of the equipment.",
            "type": "string",
            "example": "123456789"
          },
          "name": {
            "description": "Name of the equipment.",
            "type": "string",
            "example": "40' crane #5"
          }
        }
      },
      "location": {
        "description": "Location object",
        "type": "object",
        "required": [
          "latitude",
          "longitude"
        ],
        "properties": {
          "addresses": {
            "description": "Array of address mini-objects, in which the given lat/long coordinates falls within the address's geofence borders. If the location is not within any geofence, then this value will not appear",
            "type": "array",
            "items": {
              "description": "Address book entry, if one exists",
              "type": "object",
              "properties": {
                "id": {
                  "description": "Address book identifier",
                  "type": "string",
                  "example": "123"
                },
                "name": {
                  "description": "Name of this address book entry",
                  "type": "string",
                  "example": "Main Distribution Warehouse"
                }
              }
            }
          },
          "latitude": {
            "description": "GPS latitude represented in degrees",
            "type": "number",
            "format": "double",
            "example": 122.142
          },
          "longitude": {
            "description": "GPS longitude represented in degrees",
            "type": "number",
            "format": "double",
            "example": -93.343
          }
        }
      },
      "paginationResponse": {
        "description": "Pagination parameters.",
        "type": "object",
        "required": [
          "endCursor",
          "hasNextPage"
        ],
        "properties": {
          "endCursor": {
            "description": "Cursor identifier representing the last element in the response. This value should be used in conjunction with a subsequent request's 'after' query parameter.",
            "type": "string",
            "format": "string",
            "example": "MjkY"
          },
          "hasNextPage": {
            "description": "True if there are more pages of results immediately available after this endCursor. Otherwise, wait nextPageAfter seconds before fetching the next page with endCursor.",
            "type": "boolean",
            "example": true
          }
        }
      },
      "standardErrorResponse": {
        "description": "Standard error response.",
        "type": "object",
        "properties": {
          "message": {
            "description": "The message of the error.",
            "example": "Bad request",
            "type": "string"
          },
          "requestId": {
            "description": "The ID of the request.",
            "example": "jsd8wWh",
            "type": "string"
          }
        }
      },
      "ErrorResponse": {
        "description": "Old error response.",
        "type": "string",
        "example": "Bad request"
      },
      
      "TemperatureResponse": {
        "description": "Contains the current temperatures of a sensor.",
        "type": "object",
        "properties": {
          "groupId": {
            "type": "integer",
            "format": "int64",
            "example": 101
          },
          "sensors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "ambientTemperature": {
                  "description": "Currently reported ambient temperature in millidegrees celsius.",
                  "type": "integer",
                  "example": 11057
                },
                "ambientTemperatureTime": {
                  "description": "The timestamp of reported ambient temperature, specified in RFC 3339 time.",
                  "type": "string",
                  "example": "2019-04-17T16:42:55Z"
                },
                "id": {
                  "description": "ID of the sensor.",
                  "type": "integer",
                  "format": "int64",
                  "example": 122
                },
                "name": {
                  "description": "Name of the sensor.",
                  "type": "string",
                  "example": "Freezer Temp Sensor"
                },
                "probeTemperature": {
                  "description": "Currently reported probe temperature in millidegrees celsius. If no probe is connected, this parameter will not be reported.",
                  "type": "integer",
                  "example": -20145
                },
                "probeTemperatureTime": {
                  "description": "The timestamp of reported probe temperature, specified in RFC 3339 time.",
                  "type": "string",
                  "example": "2019-04-17T16:42:55Z"
                },
                "trailerId": {
                  "description": "ID of the trailer associated with the sensor for the data point. If no trailer is connected, this parameter will not be reported.",
                  "type": "integer",
                  "example": 123
                },
                "vehicleId": {
                  "description": "ID of the vehicle associated with the sensor for the data point. If no vehicle is connected, this parameter will not be reported.",
                  "type": "integer",
                  "example": 124
                }
              }
            }
          }
        }
      },
      "VisionRunsByCameraResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "deviceId": {
              "type": "integer",
              "format": "int64",
              "example": 1234512345123
            },
            "endedAtMs": {
              "type": "integer",
              "format": "int64",
              "example": 0
            },
            "program": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "example": "Barcode verification program"
                }
              }
            },
            "reportMetadata": {
              "type": "object",
              "properties": {
                "itemsPerMinute": {
                  "type": "number",
                  "format": "float64",
                  "example": 0.1
                },
                "noReadCount": {
                  "type": "integer",
                  "format": "int64",
                  "example": 0
                },
                "rejectCount": {
                  "type": "integer",
                  "format": "int64",
                  "example": 0
                },
                "successCount": {
                  "type": "integer",
                  "format": "int64",
                  "example": 181
                }
              }
            },
            "startedAtMs": {
              "type": "integer",
              "format": "int64",
              "example": 1553808606097
            }
          }
        }
      },
      
      "Sensor": {
        "description": "Contains information about a sensor.",
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "ID of the sensor.",
            "type": "integer",
            "format": "int64",
            "example": 123
          },
          "macAddress": {
            "description": "MAC address of the sensor.",
            "type": "string",
            "example": "11:11:11:11:11:11"
          },
          "name": {
            "description": "Name of the sensor.",
            "type": "string",
            "example": "Freezer ABC"
          }
        }
      },
      "SensorHistoryResponse": {
        "description": "Contains the results for a sensor history request. Each result contains a timestamp and datapoint for each requested (sensor, field) pair.",
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "series": {
                  "description": "List of datapoints, one for each requested (sensor, field) pair.",
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1
                  }
                },
                "timeMs": {
                  "description": "Timestamp in UNIX milliseconds.",
                  "type": "integer",
                  "example": 1453449599999
                }
              }
            }
          }
        }
      },
      
      "VisionRunsByCameraAndProgramResponse": {
        "type": "object",
        "properties": {
          "deviceId": {
            "type": "integer",
            "format": "int64",
            "example": 1234512345123
          },
          "endedAtMs": {
            "type": "integer",
            "format": "int64",
            "example": 0
          },
          "programId": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "reportMetadata": {
            "type": "object",
            "properties": {
              "itemsPerMinute": {
                "type": "number",
                "format": "float64",
                "example": 0.1
              },
              "noReadCount": {
                "type": "integer",
                "format": "int64",
                "example": 0
              },
              "rejectCount": {
                "type": "integer",
                "format": "int64",
                "example": 0
              },
              "successCount": {
                "type": "integer",
                "format": "int64",
                "example": 181
              }
            }
          },
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "captureAtMs": {
                  "type": "number",
                  "format": "float64",
                  "example": 1553811994730
                },
                "result": {
                  "type": "string",
                  "example": "PASS"
                },
                "stepResults": {
                  "$ref": "#/definitions/VisionStepResults"
                }
              }
            }
          },
          "startedAtMs": {
            "type": "integer",
            "format": "int64",
            "example": 1553808606097
          }
        }
      },
      "VisionRunByCameraResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "deviceId": {
              "type": "integer",
              "format": "int64",
              "example": 1234512345123
            },
            "endedAtMs": {
              "type": "integer",
              "format": "int64",
              "example": 0
            },
            "program": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "example": "Barcode verification program"
                }
              }
            },
            "reportMetadata": {
              "type": "object",
              "properties": {
                "itemsPerMinute": {
                  "type": "number",
                  "format": "float64",
                  "example": 0.1
                },
                "noReadCount": {
                  "type": "integer",
                  "format": "int64",
                  "example": 0
                },
                "rejectCount": {
                  "type": "integer",
                  "format": "int64",
                  "example": 0
                },
                "successCount": {
                  "type": "integer",
                  "format": "int64",
                  "example": 181
                }
              }
            },
            "startedAtMs": {
              "type": "integer",
              "format": "int64",
              "example": 1553808606097
            }
          }
        }
      },
      
      "ProgramsForTheCameraResponse": {
        "description": "Contains the list of Programs configured on the given Camera.",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "programId": {
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "programName": {
              "type": "string",
              "example": "Barcode verification program"
            }
          }
        }
      },
      
      "VisionCamerasResponse": {
        "description": "Contains the list of Cameras installed in the org.",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "cameraId": {
              "type": "integer",
              "format": "int64",
              "example": 1234512345999
            },
            "cameraName": {
              "type": "string",
              "example": "Line 32"
            },
            "ethernetIp": {
              "type": "string",
              "example": "10.1.2.34"
            },
            "wifiIp": {
              "type": "string",
              "example": "10.1.2.35"
            }
          }
        }
      },
      
      "DataInputHistoryResponse": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "description": "The ID of this data input",
            "type": "integer",
            "format": "int64",
            "example": 12345
          },
          "name": {
            "description": "Name of this data input",
            "type": "string",
            "example": "Pump Flow"
          },
          "points": {
            "description": "Data points from this data input",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "timeMs": {
                  "type": "integer",
                  "format": "int64",
                  "example": 1453449599999
                },
                "value": {
                  "type": "number",
                  "format": "double",
                  "example": 12.332
                }
              }
            }
          }
        }
      },
      "VisionRunsResponse": {
        "type": "object",
        "properties": {
          "visionRuns": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "deviceId": {
                  "type": "integer",
                  "format": "int64",
                  "example": 1234512345123
                },
                "endedAtMs": {
                  "type": "integer",
                  "format": "int64",
                  "example": 0
                },
                "programId": {
                  "type": "integer",
                  "format": "int64",
                  "example": 1
                },
                "reportMetadata": {
                  "type": "object",
                  "properties": {
                    "failedScansCount": {
                      "type": "integer",
                      "format": "int64",
                      "example": 0
                    },
                    "noReadScansCount": {
                      "type": "integer",
                      "format": "int64",
                      "example": 181
                    },
                    "scanRate": {
                      "type": "number",
                      "format": "float64",
                      "example": 0.1
                    },
                    "successfulScansCount": {
                      "type": "integer",
                      "format": "int64",
                      "example": 181
                    }
                  }
                },
                "startedAtMs": {
                  "type": "integer",
                  "format": "int64",
                  "example": 1553808606097
                }
              }
            }
          }
        }
      },
      "VisionStepResults": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "barcode": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "contents": {
                    "type": "string",
                    "example": "10855639004823"
                  },
                  "matchString": {
                    "type": "string",
                    "example": "10855639004823"
                  },
                  "type": {
                    "type": "string",
                    "example": "EAN8"
                  }
                }
              }
            },
            "booleanLogic": {
              "type": "object",
              "properties": {
                "operator": {
                  "type": "string",
                  "example": "AND"
                },
                "steps": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "Expiration Date"
                      },
                      "result": {
                        "type": "string",
                        "example": "PASS"
                      }
                    }
                  }
                }
              }
            },
            "distance": {
              "type": "object",
              "properties": {
                "distanceFound": {
                  "description": "The distance (in pixels) found between the start and end references",
                  "type": "integer",
                  "format": "int64",
                  "example": 1000
                },
                "endStepName": {
                  "description": "The name of the second reference step that we're checking the distances between",
                  "type": "string",
                  "example": "Bottom Right Square"
                },
                "enforceOffsetAngleRange": {
                  "description": "Whether an offset angle range is enforced",
                  "type": "boolean",
                  "example": true
                },
                "maxDistance": {
                  "description": "The maximum allowed distance threshold (in pixels)",
                  "type": "integer",
                  "format": "int64",
                  "example": 900
                },
                "maxOffsetAngle": {
                  "description": "The maximum angle allowance (in degrees) if enforceOffsetAngleRange is true",
                  "type": "integer",
                  "format": "int64",
                  "example": 90
                },
                "minDistance": {
                  "description": "The minumum allowed distance threshold (in pixels)",
                  "type": "integer",
                  "format": "int64",
                  "example": 1500
                },
                "minOffsetAngle": {
                  "description": "The minimum angle allowance (in degrees) if enforceOffsetAngleRange is true",
                  "type": "integer",
                  "format": "int64",
                  "example": 45
                },
                "offsetAngleFound": {
                  "description": "The counter-clockwise angle (in degrees) found between the horizontal axis of the start reference step and the last",
                  "type": "integer",
                  "format": "int64",
                  "example": 50
                },
                "startStepName": {
                  "description": "The name of the first reference step that we're checking the distances between",
                  "type": "string",
                  "example": "Top Left Square"
                }
              }
            },
            "expirationDate": {
              "type": "object",
              "properties": {
                "dateOffset": {
                  "type": "integer",
                  "format": "int64",
                  "example": 1
                },
                "foundDate": {
                  "type": "string",
                  "example": "06/13/2019"
                },
                "matchDate": {
                  "type": "string",
                  "example": "06/13/2019"
                }
              }
            },
            "findCopies": {
              "type": "object",
              "properties": {
                "angleTolerance": {
                  "description": "The orientation angle tolerance (+/- °)",
                  "type": "integer",
                  "format": "int64",
                  "example": 10
                },
                "foundCount": {
                  "description": "The number of copies found",
                  "type": "integer",
                  "format": "int64",
                  "example": 1
                },
                "maxCount": {
                  "description": "The maximum number of copies allowed",
                  "type": "integer",
                  "format": "int64",
                  "example": 5
                },
                "minCount": {
                  "description": "The minimum number of copies allowed",
                  "type": "integer",
                  "format": "int64",
                  "example": 1
                },
                "threshold": {
                  "description": "The minimum required similarity (in %) of a found copy compared to the configured match region",
                  "type": "integer",
                  "format": "int64",
                  "example": 70
                }
              }
            },
            "findShapes": {
              "type": "object",
              "properties": {
                "foundCount": {
                  "type": "integer",
                  "format": "int32",
                  "example": 1
                },
                "maxCount": {
                  "type": "integer",
                  "format": "int32",
                  "example": 5
                },
                "minCount": {
                  "type": "integer",
                  "format": "int32",
                  "example": 1
                }
              }
            },
            "fixture": {
              "type": "object",
              "properties": {
                "coordinates": {
                  "type": "object",
                  "properties": {
                    "x": {
                      "type": "integer",
                      "format": "int32",
                      "example": 10
                    },
                    "y": {
                      "type": "integer",
                      "format": "int32",
                      "example": 10
                    }
                  }
                },
                "found": {
                  "type": "boolean",
                  "example": true
                },
                "rotationDegrees": {
                  "type": "integer",
                  "format": "int64",
                  "example": 90
                }
              }
            },
            "labelMatch": {
              "type": "object",
              "properties": {
                "score": {
                  "type": "integer",
                  "format": "int64",
                  "example": 10
                },
                "threshold": {
                  "type": "integer",
                  "format": "int64",
                  "example": 10
                }
              }
            },
            "name": {
              "type": "string",
              "example": "Chicken Caesar Label"
            },
            "presenceAbsence": {
              "type": "object",
              "properties": {
                "blueRange": {
                  "type": "object",
                  "properties": {
                    "high": {
                      "type": "integer",
                      "format": "int64",
                      "example": 150
                    },
                    "low": {
                      "type": "integer",
                      "format": "int64",
                      "example": 90
                    }
                  }
                },
                "checkForAbsence": {
                  "type": "boolean",
                  "example": true
                },
                "grayscaleRange": {
                  "type": "object",
                  "properties": {
                    "high": {
                      "type": "integer",
                      "format": "int64",
                      "example": 100
                    },
                    "low": {
                      "type": "integer",
                      "format": "int64",
                      "example": 20
                    }
                  }
                },
                "greenRange": {
                  "type": "object",
                  "properties": {
                    "high": {
                      "type": "integer",
                      "format": "int64",
                      "example": 150
                    },
                    "low": {
                      "type": "integer",
                      "format": "int64",
                      "example": 90
                    }
                  }
                },
                "hueRange": {
                  "type": "object",
                  "properties": {
                    "high": {
                      "type": "integer",
                      "format": "int64",
                      "example": 100
                    },
                    "low": {
                      "type": "integer",
                      "format": "int64",
                      "example": 20
                    }
                  }
                },
                "redRange": {
                  "type": "object",
                  "properties": {
                    "high": {
                      "type": "integer",
                      "format": "int64",
                      "example": 150
                    },
                    "low": {
                      "type": "integer",
                      "format": "int64",
                      "example": 90
                    }
                  }
                },
                "saturationRange": {
                  "type": "object",
                  "properties": {
                    "high": {
                      "type": "integer",
                      "format": "int64",
                      "example": 50
                    },
                    "low": {
                      "type": "integer",
                      "format": "int64",
                      "example": 10
                    }
                  }
                },
                "score": {
                  "type": "integer",
                  "format": "int64",
                  "example": 50
                },
                "threshold": {
                  "type": "integer",
                  "format": "int64",
                  "example": 50
                },
                "valueRange": {
                  "type": "object",
                  "properties": {
                    "high": {
                      "type": "integer",
                      "format": "int64",
                      "example": 50
                    },
                    "low": {
                      "type": "integer",
                      "format": "int64",
                      "example": 10
                    }
                  }
                }
              }
            },
            "result": {
              "type": "string",
              "example": "PASS"
            },
            "textMatch": {
              "type": "object",
              "properties": {
                "foundText": {
                  "type": "string",
                  "example": "TFNJ"
                },
                "matchString": {
                  "type": "string",
                  "example": "TFNJ"
                }
              }
            }
          }
        }
      },
      "startTimeBodyParam": {
        "description": "Start time of the driving segment, specified in RFC 3339 format.",
        "type": "string",
        "format": "date-time",
        "example": "2019-04-17T15:42:55Z"
      },
      "tagTinyResponse": {
        "description": "A minified tag object",
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of the tag.",
            "type": "string",
            "example": "123"
          },
          "name": {
            "description": "Name of the tag.",
            "type": "string",
            "example": "East Coast"
          }
        }
      },
      
      "TripResponse": {
        "description": "Contains the trips for the vehicle in the requested timeframe. A trip is represented as an object that contains startMs, startLocation, startAddress, startCoordinates, endMs, endLocation, endAddress and endCoordinates. Ongoing trips will be returned with 9223372036854775807 as their endMs.",
        "type": "object",
        "properties": {
          "trips": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "assetIds": {
                  "description": "List of associated asset IDs",
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "example": [
                    122
                  ]
                },
                "codriverIds": {
                  "description": "List of codriver IDs",
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "example": [
                    122
                  ]
                },
                "distanceMeters": {
                  "description": "Length of the trip in meters.",
                  "type": "integer",
                  "example": 2500
                },
                "driverId": {
                  "description": "ID of the driver.",
                  "type": "integer",
                  "example": 719
                },
                "endAddress": {
                  "description": "Text representation of nearest identifiable location to the end (latitude, longitude) coordinates.",
                  "type": "object",
                  "properties": {
                    "address": {
                      "description": "The formatted address",
                      "type": "string",
                      "example": "123 Main St, Sunnyvale, CA 94089"
                    },
                    "id": {
                      "description": "The ID of the address",
                      "type": "number",
                      "format": "int64",
                      "example": 581
                    },
                    "name": {
                      "description": "The name of the address",
                      "type": "string",
                      "example": "Ramen Tatsunoya"
                    }
                  }
                },
                "endCoordinates": {
                  "description": "End (latitude, longitude) in decimal degrees.",
                  "type": "object",
                  "properties": {
                    "latitude": {
                      "type": "number",
                      "format": "double",
                      "example": 23.413702345
                    },
                    "longitude": {
                      "type": "number",
                      "format": "double",
                      "example": -91.502888123
                    }
                  }
                },
                "endLocation": {
                  "description": "Geocoded street address of start (latitude, longitude) coordinates.",
                  "type": "string",
                  "example": "571 S Lake Ave, Pasadena, CA 91101"
                },
                "endMs": {
                  "description": "End of the trip in UNIX milliseconds. Ongoing trips are indicated by an endMs value of 9223372036854775807.",
                  "type": "integer",
                  "example": 1462881998034
                },
                "endOdometer": {
                  "description": "Odometer reading (in meters) at the end of the trip.",
                  "type": "integer",
                  "example": 210430500
                },
                "fuelConsumedMl": {
                  "description": "Amount in milliliters of fuel consumed on this trip.",
                  "type": "integer",
                  "example": 75700
                },
                "startAddress": {
                  "description": "Text representation of nearest identifiable location to the start (latitude, longitude) coordinates.",
                  "type": "object",
                  "properties": {
                    "address": {
                      "description": "The formatted address",
                      "type": "string",
                      "example": "123 Main St, Sunnyvale, CA 94089"
                    },
                    "id": {
                      "description": "The ID of the address",
                      "type": "number",
                      "format": "int64",
                      "example": 581
                    },
                    "name": {
                      "description": "The name of the address",
                      "type": "string",
                      "example": "Ramen Tatsunoya"
                    }
                  }
                },
                "startCoordinates": {
                  "description": "Start (latitude, longitude) in decimal degrees.",
                  "type": "object",
                  "properties": {
                    "latitude": {
                      "type": "number",
                      "format": "double",
                      "example": 29.443702345
                    },
                    "longitude": {
                      "type": "number",
                      "format": "double",
                      "example": -98.502888123
                    }
                  }
                },
                "startLocation": {
                  "description": "Geocoded street address of start (latitude, longitude) coordinates.",
                  "type": "string",
                  "example": "16 N Fair Oaks Ave, Pasadena, CA 91103"
                },
                "startMs": {
                  "description": "Beginning of the trip in UNIX milliseconds.",
                  "type": "integer",
                  "example": 1462878398034
                },
                "startOdometer": {
                  "description": "Odometer reading (in meters) at the beginning of the trip.",
                  "type": "integer",
                  "example": 210430450
                },
                "tollMeters": {
                  "description": "Length in meters trip spent on toll roads.",
                  "type": "integer",
                  "example": 32000
                }
              }
            }
          }
        }
      },
      
      "HosAuthenticationLogsResponse": {
        "type": "object",
        "properties": {
          "authenticationLogs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "actionType": {
                  "description": "The log type - one of 'signin' or 'signout'",
                  "type": "string",
                  "example": "signin"
                },
                "address": {
                  "description": "DEPRECATED: THIS FIELD IS NOT POPULATED",
                  "type": "string",
                  "example": "THIS FIELD IS NOT USED"
                },
                "addressName": {
                  "description": "DEPRECATED: THIS FIELD IS NOT POPULATED",
                  "type": "string",
                  "example": "THIS FIELD IS NOT USED"
                },
                "city": {
                  "description": "DEPRECATED: THIS FIELD IS NOT POPULATED",
                  "type": "string",
                  "example": "THIS FIELD IS NOT USED"
                },
                "happenedAtMs": {
                  "description": "The time at which the event was recorded in UNIX milliseconds.",
                  "type": "integer",
                  "format": "int64",
                  "example": 1462881998034
                },
                "state": {
                  "description": "DEPRECATED: THIS FIELD IS NOT POPULATED",
                  "type": "string",
                  "example": "THIS FIELD IS NOT USED"
                }
              }
            }
          }
        }
      },
      "HosLogsResponse": {
        "type": "object",
        "properties": {
          "logs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "codriverIds": {
                  "type": "array",
                  "items": {
                    "description": "Ids of codrivers during any of the logged trips",
                    "type": "number",
                    "example": 445
                  }
                },
                "driverId": {
                  "description": "ID of the driver.",
                  "type": "integer",
                  "format": "int64",
                  "example": 444
                },
                "groupId": {
                  "description": "ID of the group.",
                  "type": "integer",
                  "format": "int64",
                  "example": 101
                },
                "hosStatusType": {
                  "description": "The Hours of Service status type. One of `OFF_DUTY`, `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`, `PERSONAL_CONVEYANCE`.",
                  "type": "string",
                  "example": "OFF_DUTY"
                },
                "locCity": {
                  "description": "City in which the log was recorded.",
                  "type": "string",
                  "example": "Ahwatukee"
                },
                "locLat": {
                  "description": "Latitude at which the log was recorded.",
                  "type": "number",
                  "format": "float",
                  "example": 23.413702345
                },
                "locLng": {
                  "description": "Longitude at which the log was recorded.",
                  "type": "number",
                  "format": "float",
                  "example": -98.502888123
                },
                "locName": {
                  "description": "Name of location at which the log was recorded.",
                  "type": "string",
                  "example": "McLean Site A"
                },
                "locState": {
                  "description": "State in which the log was recorded.",
                  "type": "string",
                  "example": "Arizona"
                },
                "logStartMs": {
                  "description": "The time at which the log/HOS status started in UNIX milliseconds.",
                  "type": "integer",
                  "format": "int64",
                  "example": 1462881998034
                },
                "remark": {
                  "description": "Remark associated with the log entry.",
                  "type": "string",
                  "example": "Lunch Break"
                },
                "vehicleId": {
                  "description": "ID of the vehicle.",
                  "type": "integer",
                  "format": "int64",
                  "example": 112
                }
              }
            }
          }
        }
      },
      "HosLogsSummaryResponse": {
        "type": "object",
        "properties": {
          "drivers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "currentDutyStatusCode": {
                  "description": "The Hours of Service status type.",
                  "type": "string",
                  "enum": [
                    "AUTO_DUTY",
                    "DRIVING",
                    "OFF_DUTY",
                    "ON_DUTY",
                    "PERSONAL_CONVEYANCE",
                    "SLEEPER_BED",
                    "YARD_MOVE",
                    "WAITING_TIME"
                  ],
                  "example": "OFF_DUTY"
                },
                "cycleRemaining": {
                  "description": "The amount of remaining cycle time (in ms).",
                  "type": "integer",
                  "format": "int64",
                  "example": 252000000
                },
                "cycleTomorrow": {
                  "description": "The amount of cycle time (in ms) available tomorrow.",
                  "type": "integer",
                  "format": "int64",
                  "example": 252000000
                },
                "driveMsToday": {
                  "description": "The amount of driving time today (in ms).",
                  "type": "number",
                  "format": "int64",
                  "example": 252000000
                },
                "driverId": {
                  "description": "ID of the driver.",
                  "type": "integer",
                  "format": "int64",
                  "example": 444
                },
                "driverName": {
                  "description": "Name of the driver.",
                  "type": "string",
                  "example": "Fred Jacobs"
                },
                "drivingInViolationCycle": {
                  "description": "The amount of driving time in violation in this cycle (in ms).",
                  "type": "integer",
                  "format": "int64",
                  "example": 50400000
                },
                "drivingInViolationToday": {
                  "description": "The amount of driving time in violation today (in ms).",
                  "type": "integer",
                  "format": "int64",
                  "example": 39600000
                },
                "onDutyMsToday": {
                  "description": "The amount of on duty time today (in ms).",
                  "type": "number",
                  "format": "int64",
                  "example": 252000000
                },
                "pendingDriveMsToday": {
                  "description": "The amount of driving time today for pending logs (in ms).",
                  "type": "number",
                  "format": "int64",
                  "example": 252000000
                },
                "pendingOnDutyMsToday": {
                  "description": "The amount of on duty time today for pending logs (in ms).",
                  "type": "number",
                  "format": "int64",
                  "example": 252000000
                },
                "shiftDriveRemaining": {
                  "description": "The amount of remaining shift drive time (in ms).",
                  "type": "integer",
                  "format": "int64",
                  "example": 39600000
                },
                "shiftRemaining": {
                  "description": "The amount of remaining shift time (in ms).",
                  "type": "integer",
                  "format": "int64",
                  "example": 50400000
                },
                "timeInCurrentStatus": {
                  "description": "The amount of time (in ms) that the driver has been in the current `dutyStatus`.",
                  "type": "integer",
                  "format": "int64",
                  "example": 5000
                },
                "timeUntilBreak": {
                  "description": "The amount of time (in ms) remaining until the driver cannot drive without a rest break.",
                  "type": "integer",
                  "format": "int64",
                  "example": 28800000
                },
                "vehicleName": {
                  "description": "Name of the vehicle.",
                  "type": "string",
                  "example": "Vehicle 1"
                }
              }
            }
          }
        }
      },
      "Document": {
        "type": "object",
        "description": "Document",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique Samsara UUID for the document"
          },
          "notes": {
            "type": "string",
            "description": "Notes"
          },
          "createdAtTime": {
            "type": "string",
            "description": "createdAtTime"
          },
          "fields": {
            "type": "array",
            "description": "Fields",
            "items": {
              "type": "object",
              "description": "item",
              "properties": {
                "label": {
                  "type": "string",
                  "description": "label"
                },
                "fieldType": {
                  "type": "string",
                  "description": "valueType",
                  "example": "Photo | Number | String | MultipleChoice"
                },
                "numberField": {
                  "type": "number",
                  "description": "number value",
                  "example": 100
                },
                "stringField": {
                  "type": "string",
                  "description": "string type",
                  "example": "hello"
                },
                "photoField": {
                  "type": "string",
                  "description": "url for photo",
                  "example": "www.images.com/img.png"
                },
                "multipleChoiceField": {
                  "type": "array",
                  "description": "multiple choices",
                  "items": {
                    "type": "object",
                    "description": "mc items",
                    "properties": {
                      "selected": {
                        "type": "boolean",
                        "description": "selected",
                        "example": false
                      },
                      "label": {
                        "type": "string",
                        "description": "label",
                        "example": "Answer choice 1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "time": {
        "description": "UTC timestamp in RFC 3339 milliseconds format.",
        "type": "string",
        "example": "2019-05-03T04:30:31.492Z"
      },
      "timeseriesPaginationResponse": {
        "description": "Pagination parameters for timeseries pages where results may be delayed.",
        "type": "object",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "nextPageAfter": {
                "description": "The number of seconds to wait before fetching the next page of results. Only populated if hasNextPage is false and additional pages may be available in the future. For example, if nextPageAfter=5, then wait 5 seconds before fetching the next page of results. If pagination is complete or hasNextPage=true, then nextPageAfter will be omitted.",
                "type": "integer",
                "example": 5
              }
            }
          },
          {
            "description": "Pagination parameters.",
            "type": "object",
            "required": [
              "endCursor",
              "hasNextPage"
            ],
            "properties": {
              "endCursor": {
                "description": "Cursor identifier representing the last element in the response. This value should be used in conjunction with a subsequent request's 'after' query parameter.",
                "type": "string",
                "format": "string",
                "example": "MjkY"
              },
              "hasNextPage": {
                "description": "True if there are more pages of results immediately available after this endCursor. Otherwise, wait nextPageAfter seconds before fetching the next page with endCursor.",
                "type": "boolean",
                "example": true
              }
            }
          }
        ]
      },
      "userRoleTinyResponse": {
        "description": "A minified user role object.",
        "type": "object",
        "properties": {
          "id": {
            "description": "The unique ID for the role.",
            "type": "string",
            "example": "8a9371af-82d1-4158-bf91-4ecc8d3a114c"
          },
          "name": {
            "description": "The name of the role.",
            "type": "string",
            "example": "Full Admin"
          }
        }
      },
      "vehicleTinyResponse": {
        "description": "A minified vehicle object.",
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of the vehicle.",
            "type": "string",
            "example": "123456789"
          },
          "name": {
            "description": "Name of the vehicle.",
            "type": "string",
            "example": "Midwest Truck #4"
          }
        }
      }
    },
    "parameters": {
      "createContactParam": {
        "description": "Add a contact.",
        "name": "contact",
        "in": "body",
        "required": true,
        "schema": {
          "$ref": "#/definitions/ContactInput"
        }
      },
      "createMessagesParam": {
        "description": "Text to send to a list of driverIds.",
        "name": "createMessages",
        "in": "body",
        "required": true,
        "schema": {
          "type": "object",
          "required": [
            "driverIds",
            "text"
          ],
          "properties": {
            "driverIds": {
              "description": "IDs of the drivers for whom the messages are sent to.",
              "type": "array",
              "items": {
                "type": "number",
                "format": "int64",
                "example": 555
              },
              "example": [
                111,
                222,
                333
              ]
            },
            "text": {
              "description": "The text sent in the message.",
              "type": "string",
              "maxLength": 65533,
              "minLength": 1,
              "example": "This is a message."
            }
          }
        }
      },
      "endTimeQueryParam": {
        "type": "string",
        "format": "date-time",
        "description": "End of the filter time range, specified in RFC 3339 format. (Example: 2019-06-13T19:08:25Z) Filters based on the server timestamp, i.e. createAtTime.",
        "name": "endTime",
        "in": "query"
      },
      "startTimeQueryParam": {
        "type": "string",
        "format": "date-time",
        "description": "Beginning of the filter time range, specified in RFC 3339 format. (Example: 2019-06-13T18:08:25Z) Filters based on the server timestamp, i.e. createAtTime.",
        "name": "startTime",
        "in": "query"
      },
      "sensorParam": {
        "description": "List of sensor IDs to query.",
        "name": "sensorParam",
        "in": "body",
        "required": true,
        
        "schema": {
          "type": "object",
          "required": [
            "sensors"
          ],
          "properties": {
            "sensors": {
              "description": "List of sensor IDs to query.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              },
              "example": [
                122
              ]
            }
          }
        }
      },
      
      "visionCameraIdParam": {
        "type": "integer",
        "format": "int64",
        "description": "The camera_id should be valid for the given accessToken.",
        "name": "camera_id",
        "in": "path",
        "required": true
      },
      "visionDurationMsParam": {
        "type": "integer",
        "format": "int64",
        "description": "DurationMs is a required param. This works with the EndMs parameter. Indicates the duration in which the visionRuns will be fetched",
        "name": "durationMs",
        "in": "query",
        "required": true
      },
      "visionEndMsParam": {
        "type": "integer",
        "format": "int64",
        "description": "EndMs is an optional param. It will default to the current time.",
        "name": "endMs",
        "in": "query"
      },
      "visionIncludeParam": {
        "type": "string",
        "description": "Include is a filter parameter. Accepts 'pass', 'reject' or 'no_read'.",
        "name": "include",
        "in": "query"
      },
      "visionLimitParam": {
        "type": "integer",
        "format": "int64",
        "description": "Limit is an integer value from 1 to 1,000.",
        "name": "limit",
        "in": "query"
      },
      "visionProgramIdParam": {
        "type": "integer",
        "format": "int64",
        "description": "The configured program's ID on the camera.",
        "name": "program_id",
        "in": "query"
      },
      "visionProgramIdPathParam": {
        "type": "integer",
        "format": "int64",
        "description": "The configured program's ID on the camera.",
        "name": "program_id",
        "in": "path",
        "required": true
      },
      "visionStartAtMsParam": {
        "type": "integer",
        "format": "int64",
        "description": "EndMs is an optional param. It will default to the current time.",
        "name": "startedAtMs",
        "in": "query"
      },
      "visionStartAtMsPathParam": {
        "type": "integer",
        "format": "int64",
        "description": "Started_at_ms is a required param. Indicates the start time of the run to be fetched.",
        "name": "started_at_ms",
        "in": "path",
        "required": true
      },
      "dataInputEndTimeParam": {
        "type": "integer",
        "format": "int64",
        "description": "Timestamp in unix milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Defaults to nowMs.",
        "name": "endMs",
        "in": "query"
      },
      "dataInputIdParam": {
        "type": "integer",
        "format": "int64",
        "description": "ID of the data input. Must contain only digits 0-9.",
        "name": "data_input_id",
        "in": "path",
        "required": true
      },
      "dataInputStartTimeParam": {
        "type": "integer",
        "format": "int64",
        "description": "Timestamp in unix milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. defaults to nowMs.",
        "name": "startMs",
        "in": "query"
      }
    },
    "tags": [
      {
        "description": "Access to vehicle data",
        "name": "Vehicles"
      },
      {
        "description": "Access to driver data",
        "name": "Drivers"
      },
      {
        "description": "Coming soon!",
        "name": "Trailers"
      },
      {
        "description": "Coming soon!",
        "name": "Routes"
      },
      {
        "description": "Documents are assigned lorum ipsum whatnots.",
        "name": "Documents"
      },
      {
        "description": "Access to driver messages",
        "name": "Messages"
      },
      {
        "description": "Safety is cool",
        "name": "Safety"
      },
      {
        "description": "Coming soon!",
        "name": "Trips"
      },
      {
        "description": "Access to tags data",
        "name": "Tags"
      },
      {
        "description": "Contacts can be setup in order to send alerts via SMS text or email to individuals in your organization. You can retrieve a list of all contacts, or you can fetch each contact individually.",
        "name": "Contacts"
      },
      {
        "description": "Access to addresses",
        "name": "Addresses"
      },
      {
        "description": "Access to admin user data",
        "name": "Users"
      },
      {
        "description": "Access to asset specific data",
        "name": "Assets"
      },
      {
        "description": "Access to equipment data",
        "name": "Equipment"
      },
      {
        "description": "Access to sensor data",
        "name": "Sensors"
      },
      {
        "description": "Endpoints to help you manage US and Canada Hours of Service",
        "name": "Compliance"
      },
      {
        "description": "Access to industrial data",
        "name": "Industrial"
      }
    ]
  }