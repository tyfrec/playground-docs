{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "<n class=\"info\">\n<nh>\n<i class=\"fa fa-info-circle\"></i>\nSomething new!\n</nh>\n<nb>\nAt Samsara, we're committed to delivering the best functionality to help you achieve your business goals. We heard your feedback from our v1 API, and we're excited to provide you with the new official Samsara Open API. You can read more about this new API on our [Samsara Open API Release FAQ page](#).<br>\n<br>\nIf you would like to access the existing API docs, you can still do so at this link: [Samara V1 API](https://www.samsara.com/api).<br>\n<br>\n*Note: This is an API preview, and not a final API spec. Samsara is making this available to outside parties to gather feedback, but we do not recommend coding directly against this API just yet. Samsara reserves the right to make breaking changes until the APIâ€™s full release.*<br>\n<br>\n*Note: Because this is a still a new set of APIs, we have not transitioned all resources over to this standard quite yet. Resources that still use the V1 standards will be indicated.*\n</nb>\n</n>\n\n# Overview\n\nCheck out our guides and FAQs [here](#)!\n\nWelcome intro goes here.\n\n## Endpoints\n\nAll our APIs can be accessed through HTTP requests to URLs like:\n\n```\nhttps://api.samsara.com/<endpoint>\n```\n\n<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nNote\n</nh>\n<nb>\nIf the endpoint is still on V1, the URL will be: `https://api.samsara.com/v1/<endpoint>`\n</nb>\n</n>\n\n## Authentication\n\nAuthentication info goes here\n\n## Request Methods\n\nRequest method info goes here\n\n## Response Codes\n\nResponse code info goes here.\n\n### Error Responses\n\nError response info goes here.\n\n<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nNote\n</nh>\n<nb>\nV1 may have different response codes.\n</nb>\n</n>\n\n## Versioning\n\nVersioning info goes here.\n\n<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nNote\n</nh>\n<nb>\nWarning about V1 versioning.\n</nb>\n</n>\n\n## Common Structures\n\n### Pagination\n\nPagination info here.\n\n<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nNote\n</nh>\n<nb>\nWarning about V1 pagination.\n</nb>\n</n>\n\n### Timestamps\n\nInfo about timestamps here.\n\n<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nNote\n</nh>\n<nb>\nWarning about V1 timestamps.\n</nb>\n</n>\n\n## Guides and FAQs\n\nCheck out our guides and FAQs [here](#)!\n",
    "title": "Samsara API",
    "version": "1.0.0"
  },
  "host": "api.samsara.com",
  "paths": {
    "/addresses": {
      "get": {
        "description": "Returns a list of all addresses in an organization",
        "tags": [
          "Addresses"
        ],
        "summary": "List all addresses",
        "operationId": "getAddresses",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 0,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all addresses in the organization",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Address"
                  }
                },
                "pagination": {
                  "$ref": "#/definitions/paginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new address in the organization",
        "tags": [
          "Addresses"
        ],
        "summary": "Create an address",
        "operationId": "createAddress",
        "parameters": [
          {
            "description": "The address to create.",
            "name": "address",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AddressCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created address object with ID",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Address"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/addresses/{id}": {
      "get": {
        "description": "Returns a specific address.",
        "tags": [
          "Addresses"
        ],
        "summary": "Get information about a specific address",
        "operationId": "getAddressById",
        "responses": {
          "200": {
            "description": "Newly created address object with ID",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Address"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete a specific address.",
        "tags": [
          "Addresses"
        ],
        "summary": "Delete a specific address",
        "operationId": "deleteAddressById",
        "responses": {
          "204": {
            "description": "Empty success body"
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Update a specific address.",
        "tags": [
          "Addresses"
        ],
        "summary": "Update information about a specific address",
        "operationId": "updateAddressById",
        "parameters": [
          {
            "description": "The address fields to update.",
            "name": "address",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AddressPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated address object with ID.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Address"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique Samsara ID for the address",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/contacts": {
      "get": {
        "description": "Returns a list of all contacts in an organization.",
        "tags": [
          "Contacts"
        ],
        "summary": "List all contacts",
        "operationId": "getContacts",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 0,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all contacts",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Contact"
                  }
                },
                "pagination": {
                  "$ref": "#/definitions/paginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Add a contact to the organization",
        "tags": [
          "Contacts"
        ],
        "summary": "Add a contact to the organization",
        "operationId": "createContact",
        "parameters": [
          {
            "description": "Add a contact.",
            "name": "contact",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact was successfully added.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Contact"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/contacts/{id}": {
      "get": {
        "description": "Get a specific contact's information.",
        "tags": [
          "Contacts"
        ],
        "summary": "Get a contact's information",
        "operationId": "getContactById",
        "responses": {
          "200": {
            "description": "Returns the specified contact.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Contact"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete the given contact.",
        "tags": [
          "Contacts"
        ],
        "summary": "Delete a contact",
        "operationId": "deleteContactById",
        "responses": {
          "204": {
            "description": "Returns an empty success response.",
            "schema": {}
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Update a specific contact's information.",
        "tags": [
          "Contacts"
        ],
        "summary": "Update a contact's information",
        "operationId": "updateContactById",
        "parameters": [
          {
            "description": "Updates to the contact.",
            "name": "contact",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ContactInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated contact object with given ID.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Contact"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique identifier for the contact.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/fleet/drivers/document_types": {
      "get": {
        "description": "Get all document types.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Documents"
        ],
        "summary": "Get all document types.",
        "operationId": "getDriverDocumentTypesByOrgId",
        "responses": {
          "200": {
            "description": "Returns all of the document types.",
            "schema": {
              "$ref": "#/definitions/DocumentTypes"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/drivers/documents": {
      "get": {
        "description": "Get all documents.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Documents"
        ],
        "summary": "Get all documents.",
        "operationId": "getDriverDocumentsByOrgId",
        "parameters": [
          {
            "$ref": "#/parameters/documentsEndMsParam"
          },
          {
            "$ref": "#/parameters/documentsDurationMsParam"
          },
          {
            "$ref": "#/parameters/documentQueryByParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all of the documents.",
            "schema": {
              "$ref": "#/definitions/Documents"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/drivers/{driver_id}/documents": {
      "post": {
        "description": "Create a driver document for the given driver.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Documents"
        ],
        "summary": "Create a driver document for the given driver.",
        "operationId": "createDriverDocument",
        "parameters": [
          {
            "$ref": "#/parameters/documentCreateParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the created document.",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "description": "ID of the driver for whom the document is created. Must contain only digits 0-9.",
          "name": "driver_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/fleet/drivers/{driver_id}/documents/{document_id}": {
      "get": {
        "description": "Get a specific document for a specific driver.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Documents"
        ],
        "summary": "Get a specific document for a specific driver.",
        "operationId": "getDriverDocumentByIdAndDriverId",
        "responses": {
          "200": {
            "description": "Returns the specified document.",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "description": "ID of the driver who submitted the document. Must contain only digits 0-9.",
          "name": "driver_id",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "ID of document.",
          "name": "document_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/fleet/drivers": {
      "get": {
        "description": "Get all drivers in organization.",
        "tags": [
          "Drivers"
        ],
        "summary": "List all drivers",
        "operationId": "getDrivers",
        "parameters": [
          {
            "type": "boolean",
            "description": "Filter only for inactive drivers. This parameter will default to false if not provided.",
            "name": "isInactive",
            "in": "query"
          },
          {
            "maximum": 512,
            "minimum": 0,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of tag IDs.",
            "name": "tagIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all driver objects.",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Driver"
                  }
                },
                "pagination": {
                  "$ref": "#/definitions/paginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Add a driver to the organization.",
        "tags": [
          "Drivers"
        ],
        "summary": "Create a driver",
        "operationId": "createDriver",
        "parameters": [
          {
            "description": "The driver to create.",
            "name": "driver",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DriverCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created driver object, with Samsara-generated ID.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Driver"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/drivers/safety-scores": {
      "get": {
        "description": "Fetch safety scores for all drivers in the organization in a given time period.",
        "tags": [
          "Safety"
        ],
        "summary": "Fetch all safety scores by driver",
        "operationId": "getOrgDriverSafetyScores",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "description": "Beginning of the time range, specified in RFC 3339 time.",
            "name": "startTime",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "string",
            "description": "End of the time range, specified in RFC 3339 time.",
            "name": "endTime",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Safety scores for all vehicles in the organization",
            "schema": {
              "$ref": "#/definitions/OrgSafetyScoresResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/drivers/{id}": {
      "get": {
        "description": "Get information about a driver.",
        "tags": [
          "Drivers"
        ],
        "summary": "Get a driver",
        "operationId": "getDriverById",
        "responses": {
          "200": {
            "description": "Returns the specified driver.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Driver"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Update a specific driver's information. This can also be used to activate or de-activate a given driver",
        "tags": [
          "Drivers"
        ],
        "summary": "Update driver properties",
        "operationId": "updateDriverById",
        "parameters": [
          {
            "description": "Updates to the driver properties.",
            "name": "driver",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DriverUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated driver object, with ID.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Driver"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of the driver. This can either be the Samsara-specified ID, or an external ID.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/fleet/equipment/locations": {
      "get": {
        "description": "This endpoint allows you to both fetch historical locations for all equipment as well as a feed of all new equipment locations.\n\nIf you wish to just fetch historical location data, you can pass in a startTime and endTime range. This will return all location data points ingested by Samsara during the given time range. Note that there may be certain data points within the response with a timestamp before the startTime, in the case that there is a connectivity lag between the asset and the server.",
        "tags": [
          "Equipment"
        ],
        "summary": "Fetch locations for all equipment",
        "operationId": "getEquipmentLocationsHistory",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "startTime",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "endTime",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of tag IDs.",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of equipment IDs.",
            "name": "equipmentIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all equipment location objects and pagination parameters",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EquipmentLocationsResponse"
                  }
                },
                "pagination": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/definitions/EquipmentTimeSeriesPaginationResponse"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/equipment/stats": {
      "get": {
        "description": "This endpoint allows you to both fetch historical stats for all equipment as well as a feed of all new equipment stats.\n\nIf you wish to just fetch historical stat data, you can pass in a startTime and endTime range. This will return all stat data points ingested by Samsara during the given time range. Note that there may be certain data points within the response with a timestamp before the startTime, in the case that there is a connectivity lag between the asset and the server.",
        "tags": [
          "Equipment"
        ],
        "summary": "Fetch stats for all equipment",
        "operationId": "getEquipmentStatsHistory",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "startTime",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "endTime",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of tag IDs.",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of equipment IDs.",
            "name": "equipmentIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all equipment stat objects and pagination parameters",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EquipmentStatsResponse"
                  }
                },
                "pagination": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/definitions/EquipmentTimeSeriesPaginationResponse"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/unassigned-driving-segments": {
      "get": {
        "description": "Get the unassigned driving segments for a specified range.",
        "tags": [
          "Unassigned Driving Segments"
        ],
        "summary": "Get all unassigned driving segments",
        "operationId": "getUnassignedDrivingSegments",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "collectionFormat": "csv",
            "description": "ID(s) of a specific unassigned driving segment(s). Takes precedent over filter time range params. Supports multiple comma-separated IDs using csv format (ex. ?id=1,2,3).",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Beginning of the filter time range, specified in RFC 3339 format. (Example: 2019-06-13T18:08:25Z) Filters based on the server timestamp, i.e. createAtTime.",
            "name": "startTime",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "End of the filter time range, specified in RFC 3339 format. (Example: 2019-06-13T19:08:25Z) Filters based on the server timestamp, i.e. createAtTime.",
            "name": "endTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Unassigned driving segments for provided time range.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/UnassignedDrivingSegmentListResponse"
                },
                "pagination": {
                  "$ref": "#/definitions/paginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/unassigned-driving-segments/{id}": {
      "patch": {
        "description": "Assign an unassigned driving segment to a driver.",
        "tags": [
          "Unassigned Driving Segments"
        ],
        "summary": "Assign an unassigned driving segment",
        "operationId": "patchUnassignedDrivingSegments",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of a specific unassigned driving segment.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Driver ID to assign this driving segment to, and/or an annotation reason.",
            "name": "updateUnassignedDrivingSegment",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "annotation",
                "driverId"
              ],
              "properties": {
                "annotation": {
                  "$ref": "#/definitions/annotation"
                },
                "driverId": {
                  "$ref": "#/definitions/driverId"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated unassigned driving segment.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/UnassignedDrivingSegmentResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/vehicles": {
      "get": {
        "description": "Returns a list of all vehicles in an organization, ordered by vehicle ID.",
        "tags": [
          "Vehicles"
        ],
        "summary": "List all vehicles",
        "operationId": "listVehiclesKondo",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 0,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of tag IDs.",
            "name": "tagIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all vehicle objects, and pagination parameters.",
            "schema": {
              "$ref": "#/definitions/VehicleListResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/vehicles/harsh-events": {
      "get": {
        "description": "Fetch all harsh events for the organization in a given time period.",
        "tags": [
          "Safety"
        ],
        "summary": "Fetch all harsh events",
        "operationId": "getOrgHarshEvents",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "description": "Beginning of the time range, specified in RFC 3339 time.",
            "name": "startTime",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "string",
            "description": "End of the time range, specified in RFC 3339 time.",
            "name": "endTime",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Harsh events for the organization",
            "schema": {
              "$ref": "#/definitions/OrgHarshEventsKondoResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/vehicles/locations": {
      "get": {
        "description": "This endpoint allows you to both fetch historical locations for a vehicle, as well as a feed of all new vehicle locations.\n\nIf you wish to just fetch the historical location data for a vehicle, you can pass in a `startTime` and `endTime` range. This will return all known locations for a vehicle during a given time range.\n\nIf an `endTime` is not provided, then this will provide a continuous feed of all vehicle locations. In order to follow the feed, you can follow the pagination `endCursor` cursor continuously.  If there is not yet a `hasNextPage=true` for the feed follow, then we recommend you wait and retry in 5 seconds.",
        "tags": [
          "Vehicles"
        ],
        "summary": "Fetch vehicle locations",
        "operationId": "getVehicleLocationsHistory",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "startTime",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "endTime",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of tag IDs.",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of vehicle IDs.",
            "name": "vehicleIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all locations for the specified vehicles and time range.",
            "schema": {
              "$ref": "#/definitions/VehicleLocationsListResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/vehicles/safety-scores": {
      "get": {
        "description": "Fetch safety scores for all vehicles in the organization in a given time period.",
        "tags": [
          "Safety"
        ],
        "summary": "Fetch all safety scores by vehicle",
        "operationId": "getOrgVehicleSafetyScores",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "description": "Beginning of the time range, specified in RFC 3339 time.",
            "name": "startTime",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "string",
            "description": "End of the time range, specified in RFC 3339 time.",
            "name": "endTime",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Safety scores for all vehicles in the organization",
            "schema": {
              "$ref": "#/definitions/OrgSafetyScoresResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/vehicles/{id}": {
      "get": {
        "description": "Get information about a specific vehicle.",
        "tags": [
          "Vehicles"
        ],
        "summary": "Get a vehicle's information",
        "operationId": "getVehicleById",
        "parameters": [
          {
            "type": "string",
            "description": "Samsara ID of the vehicle.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the specified vehicle object.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/VehicleResponse"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique identifier for the vehicle.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/messages": {
      "post": {
        "description": "Send a message to a list of driver ids.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Messages"
        ],
        "summary": "Create a message",
        "operationId": "createMessagesKondo",
        "parameters": [
          {
            "description": "Text to send to a list of driverIds.",
            "name": "createMessages",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "driverIds",
                "text"
              ],
              "properties": {
                "driverIds": {
                  "description": "IDs of the drivers for whom the messages are sent to.",
                  "type": "array",
                  "items": {
                    "type": "number",
                    "format": "int64",
                    "example": 555
                  },
                  "example": [
                    111,
                    222,
                    333
                  ]
                },
                "text": {
                  "description": "The text sent in the message.",
                  "type": "string",
                  "maxLength": 65533,
                  "minLength": 1,
                  "example": "This is a message."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the created messages.",
            "schema": {
              "description": "A list of created messages.",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Messages"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/tags": {
      "get": {
        "description": "Return all of the tags for an organization.",
        "tags": [
          "Tags"
        ],
        "summary": "List all tags",
        "operationId": "getAllTags",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 0,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of tags.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Tag"
                  }
                },
                "pagination": {
                  "$ref": "#/definitions/paginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Create a new tag for the organization.",
        "tags": [
          "Tags"
        ],
        "summary": "Create a tag",
        "operationId": "createTag",
        "parameters": [
          {
            "name": "Tag create body.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TagUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created tag object, including the new tag ID.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Tag"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/tags/{id}": {
      "get": {
        "description": "Fetch a tag by id.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tags"
        ],
        "summary": "Get a tag object",
        "operationId": "getTagById",
        "responses": {
          "200": {
            "description": "The tag corresponding to request id.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Tag"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update a tag with a new name and new members. This API call would replace all old members of a tag with new members specified in the request body. To modify only a few devices associated with a tag use the PATCH endpoint.",
        "tags": [
          "Tags"
        ],
        "summary": "Update a tag",
        "operationId": "putTagById",
        "parameters": [
          {
            "name": "Tag update body.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TagUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated tag data.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Tag"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Permanently deletes a tag.",
        "tags": [
          "Tags"
        ],
        "summary": "Delete a tag",
        "operationId": "deleteTagById",
        "responses": {
          "204": {
            "description": "Successfully deleted the tag. No response body is returned."
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique identifier for the tag.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/user-roles": {
      "get": {
        "description": "Returns a list of all user roles in an organization.",
        "tags": [
          "Users"
        ],
        "summary": "List all user roles",
        "operationId": "getUserRoles",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 0,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List all user roles.",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/UserRole"
                  }
                },
                "pagination": {
                  "$ref": "#/definitions/paginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "description": "Returns a list of all users in an organization.",
        "tags": [
          "Users"
        ],
        "summary": "List all users",
        "operationId": "getUsers",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 0,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List all users.",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  }
                },
                "pagination": {
                  "$ref": "#/definitions/paginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Add a user to the organization.",
        "tags": [
          "Users"
        ],
        "summary": "Create a user",
        "operationId": "createUser",
        "parameters": [
          {
            "description": "The user to create.",
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created user object with ID.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "description": "Get a specific user's information.",
        "tags": [
          "Users"
        ],
        "summary": "Get a user's information",
        "operationId": "getUserById",
        "responses": {
          "200": {
            "description": "Returns the specified user.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete the given user.",
        "tags": [
          "Users"
        ],
        "summary": "Delete a user",
        "operationId": "deleteUserById",
        "responses": {
          "204": {
            "description": "Returns an empty success response."
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Update a specific user's information.",
        "tags": [
          "Users"
        ],
        "summary": "Update a user's information",
        "operationId": "updateUserById",
        "parameters": [
          {
            "description": "Updates to the user.",
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated user object with ID.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique identifier for the user.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "Address": {
      "description": "Information about an address/geofence. Geofences are either a circle or a polygon.",
      "type": "object",
      "allOf": [
        {
          "required": [
            "id"
          ],
          "properties": {
            "contacts": {
              "description": "An array of all contact mini-objects that are associated with the given address entry.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/contactTinyResponse"
              }
            },
            "id": {
              "description": "Unique Samsara ID for the address.",
              "type": "string",
              "example": "123"
            },
            "tags": {
              "description": "An array of all tag mini-objects that are associated with the given address entry.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/tagTinyResponse"
              }
            }
          }
        },
        {
          "$ref": "#/definitions/AddressCore"
        }
      ]
    },
    "AddressCore": {
      "description": "Core fields used in both address creation and the actual address object.",
      "type": "object",
      "properties": {
        "addressTypes": {
          "description": "Types associated with the address.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "yard",
              "short_haul"
            ],
            "example": "yard"
          }
        },
        "formattedAddress": {
          "description": "The full address associated with this address/geofence, as it might be recognized by maps.google.com.",
          "type": "string",
          "maxLength": 1024,
          "example": "350 Rhode Island St, San Francisco, CA"
        },
        "geofence": {
          "$ref": "#/definitions/AddressGeofence"
        },
        "name": {
          "description": "Name of the address. At most 255 characters.",
          "type": "string",
          "maxLength": 255,
          "example": "Samsara HQ"
        },
        "notes": {
          "description": "A notes field for addresses. At most 280 characters.",
          "type": "string",
          "maxLength": 280,
          "example": "Hours of operation: 8am - 6pm; Truck entrance on the Rhode Island street side."
        }
      }
    },
    "AddressCreate": {
      "description": "An address object.",
      "type": "object",
      "allOf": [
        {
          "required": [
            "name",
            "formattedAddress",
            "geofence"
          ],
          "properties": {
            "contactIds": {
              "description": "An array of IDs of contacts to associate with this address.",
              "type": "array",
              "items": {
                "type": "string",
                "example": "123"
              }
            },
            "latitude": {
              "description": "Optional latitude field to override the geocoded latitude from the formatted address.",
              "type": "number",
              "format": "double",
              "example": 37.765363
            },
            "longitude": {
              "description": "Optional longitude field to override the geocoded longitude from the formatted address.",
              "type": "number",
              "format": "double",
              "example": 37.765363
            },
            "tagIds": {
              "description": "An array of IDs of tags to associate with this address.",
              "type": "array",
              "items": {
                "type": "string",
                "example": "321"
              }
            }
          }
        },
        {
          "$ref": "#/definitions/AddressCore"
        }
      ]
    },
    "AddressGeofence": {
      "description": "The geofence that defines this address and its bounds. This can either be a circle, or a polygon - only one key should be provided, depending on the geofence type.",
      "type": "object",
      "properties": {
        "circle": {
          "description": "Information about a circular geofence. This field is only populated if the geofence is a circle.",
          "type": "object",
          "properties": {
            "latitude": {
              "description": "The latitude of the center of the circular geofence in decimal degrees.",
              "type": "number",
              "format": "double",
              "example": 37.765363
            },
            "longitude": {
              "description": "The longitude of the center of the circular geofence in decimal degrees.",
              "type": "number",
              "format": "double",
              "example": -122.403098
            },
            "radiusMeters": {
              "description": "The radius of the circular geofence in meters.",
              "type": "number",
              "format": "integer",
              "example": 250
            }
          }
        },
        "polygon": {
          "description": "Information about a polygon geofence. This field is only populated if the geofence is a polygon.",
          "type": "object",
          "properties": {
            "vertices": {
              "description": "The vertices of the polygon geofence. These geofence vertices describe the perimeter of the polygon, and must consist of at least 3 vertices and less than 40.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "latitude": {
                    "description": "The latitude of a geofence vertex in decimal degrees.",
                    "type": "number",
                    "format": "double",
                    "example": 37.765363
                  },
                  "longitude": {
                    "description": "The longitude of a geofence vertex in decimal degrees.",
                    "type": "number",
                    "format": "double",
                    "example": -122.403098
                  }
                }
              }
            }
          }
        }
      }
    },
    "AddressPatch": {
      "description": "Information about an address/geofence. Geofences are either a circle or a polygon.",
      "type": "object",
      "allOf": [
        {
          "properties": {
            "contactIds": {
              "description": "An array of IDs of contacts to associate with this address.",
              "type": "array",
              "items": {
                "type": "string",
                "example": "123"
              }
            },
            "tagIds": {
              "description": "An array of IDs of tags to associate with this address.",
              "type": "array",
              "items": {
                "type": "string",
                "example": "321"
              }
            }
          }
        },
        {
          "$ref": "#/definitions/AddressCore"
        }
      ]
    },
    "Contact": {
      "description": "Information about a notification contact for alerts.",
      "type": "object",
      "properties": {
        "email": {
          "description": "Email address of the contact.",
          "type": "string",
          "maxLength": 255,
          "example": "jane.jones@yahoo.com"
        },
        "firstName": {
          "description": "First name of the contact.",
          "type": "string",
          "maxLength": 255,
          "example": "Jane"
        },
        "id": {
          "description": "ID of the contact.",
          "type": "string",
          "example": "123"
        },
        "lastName": {
          "description": "Last name of the contact.",
          "type": "string",
          "maxLength": 255,
          "example": "Jones"
        },
        "phone": {
          "description": "Phone number of the contact.",
          "type": "string",
          "maxLength": 255,
          "example": "555-222-3344"
        }
      }
    },
    "ContactInput": {
      "description": "Information for adding a notification contact for alerts.",
      "type": "object",
      "properties": {
        "email": {
          "description": "Email address of the contact.",
          "type": "string",
          "maxLength": 255,
          "example": "jane.jones@yahoo.com"
        },
        "firstName": {
          "description": "First name of the contact.",
          "type": "string",
          "maxLength": 255,
          "example": "Jane"
        },
        "lastName": {
          "description": "Last name of the contact.",
          "type": "string",
          "maxLength": 255,
          "example": "Jones"
        },
        "phone": {
          "description": "Phone number of the contact.",
          "type": "string",
          "maxLength": 255,
          "example": "111-222-3344"
        }
      }
    },
    "Document": {
      "allOf": [
        {
          "type": "object",
          "required": [
            "id",
            "orgId",
            "driverId",
            "driverCreatedAtMs",
            "serverCreatedAtMs",
            "serverUpdatedAtMs",
            "documentType",
            "fields"
          ],
          "properties": {
            "documentType": {
              "description": "Descriptive name of this type of document.",
              "type": "string",
              "example": "Fuel Receipt"
            },
            "driverCreatedAtMs": {
              "description": "The time in Unix epoch milliseconds that the document is created on the driver app.",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "driverId": {
              "description": "ID of the driver for whom the document is submitted",
              "type": "integer",
              "format": "int64",
              "example": 555
            },
            "fields": {
              "description": "The fields associated with this document.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DocumentField"
              },
              "example": [
                {
                  "label": "Photos",
                  "photoValue": [],
                  "valueType": "ValueType_Photo"
                },
                {
                  "label": "Gallons",
                  "numberValue": 12.34,
                  "valueType": "ValueType_Number"
                },
                {
                  "label": "City",
                  "stringValue": "San Francisco, CA",
                  "valueType": "ValueType_String"
                },
                {
                  "label": "Fuel Type",
                  "multipleChoiceValue": [
                    {
                      "selected": true,
                      "value": "Diesel"
                    },
                    {
                      "selected": false,
                      "value": "Gas"
                    }
                  ],
                  "valueType": "ValueType_MultipleChoice"
                }
              ]
            },
            "id": {
              "description": "ID of the document",
              "type": "string",
              "example": "2018_42424242"
            },
            "orgId": {
              "description": "Organization ID that the document \u0026 driver who submitted the doc belongs to",
              "type": "integer",
              "format": "int64",
              "example": 555
            },
            "serverCreatedAtMs": {
              "description": "The time in Unix epoch milliseconds that the document is created on the server.",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "serverUpdatedAtMs": {
              "description": "The time in Unix epoch milliseconds that the document is updated on the server.",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "vehicleId": {
              "description": "VehicleID of the driver at document creation.",
              "type": "integer",
              "format": "int64",
              "example": 222
            }
          }
        },
        {
          "$ref": "#/definitions/DocumentBase"
        }
      ]
    },
    "DocumentBase": {
      "type": "object",
      "required": [
        "dispatchJobId",
        "notes"
      ],
      "properties": {
        "dispatchJobId": {
          "description": "ID of the Samsara dispatch job for which the document is submitted",
          "type": "integer",
          "format": "int64",
          "example": 773
        },
        "notes": {
          "description": "Notes submitted with this document.",
          "type": "string",
          "example": "Fueled up before delivery."
        },
        "state": {
          "description": "The condition of the document created for the driver. Can be either `Required` or `Submitted`, if no value is specified, `state` defaults to `Required`. `Required` documents are pre-populated documents for the Driver to fill out in the Driver App.",
          "type": "string",
          "default": "Required",
          "enum": [
            "Required",
            "Submitted"
          ],
          "example": "Submitted"
        }
      }
    },
    "DocumentCreate": {
      "allOf": [
        {
          "description": "Arguments to create a document.",
          "type": "object",
          "required": [
            "documentTypeUuid",
            "fields"
          ],
          "properties": {
            "documentTypeUuid": {
              "description": "Universally unique identifier for the document type this document is being created for.",
              "type": "string",
              "example": "4aff772c-a7bb-45e6-8e41-6a53e34feb83"
            },
            "fields": {
              "description": "List of fields and associated values for a given document. The fields must be listed in the order that that they appear in the specificied document type. Today `stringValue`, `numberValue`, and `multipleChoiceValue` are the supported document upload field types.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DocumentField"
              },
              "example": [
                {
                  "label": "Gallons",
                  "numberValue": 12.34,
                  "valueType": "ValueType_Number"
                },
                {
                  "label": "City",
                  "stringValue": "San Francisco, CA",
                  "valueType": "ValueType_String"
                },
                {
                  "label": "Fuel Type",
                  "multipleChoiceValue": [
                    {
                      "selected": true,
                      "value": "Diesel"
                    },
                    {
                      "selected": false,
                      "value": "Gas"
                    }
                  ],
                  "valueType": "ValueType_MultipleChoice"
                }
              ]
            }
          }
        },
        {
          "$ref": "#/definitions/DocumentCreateBase"
        }
      ]
    },
    "DocumentCreateBase": {
      "type": "object",
      "properties": {
        "dispatchJobId": {
          "description": "ID of the Samsara dispatch job for which the document is submitted",
          "type": "integer",
          "format": "int64",
          "example": 773
        },
        "notes": {
          "description": "Notes submitted with this document.",
          "type": "string",
          "example": "Fueled up before delivery."
        },
        "state": {
          "description": "The condition of the document created for the driver. Can be either `Required` or `Submitted`, if no value is specified, `state` defaults to `Required`. `Required` documents are pre-populated documents for the Driver to fill out in the Driver App.",
          "type": "string",
          "default": "Required",
          "enum": [
            "Required",
            "Submitted"
          ],
          "example": "Submitted"
        }
      }
    },
    "DocumentField": {
      "allOf": [
        {
          "description": "A field of a document. A field can be a string type, number type, or photo type, which can be identified from its valueType. Between stringValue, numberValue, and photoValue, only one can exist for a single document field depending on the valueType.",
          "type": "object",
          "required": [
            "label"
          ],
          "properties": {
            "label": {
              "description": "Descriptive name of this field.",
              "type": "string",
              "example": "Fuel Cost ($)"
            },
            "value": {
              "description": "DEPRECATED: Please use stringValue, numberValue, or photoValue instead. Value of this field. Depending on what kind of field it is, this may be one of the following: an array of image urls, a float, an integer, or a string.",
              "example": 23.45
            }
          }
        },
        {
          "$ref": "#/definitions/DocumentFieldCreate"
        }
      ]
    },
    "DocumentFieldCreate": {
      "type": "object",
      "required": [
        "valueType"
      ],
      "properties": {
        "multipleChoiceValue": {
          "description": "Value of this field if this document field has valueType: ValueType_MultipleChoice. Array of objects containing two fields: the string value of the multiple choice option and a boolean representing whether or not the choice was selected",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "selected": {
                "type": "boolean"
              },
              "value": {
                "type": "string"
              }
            }
          }
        },
        "numberValue": {
          "description": "Value of this field if this document field has valueType: ValueType_Number.",
          "type": "number",
          "format": "double",
          "example": 12.34
        },
        "photoValue": {
          "description": "Value of this field if this document field has valueType: ValueType_Photo. Array of photo objects where each object contains a URL for a photo.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "url": {
                "description": "Photo URL for a JPG image",
                "type": "string"
              }
            }
          },
          "example": [
            {
              "url": "https://www.samsara.com/photo1"
            },
            {
              "url": "https://www.samsara.com/photo2"
            }
          ]
        },
        "stringValue": {
          "description": "Value of this field if this document field has valueType: ValueType_String.",
          "type": "string",
          "example": "This is a string."
        },
        "valueType": {
          "description": "Determines the type of this field and what type of value this field has. It should be either ValueType_Number, ValueType_String, ValueType_Photo, or ValueType_MultipleChoice.",
          "type": "string",
          "example": "ValueType_Number"
        }
      }
    },
    "DocumentFieldType": {
      "type": "object",
      "required": [
        "label",
        "valueType"
      ],
      "properties": {
        "label": {
          "description": "Descriptive name of this field type.",
          "type": "string",
          "example": "Fuel Cost ($)"
        },
        "numberValueTypeMetadata": {
          "description": "Additional metadata information for a number field type. Only defined when a field type has valueType: ValueType_Number.",
          "type": "object",
          "properties": {
            "numDecimalPlaces": {
              "description": "Number of decimal places that values for this field type can have.",
              "type": "number",
              "format": "int64",
              "example": 2
            }
          }
        },
        "valueType": {
          "description": "The kind of value that can be submitted for this fieldType. It should be either ValueType_Number, ValueType_String, or ValueType_Photo.",
          "type": "string",
          "example": "ValueType_Number"
        }
      }
    },
    "DocumentType": {
      "type": "object",
      "required": [
        "name",
        "orgId",
        "uuid"
      ],
      "properties": {
        "fieldTypes": {
          "description": "The field types determine the names of fields for this document type. They also determine the types of values a document submitted for this document type can have.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentFieldType"
          }
        },
        "name": {
          "description": "Name of the document type.",
          "type": "string",
          "example": "Fuel Receipt"
        },
        "orgId": {
          "description": "ID for the organization this document belongs to.",
          "type": "integer",
          "format": "int64",
          "example": 773
        },
        "uuid": {
          "description": "Universally unique identifier for the document type. Can be passed in as a documentTypeUuid when creating a document for this document type.",
          "type": "string",
          "example": "4aff772c-a7bb-45e6-8e41-6a53e34feb83"
        }
      }
    },
    "DocumentTypes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DocumentType"
      }
    },
    "Documents": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Document"
      }
    },
    "Driver": {
      "description": "A driver object",
      "type": "object",
      "allOf": [
        {
          "properties": {
            "currentVehicle": {
              "$ref": "#/definitions/vehicleTinyResponse"
            },
            "id": {
              "description": "Samsara ID for the driver.",
              "type": "string",
              "example": "123"
            },
            "staticVehicleAssignment": {
              "$ref": "#/definitions/vehicleTinyResponse"
            },
            "tags": {
              "description": "The tags this driver belongs to.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/tagTinyResponse"
              }
            },
            "vehicleGroupTag": {
              "$ref": "#/definitions/tagTinyResponse"
            }
          }
        },
        {
          "$ref": "#/definitions/DriverBase"
        }
      ]
    },
    "DriverBase": {
      "description": "A driver object",
      "type": "object",
      "properties": {
        "carrierSettings": {
          "description": "Carrier for a given driver. If the driver's carrier differs from the general organization's carrier settings, the override value is used. Updating this value only updates the override setting for this driver.",
          "type": "object",
          "properties": {
            "carrierName": {
              "description": "Carrier for a given driver.",
              "type": "string",
              "maxLength": 255,
              "example": "Acme Inc."
            },
            "dotNumber": {
              "description": "Carrier US DOT Number. If this differs from the general organization's settings, the override value is used. Updating this value only updates the override setting for this driver.",
              "type": "integer",
              "format": "int64",
              "example": 98231
            },
            "mainOfficeAddress": {
              "description": "Main office address for a given driver. If this differs from the general organization's settings, the override value is used. ",
              "type": "string",
              "maxLength": 255,
              "example": "1234 Pear St., Scranton, PA 62814"
            }
          }
        },
        "eldAdverseWeatherExemptionEnabled": {
          "description": "Flag indicating this driver may use Adverse Weather exemptions in ELD logs.",
          "type": "boolean"
        },
        "eldBigDayExemptionEnabled": {
          "description": "Flag indicating this driver may use Big Day exemption in ELD logs.",
          "type": "boolean"
        },
        "eldDayStartHour": {
          "description": "`0` indicating midnight-to-midnight ELD driving hours, `12` to indicate noon-to-noon driving hours.",
          "type": "integer"
        },
        "eldExempt": {
          "description": "Flag indicating this driver is exempt from the Electronic Logging Mandate.",
          "type": "boolean"
        },
        "eldExemptReason": {
          "description": "Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).",
          "type": "string",
          "example": "Bad driver"
        },
        "eldPcEnabled": {
          "description": "Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.",
          "type": "boolean",
          "default": false
        },
        "eldYmEnabled": {
          "description": "Flag indicating this driver may select the Yard Move duty status in ELD logs.",
          "type": "boolean",
          "default": false
        },
        "externalIds": {
          "description": "User-defined dictionary of external IDs (string key-value pairs).",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "maintenanceId": "250020",
            "payrollId": "123"
          }
        },
        "isDeactivated": {
          "description": "A boolean that indicates whether or not this driver is deactivated.",
          "type": "boolean",
          "example": false
        },
        "licenseNumber": {
          "description": "Driver's state issued license number.",
          "type": "string",
          "example": "E1234567"
        },
        "licenseState": {
          "description": "Abbreviation of state that issued driver's license.",
          "type": "string",
          "example": "CA"
        },
        "locale": {
          "description": "Locale override (uncommon).",
          "type": "string",
          "enum": [
            "United States",
            "Austria",
            "Belgium",
            "Canada",
            "United Kingdom",
            "France",
            "Germany",
            "Ireland",
            "Luxembourg",
            "Mexico",
            "Netherlands",
            "Spain",
            "Switzerland"
          ]
        },
        "name": {
          "description": "Driver's name.",
          "type": "string",
          "maxLength": 255,
          "example": "Susan Jones"
        },
        "notes": {
          "description": "Notes about the driver.",
          "type": "string",
          "maxLength": 4096,
          "example": "Also goes by the nickname Furious Fred."
        },
        "phone": {
          "description": "Driver's phone number. Please include only digits, ex. 4157771234",
          "type": "string",
          "maxLength": 255,
          "example": "5558234327"
        },
        "timezone": {
          "description": "Home terminal timezone, in order to indicate what time zone should be used to calculate the ELD logs.",
          "type": "string",
          "example": "New York - EST/EDT"
        },
        "username": {
          "description": "Driver's login username into the driver app.",
          "type": "string",
          "maxLength": 189,
          "example": "Susan Jones"
        }
      }
    },
    "DriverCreate": {
      "description": "Driver that should be created.",
      "type": "object",
      "required": [
        "name",
        "username",
        "password"
      ],
      "properties": {
        "carrierSettings": {
          "description": "Carrier for a given driver. If the driver's carrier differs from the general organization's carrier settings, the override value is used. Updating this value only updates the override setting for this driver.",
          "type": "object",
          "properties": {
            "carrierName": {
              "description": "Carrier for a given driver.",
              "type": "string",
              "maxLength": 255,
              "example": "Acme Inc."
            },
            "dotNumber": {
              "description": "Carrier US DOT Number. If this differs from the general organization's settings, the override value is used. Updating this value only updates the override setting for this driver.",
              "type": "integer",
              "format": "int64",
              "example": 98231
            },
            "mainOfficeAddress": {
              "description": "Main office address for a given driver. If this differs from the general organization's settings, the override value is used. ",
              "type": "string",
              "maxLength": 255,
              "example": "1234 Pear St., Scranton, PA 62814"
            }
          }
        },
        "currentVehicleId": {
          "description": "ID of vehicle that driver is currently assigned to.",
          "type": "string",
          "example": "123"
        },
        "eldAdverseWeatherExemptionEnabled": {
          "description": "Flag indicating this driver may use Adverse Weather exemptions in ELD logs.",
          "type": "boolean"
        },
        "eldBigDayExemptionEnabled": {
          "description": "Flag indicating this driver may use Big Day exemption in ELD logs.",
          "type": "boolean"
        },
        "eldDayStartHour": {
          "description": "`0` indicating midnight-to-midnight ELD driving hours, `12` to indicate noon-to-noon driving hours.",
          "type": "integer"
        },
        "eldExempt": {
          "description": "Flag indicating this driver is exempt from the Electronic Logging Mandate.",
          "type": "boolean"
        },
        "eldExemptReason": {
          "description": "Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).",
          "type": "string",
          "example": "Bad driver"
        },
        "eldPcEnabled": {
          "description": "Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.",
          "type": "boolean",
          "default": false
        },
        "eldYmEnabled": {
          "description": "Flag indicating this driver may select the Yard Move duty status in ELD logs.",
          "type": "boolean",
          "default": false
        },
        "externalIds": {
          "description": "User-defined dictionary of external IDs (string key-value pairs).",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "maintenanceId": "250020",
            "payrollId": "123"
          }
        },
        "licenseNumber": {
          "description": "Driver's state issued license number.",
          "type": "string",
          "example": "E1234567"
        },
        "licenseState": {
          "description": "Abbreviation of state that issued driver's license.",
          "type": "string",
          "example": "CA"
        },
        "locale": {
          "description": "Locale override (uncommon).",
          "type": "string",
          "enum": [
            "United States",
            "Austria",
            "Belgium",
            "Canada",
            "United Kingdom",
            "France",
            "Germany",
            "Ireland",
            "Luxembourg",
            "Mexico",
            "Netherlands",
            "Spain",
            "Switzerland"
          ]
        },
        "name": {
          "description": "Driver's name.",
          "type": "string",
          "maxLength": 255,
          "minLength": 1,
          "example": "Susan Jones"
        },
        "notes": {
          "description": "Notes about the driver.",
          "type": "string",
          "maxLength": 4096,
          "example": "Also goes by the nickname Furious Fred."
        },
        "password": {
          "description": "Password that the driver can use to login to the Samsara driver app.",
          "type": "string",
          "example": "aSecurePassword1234"
        },
        "phone": {
          "description": "Driver's phone number. Please include only digits, ex. 4157771234",
          "type": "string",
          "maxLength": 255,
          "example": "5558234327"
        },
        "staticVehicleAssignmentId": {
          "description": "ID of vehicle assigned to the driver for static vehicle assignments. (uncommon).",
          "type": "string",
          "example": "456"
        },
        "tagIds": {
          "description": "IDs of tags the driver is associated with.",
          "type": "array",
          "items": {
            "type": "string",
            "example": "147"
          }
        },
        "timezone": {
          "description": "Home terminal timezone, in order to indicate what time zone should be used to calculate the ELD logs.",
          "type": "string",
          "example": "New York - EST/EDT"
        },
        "username": {
          "description": "Driver's login username into the driver app. The username may not contain spaces or the '@' symbol.",
          "type": "string",
          "maxLength": 189,
          "minLength": 1,
          "example": "Susan Jones"
        },
        "vehicleGroupTagId": {
          "description": "Tag ID which determines which vehicles a driver will see when selecting vehicles.",
          "type": "string",
          "example": "East Coast"
        }
      }
    },
    "DriverUpdate": {
      "description": "Driver that should be updated.",
      "type": "object",
      "allOf": [
        {
          "properties": {
            "currentVehicleId": {
              "description": "ID of vehicle that driver is currently assigned to.",
              "type": "string",
              "example": "123"
            },
            "password": {
              "description": "Password that the driver can use to login to the Samsara driver app.",
              "type": "string",
              "example": "aSecurePassword1234"
            },
            "staticVehicleAssignmentId": {
              "description": "ID of vehicle assigned to the driver for static vehicle assignments. (uncommon).",
              "type": "string",
              "example": "456"
            },
            "tagIds": {
              "description": "IDs of tags the driver is associated with.",
              "type": "array",
              "items": {
                "type": "string",
                "example": "147"
              }
            },
            "vehicleGroupTagId": {
              "description": "Tag ID which determines which vehicles a driver will see when selecting vehicles.",
              "type": "string",
              "example": "East Coast"
            }
          }
        },
        {
          "$ref": "#/definitions/DriverBase"
        }
      ]
    },
    "EquipmentEngineState": {
      "description": "Stat point for the state of the engine.",
      "type": "object",
      "properties": {
        "time": {
          "$ref": "#/definitions/EquipmentTime"
        },
        "value": {
          "type": "string",
          "enum": [
            "Off",
            "On"
          ],
          "example": "On"
        }
      }
    },
    "EquipmentLocation": {
      "allOf": [
        {
          "$ref": "#/definitions/location"
        },
        {
          "type": "object",
          "required": [
            "time"
          ],
          "properties": {
            "time": {
              "$ref": "#/definitions/EquipmentTime"
            }
          }
        }
      ]
    },
    "EquipmentLocationsResponse": {
      "description": "List of equipment locations for the specified time period.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/equipmentTinyResponse"
        },
        {
          "description": "Location point for the equipment.",
          "type": "object",
          "properties": {
            "locations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EquipmentLocation"
              }
            }
          }
        }
      ]
    },
    "EquipmentPaginationResponse": {
      "description": "Pagination parameters.",
      "type": "object",
      "required": [
        "endCursor",
        "hasNextPage"
      ],
      "properties": {
        "endCursor": {
          "description": "Cursor identifier representing the last element in the response. This value should be used in conjunction with a subsequent request's 'after' query parameter.",
          "type": "string",
          "format": "string",
          "example": "MjkY"
        },
        "hasNextPage": {
          "description": "True if there are more pages of results immediately available after this endCursor. Otherwise, wait nextPageAfter seconds before fetching the next page with endCursor.",
          "type": "boolean",
          "example": true
        }
      }
    },
    "EquipmentStatsResponse": {
      "description": "List of equipment stats for the specified time period.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/equipmentTinyResponse"
        },
        {
          "type": "object",
          "properties": {
            "engineStates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EquipmentEngineState"
              }
            }
          }
        }
      ]
    },
    "EquipmentTime": {
      "description": "UTC timestamp of the time the data point was generated by the equipment, in RFC3339 format.",
      "type": "string",
      "example": "2019-05-03T04:30:31.492Z"
    },
    "EquipmentTimeSeriesPaginationResponse": {
      "description": "Pagination parameters for timeseries pages where results may be delayed.",
      "type": "object",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "nextPageAfter": {
              "description": "The number of seconds to wait before fetching the next page of results. Only populated if hasNextPage is false and additional pages may be available in the future. For example, if nextPageAfter=5, then wait 5 seconds before fetching the next page of results. If pagination is complete or hasNextPage=true, then nextPageAfter will be omitted.",
              "type": "integer",
              "example": 10
            }
          }
        },
        {
          "$ref": "#/definitions/EquipmentPaginationResponse"
        }
      ]
    },
    "ErrorResponse": {
      "description": "Error message describing why the request failed.",
      "type": "string"
    },
    "LocationsWrapper": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "vehicle": {
              "$ref": "#/definitions/vehicleTinyResponse"
            }
          }
        },
        {
          "$ref": "#/definitions/location"
        },
        {
          "type": "object",
          "required": [
            "time"
          ],
          "properties": {
            "time": {
              "$ref": "#/definitions/time"
            }
          }
        }
      ]
    },
    "Message": {
      "type": "object",
      "required": [
        "driverId",
        "text"
      ],
      "properties": {
        "driverId": {
          "description": "ID of the driver for whom the message is sent to or sent by.",
          "type": "integer",
          "format": "int64",
          "example": 555
        },
        "text": {
          "description": "The text sent in the message.",
          "type": "string",
          "maxLength": 65533,
          "minLength": 1,
          "example": "This is a message."
        }
      }
    },
    "Messages": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Message"
      }
    },
    "OrgHarshEventsKondoResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "behaviorLabels": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "labelSource": {
                      "description": "Label source of the harsh event",
                      "type": "string",
                      "format": "string",
                      "example": "SYSTEM"
                    },
                    "labelType": {
                      "description": "Label type of the harsh event",
                      "type": "string",
                      "format": "string",
                      "example": "Braking"
                    }
                  }
                }
              },
              "downloadForwardVideoUrl": {
                "description": "Download forward video url",
                "type": "string",
                "format": "string",
                "example": "samsara-dashcam-videos::3318/222/1499411220000/huKA7IhpBV-camera-video-segment-1244214895.mp4"
              },
              "downloadInwardVideoUrl": {
                "description": "Download inward video url",
                "type": "string",
                "format": "string",
                "example": "samsara-dashcam-videos::3318/222/1499411220000/huKA7IhpBV-camera-video-segment-1244214895.mp4"
              },
              "downloadTrackedInwardVideoUrl": {
                "description": "Download tracked inward video url",
                "type": "string",
                "format": "string",
                "example": "samsara-dashcam-videos::3318/222/1499411220000/huKA7IhpBV-camera-video-segment-1244214895.mp4"
              },
              "incidentReportUrl": {
                "description": "Incident report url",
                "type": "string",
                "format": "string",
                "example": "https://cloud.samsara.com/groups/4185/fleet/reports/safety/vehicle/222/incident/1499411220000"
              },
              "location": {
                "type": "object",
                "properties": {
                  "latitude": {
                    "description": "Longitude at which the harsh event happened",
                    "type": "number",
                    "format": "float",
                    "example": 37.762554666
                  },
                  "longitude": {
                    "description": "Longitude at which the harsh event happened",
                    "type": "number",
                    "format": "float",
                    "example": -122.409358166
                  }
                }
              }
            }
          }
        }
      }
    },
    "OrgSafetyScoresResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "crashCount": {
                "description": "Crash count",
                "type": "integer",
                "format": "int64",
                "example": 1
              },
              "driverId": {
                "description": "Driver Id",
                "type": "integer",
                "format": "int64",
                "example": 319596
              },
              "harshAccelCount": {
                "description": "Harsh accel count",
                "type": "integer",
                "format": "int64",
                "example": 3
              },
              "harshBrakingCount": {
                "description": "Harsh braking count",
                "type": "integer",
                "format": "int64",
                "example": 5
              },
              "harshEventIdentifiers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "eventTime": {
                      "description": "Event time, specified in RFC 3339",
                      "type": "string",
                      "format": "string",
                      "example": "2019-04-17T16:42:55Z"
                    },
                    "vehicleId": {
                      "description": "Vehicle Id",
                      "type": "integer",
                      "format": "int64",
                      "example": 212014918214656
                    }
                  }
                }
              },
              "harshTurningCount": {
                "description": "Harsh turning count",
                "type": "integer",
                "format": "int64",
                "example": 10
              },
              "safetyScore": {
                "description": "Vehicle/Driver Safety Score",
                "type": "integer",
                "format": "int64",
                "example": 92
              },
              "safetyScoreRank": {
                "description": "Vehicle/Driver Safety Rank",
                "type": "integer",
                "format": "int64",
                "example": 7
              },
              "timeOverSpeedLimitMs": {
                "description": "Overspeed limit time, specified in milliseconds UNIX time.",
                "type": "integer",
                "format": "int64",
                "example": 123
              },
              "totalDistanceDrivenMeters": {
                "description": "Total distance driven meters",
                "type": "integer",
                "format": "int64",
                "example": 2509
              },
              "totalHarshEventCount": {
                "description": "Total harsh event count",
                "type": "integer",
                "format": "int64",
                "example": 20
              },
              "totalTimeDrivenMs": {
                "description": "Total driver time, specified in milliseconds UNIX time.",
                "type": "integer",
                "format": "int64",
                "example": 12343
              },
              "vehicleId": {
                "description": "Vehicle Id",
                "type": "integer",
                "format": "int64",
                "example": 212014918214656
              }
            }
          }
        }
      }
    },
    "Tag": {
      "allOf": [
        {
          "$ref": "#/definitions/TinyTag"
        },
        {
          "type": "object",
          "properties": {
            "addresses": {
              "description": "The addresses that belong to this tag.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaggedObject"
              }
            },
            "assets": {
              "description": "The trailers, unpowered, and powered assets that belong to this tag.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaggedObject"
              }
            },
            "drivers": {
              "description": "The drivers that belong to this tag.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaggedObject"
              }
            },
            "machines": {
              "description": "The machines that belong to thistag.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaggedObject"
              }
            },
            "parentTagId": {
              "description": "If this tag is part a hierarchical tag tree, this is the ID of the parent tag, otherwise this will be null.",
              "type": "string",
              "example": "Tag8389"
            },
            "sensors": {
              "description": "The sensors that belong to this tag.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaggedObject"
              }
            },
            "vehicles": {
              "description": "The vehicles that belong to this tag.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaggedObject"
              }
            }
          }
        }
      ]
    },
    "TagUpdate": {
      "type": "object",
      "properties": {
        "addresses": {
          "description": "The addresses that belong to this tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaggedObjectId"
          }
        },
        "assets": {
          "description": "The trailers, unpowered, and powered assets that belong to this tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaggedObjectId"
          }
        },
        "drivers": {
          "description": "The drivers that belong to this tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaggedObjectId"
          }
        },
        "machines": {
          "description": "The machines that belong to this tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaggedObjectId"
          }
        },
        "name": {
          "description": "Name of this tag.",
          "type": "string",
          "maxLength": 191,
          "minLength": 1,
          "example": "California"
        },
        "parentTagId": {
          "description": "If this tag is part a hierarchical tag tree, this is the ID of the parent tag, otherwise this will be null.",
          "type": "string",
          "example": "Tag8389"
        },
        "sensors": {
          "description": "The sensors that belong to this tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaggedObjectId"
          }
        },
        "vehicles": {
          "description": "The vehicles that belong to this tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaggedObjectId"
          }
        }
      }
    },
    "TaggedObject": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/TaggedObjectId"
        },
        "name": {
          "description": "The object name.",
          "type": "string",
          "example": "My Favorite"
        }
      }
    },
    "TaggedObjectId": {
      "description": "The object ID.",
      "type": "string",
      "example": "Sensor1241"
    },
    "TinyTag": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique Samsara ID of this tag.",
          "type": "string",
          "example": "Tag6821"
        },
        "name": {
          "description": "Name of this tag.",
          "type": "string",
          "example": "California"
        }
      }
    },
    "UnassignedDrivingSegmentListResponse": {
      "description": "A list of driving segments with no associated driver(s).",
      "type": "array",
      "items": {
        "$ref": "#/definitions/UnassignedDrivingSegmentResponse"
      }
    },
    "UnassignedDrivingSegmentResponse": {
      "description": "A driving segment with no associated driver(s) that may or may not be in a unassigned, pending, rejected, or assigned states.",
      "type": "object",
      "properties": {
        "annotation": {
          "$ref": "#/definitions/annotation"
        },
        "createdAtTime": {
          "description": "The time that the server created the driving segment, specified in RFC 3339 format.",
          "type": "string",
          "format": "date-time",
          "example": "2019-04-17T16:43:00Z"
        },
        "driver": {
          "$ref": "#/definitions/driverTinyResponse"
        },
        "endTime": {
          "$ref": "#/definitions/endTimeBodyParam"
        },
        "id": {
          "description": "Unique identifier for the unassigned driving segment.",
          "type": "string",
          "format": "uuid",
          "example": "08b3aeada5f4ab3010c0b4efa28d2d1890dbf8d48d2d"
        },
        "startTime": {
          "$ref": "#/definitions/startTimeBodyParam"
        },
        "status": {
          "description": "Status of assignment for this segment.",
          "type": "string",
          "format": "string",
          "enum": [
            "PENDING",
            "ACCEPTED",
            "REJECTED",
            "UNASSIGNED",
            "UNKNOWN"
          ],
          "example": "PENDING"
        },
        "vehicle": {
          "$ref": "#/definitions/vehicleTinyResponse"
        }
      }
    },
    "User": {
      "description": "A user object",
      "type": "object",
      "required": [
        "id",
        "authType",
        "name",
        "roles"
      ],
      "properties": {
        "authType": {
          "description": "The authentication type the user uses to authenticate. To use SAML this organization must have a configured SAML integration.",
          "type": "string",
          "enum": [
            "default",
            "saml"
          ]
        },
        "id": {
          "description": "Unique ID for the user.",
          "type": "string",
          "example": "123"
        },
        "name": {
          "description": "The first and last name of the user.",
          "type": "string",
          "example": "Bob Smith"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRoleResponse"
          }
        }
      }
    },
    "UserCreate": {
      "description": "The user creation arguments",
      "type": "object",
      "required": [
        "name",
        "email",
        "authType",
        "roles"
      ],
      "properties": {
        "authType": {
          "description": "The authentication type the user uses to authenticate. To use SAML this organization must have a configured SAML integration.",
          "type": "string",
          "enum": [
            "default",
            "saml"
          ]
        },
        "email": {
          "description": "The email address of this user. This cannot be changed after creation.",
          "type": "string",
          "maxLength": 191,
          "example": "example@email.com"
        },
        "name": {
          "description": "The first and last name of the user.",
          "type": "string",
          "maxLength": 255,
          "example": "Bob Smith"
        },
        "roles": {
          "description": "The roles for this user. Users must have at least a single role to be a part of an organization.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRoleInput"
          }
        }
      }
    },
    "UserRole": {
      "description": "A user role object.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/userRoleTinyResponse"
        }
      ]
    },
    "UserRoleInput": {
      "type": "object",
      "required": [
        "roleId"
      ],
      "properties": {
        "roleId": {
          "description": "The id of the role the user has been granted.",
          "type": "string",
          "example": "8a9371af-82d1-4158-bf91-4ecc8d3a114c"
        },
        "tagId": {
          "description": "The id of the tag used to grant a role. If no tag is specified, this role applies at the organization level.",
          "type": "string",
          "example": "8a9371af-82d1-4158-bf91-4ecc8d3a114c"
        }
      }
    },
    "UserRoleResponse": {
      "description": "A user role",
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/userRoleTinyResponse"
        },
        "tag": {
          "$ref": "#/definitions/tagTinyResponse"
        }
      }
    },
    "UserUpdate": {
      "description": "The user update arguments",
      "type": "object",
      "properties": {
        "authType": {
          "description": "The authentication type the user uses to authenticate. To use SAML this organization must have a configured SAML integration.",
          "type": "string",
          "enum": [
            "default",
            "saml"
          ]
        },
        "name": {
          "description": "The first and last name of the user.",
          "type": "string",
          "maxLength": 255,
          "example": "Bob Smith"
        },
        "roles": {
          "description": "The roles for this user. Users must have at least a single role to be a part of an organization.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRoleInput"
          }
        }
      }
    },
    "VehicleListResponse": {
      "description": "Response for retreiving a list of vehicles.",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VehicleResponse"
          }
        },
        "pagination": {
          "$ref": "#/definitions/paginationResponse"
        }
      }
    },
    "VehicleLocationsListResponse": {
      "description": "List of vehicle locations for the specified time period.",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LocationsWrapper"
          }
        },
        "pagination": {
          "$ref": "#/definitions/timeseriesPaginationResponse"
        }
      }
    },
    "VehicleResponse": {
      "description": "The vehicle object.",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "assignedDriver": {
          "$ref": "#/definitions/driverTinyResponse"
        },
        "auxInputType1": {
          "description": "The type of aux input that this vehicle has connected to port 1.",
          "type": "string",
          "enum": [
            "Emergency Lights",
            "Emergency Alarm",
            "Stop Paddle",
            "Power Take-Off",
            "Plow",
            "Sweeper",
            "Salter",
            "Boom"
          ],
          "example": "Boom"
        },
        "auxInputType2": {
          "description": "The type of aux input that this vehicle has connected to port 2.",
          "type": "string",
          "enum": [
            "Emergency Lights",
            "Emergency Alarm",
            "Stop Paddle",
            "Power Take-Off",
            "Plow",
            "Sweeper",
            "Salter",
            "Boom"
          ],
          "example": "Plow"
        },
        "engineHours": {
          "description": "Vehicle's engine hours.",
          "type": "integer",
          "example": 8002
        },
        "fuelLevelPercent": {
          "description": "Vehicle's current fuel level, as a whole number percent in range 0-100, inclusive.",
          "type": "integer",
          "example": 95
        },
        "harshAccelSetting": {
          "description": "Enumeration of the harsh acceleration setting types. This setting influences the acceleration sensitivity from which a harsh event is triggered. If set to `Off`, then no harsh events are triggered for the vehicle.",
          "type": "string",
          "enum": [
            "Passenger",
            "Light Truck",
            "Heavy",
            "Off",
            "Auto"
          ],
          "example": "Off"
        },
        "id": {
          "description": "Unique Samsara ID for the vehicle.",
          "type": "string",
          "example": "112"
        },
        "licensePlate": {
          "description": "The license plate of this vehicle.",
          "type": "string",
          "example": "XHK1234"
        },
        "make": {
          "description": "Vehicle's manufacturing make.",
          "type": "string",
          "example": "Ford"
        },
        "model": {
          "description": "Vehicle's manufacturing model.",
          "type": "string",
          "example": "F150"
        },
        "name": {
          "description": "Name of the vehicle.",
          "type": "string",
          "example": "Truck A7"
        },
        "notes": {
          "description": "Notes about a vehicle. Samsara supports a maximum of 255 chars.",
          "type": "string",
          "maxLength": 255,
          "example": "These are notes about this given vehicle."
        },
        "odometerMeters": {
          "description": "Vehicle's current odometer in meters.",
          "type": "integer",
          "example": 160934
        },
        "tags": {
          "description": "An array of all tag mini-objects that are associated with the given vehicle.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/tagTinyResponse"
          }
        },
        "vin": {
          "description": "A vehicle identification number.",
          "type": "string",
          "example": "1FUJA6BD31LJ09646"
        },
        "year": {
          "description": "Vehicle's manufacturing year.",
          "type": "string",
          "example": "2008"
        }
      }
    },
    "annotation": {
      "description": "Annotation for the driving segment.",
      "type": "string",
      "format": "string",
      "example": "Yard move."
    },
    "contactTinyResponse": {
      "description": "A minified contact object",
      "type": "object",
      "properties": {
        "firstName": {
          "description": "First name of the contact.",
          "type": "string",
          "example": "Jane"
        },
        "id": {
          "description": "ID of the contact.",
          "type": "string",
          "example": "123"
        },
        "lastName": {
          "description": "Last name of the contact.",
          "type": "string",
          "example": "Jones"
        }
      }
    },
    "driverId": {
      "description": "ID of Driver to assign this segment to. The driver assignment is a tentative assignment until the ID is 'ACCEPTED'.",
      "type": "string",
      "example": "1234"
    },
    "driverTinyResponse": {
      "description": "A minified driver object.",
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the driver.",
          "type": "string",
          "example": "88668"
        },
        "name": {
          "description": "Name of the driver.",
          "type": "string",
          "example": "Susan Bob"
        }
      }
    },
    "endTimeBodyParam": {
      "description": "End time of the driving segment, specified in RFC 3339 format.",
      "type": "string",
      "format": "date-time",
      "example": "2019-04-17T16:42:55Z"
    },
    "equipmentTinyResponse": {
      "description": "A minified equipment object.",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "ID of the equipment.",
          "type": "string",
          "example": "123456789"
        },
        "name": {
          "description": "Name of the equipment.",
          "type": "string",
          "example": "40' crane #5"
        }
      }
    },
    "location": {
      "description": "Location object",
      "type": "object",
      "required": [
        "latitude",
        "longitude"
      ],
      "properties": {
        "addresses": {
          "description": "Array of address mini-objects, in which the given lat/long coordinates falls within the address's geofence borders. If the location is not within any geofence, then this value will not appear",
          "type": "array",
          "items": {
            "description": "Address book entry, if one exists",
            "type": "object",
            "properties": {
              "id": {
                "description": "Address book identifier",
                "type": "string",
                "example": "123"
              },
              "name": {
                "description": "Name of this address book entry",
                "type": "string",
                "example": "Main Distribution Warehouse"
              }
            }
          }
        },
        "latitude": {
          "description": "GPS latitude represented in degrees",
          "type": "number",
          "format": "double",
          "example": 122.142
        },
        "longitude": {
          "description": "GPS longitude represented in degrees",
          "type": "number",
          "format": "double",
          "example": -93.343
        }
      }
    },
    "paginationResponse": {
      "description": "Pagination parameters.",
      "type": "object",
      "required": [
        "endCursor",
        "hasNextPage"
      ],
      "properties": {
        "endCursor": {
          "description": "Cursor identifier representing the last element in the response. This value should be used in conjunction with a subsequent request's 'after' query parameter.",
          "type": "string",
          "format": "string",
          "example": "MjkY"
        },
        "hasNextPage": {
          "description": "True if there are more pages of results immediately available after this endCursor. Otherwise, wait nextPageAfter seconds before fetching the next page with endCursor.",
          "type": "boolean",
          "example": true
        }
      }
    },
    "standardErrorResponse": {
      "description": "Error response",
      "type": "object",
      "properties": {
        "message": {
          "description": "The message of the error.",
          "type": "string"
        },
        "requestId": {
          "description": "The ID of the request.",
          "type": "string"
        }
      }
    },
    "startTimeBodyParam": {
      "description": "Start time of the driving segment, specified in RFC 3339 format.",
      "type": "string",
      "format": "date-time",
      "example": "2019-04-17T15:42:55Z"
    },
    "tagTinyResponse": {
      "description": "A minified tag object",
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the tag.",
          "type": "string",
          "example": "123"
        },
        "name": {
          "description": "Name of the tag.",
          "type": "string",
          "example": "East Coast"
        }
      }
    },
    "time": {
      "description": "UTC timestamp in RFC 3339 milliseconds format.",
      "type": "string",
      "example": "2019-05-03T04:30:31.492Z"
    },
    "timeseriesPaginationResponse": {
      "description": "Pagination parameters for timeseries pages where results may be delayed.",
      "type": "object",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "nextPageAfter": {
              "description": "The number of seconds to wait before fetching the next page of results. Only populated if hasNextPage is false and additional pages may be available in the future. For example, if nextPageAfter=5, then wait 5 seconds before fetching the next page of results. If pagination is complete or hasNextPage=true, then nextPageAfter will be omitted.",
              "type": "integer",
              "example": 5
            }
          }
        },
        {
          "description": "Pagination parameters.",
          "type": "object",
          "required": [
            "endCursor",
            "hasNextPage"
          ],
          "properties": {
            "endCursor": {
              "description": "Cursor identifier representing the last element in the response. This value should be used in conjunction with a subsequent request's 'after' query parameter.",
              "type": "string",
              "format": "string",
              "example": "MjkY"
            },
            "hasNextPage": {
              "description": "True if there are more pages of results immediately available after this endCursor. Otherwise, wait nextPageAfter seconds before fetching the next page with endCursor.",
              "type": "boolean",
              "example": true
            }
          }
        }
      ]
    },
    "userRoleTinyResponse": {
      "description": "A minified user role object.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique ID for the role.",
          "type": "string",
          "example": "8a9371af-82d1-4158-bf91-4ecc8d3a114c"
        },
        "name": {
          "description": "The name of the role.",
          "type": "string",
          "example": "Full Admin"
        }
      }
    },
    "vehicleTinyResponse": {
      "description": "A minified vehicle object.",
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the vehicle.",
          "type": "string",
          "example": "123456789"
        },
        "name": {
          "description": "Name of the vehicle.",
          "type": "string",
          "example": "Midwest Truck #4"
        }
      }
    }
  },
  "parameters": {
    "createContactParam": {
      "description": "Add a contact.",
      "name": "contact",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/ContactInput"
      }
    },
    "createMessagesParam": {
      "description": "Text to send to a list of driverIds.",
      "name": "createMessages",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "driverIds",
          "text"
        ],
        "properties": {
          "driverIds": {
            "description": "IDs of the drivers for whom the messages are sent to.",
            "type": "array",
            "items": {
              "type": "number",
              "format": "int64",
              "example": 555
            },
            "example": [
              111,
              222,
              333
            ]
          },
          "text": {
            "description": "The text sent in the message.",
            "type": "string",
            "maxLength": 65533,
            "minLength": 1,
            "example": "This is a message."
          }
        }
      }
    },
    "documentCreateParam": {
      "description": "To create a document for a given document type, the document type's uuid needs to be passed in to documentTypeUuid. The list of fields passed in should match the document typeâ€™s list of field types in the correct order. In other words, a field's valueType and value (i.e. only one of: stringValue, numberValue, or photoValue) at index _i_ should match with the document field typeâ€™s valueType at index _i_.",
      "name": "createDocumentParams",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/DocumentCreate"
      }
    },
    "documentQueryByParam": {
      "enum": [
        "created",
        "updated"
      ],
      "type": "string",
      "format": "string",
      "description": "Retrieve most recent documents based on either driverCreatedAtMs or serverUpdatedAtMs. If no value is provided, the default is driverCreatedAtMs.",
      "name": "queryBy",
      "in": "query"
    },
    "documentsDurationMsParam": {
      "type": "integer",
      "format": "int64",
      "description": "Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.",
      "name": "durationMs",
      "in": "query"
    },
    "documentsEndMsParam": {
      "type": "integer",
      "format": "int64",
      "description": "Time in unix milliseconds that represents the oldest documents to return. Used in combination with durationMs. Defaults to now.",
      "name": "endMs",
      "in": "query"
    },
    "endTimeQueryParam": {
      "type": "string",
      "format": "date-time",
      "description": "End of the filter time range, specified in RFC 3339 format. (Example: 2019-06-13T19:08:25Z) Filters based on the server timestamp, i.e. createAtTime.",
      "name": "endTime",
      "in": "query"
    },
    "startTimeQueryParam": {
      "type": "string",
      "format": "date-time",
      "description": "Beginning of the filter time range, specified in RFC 3339 format. (Example: 2019-06-13T18:08:25Z) Filters based on the server timestamp, i.e. createAtTime.",
      "name": "startTime",
      "in": "query"
    }
  },
  "tags": [
    {
      "name": "Addresses",
      "description": "Address description."
    },
    {
      "name": "Contacts",
      "description": "Contacts description."
    },
    {
      "name": "Documents",
      "description": "<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nThis endpoint is still on V1 and may not adhere to \"Kondo\" standards!\n</nh>\n</n>\n\nDocuments description."
    }
  ]
}