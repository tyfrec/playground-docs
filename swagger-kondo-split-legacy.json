{
  "paths": {
    "/v1/fleet/dispatch/routes": {
      "get": {
        "description":
          "<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nThis endpoint is still on V1 and may not adhere to \"Kondo\" standards!\n</nh>\n</n>\nFetch all of the dispatch routes for the group.",
        "tags": ["Routes"],
        "summary": "Fetch all routes",
        "operationId": "fetchAllDispatchRoutes",
        "parameters": [
          {
            "$ref": "#/parameters/groupIdParam"
          },
          {
            "$ref": "#/parameters/routeEndTimeParam"
          },
          {
            "$ref": "#/parameters/routeDurationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "All dispatch route objects for the group.",
            "schema": {
              "$ref": "#/definitions/DispatchRoutes"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description":
          "<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nThis endpoint is still on V1 and may not adhere to \"Kondo\" standards!\n</nh>\n</n>\nCreate a new dispatch route.",
        "tags": ["Routes"],
        "summary": "Create a route",
        "operationId": "createDispatchRoute",
        "parameters": [
          {
            "$ref": "#/parameters/routeCreateParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Created route object including the new route ID.",
            "schema": {
              "$ref": "#/definitions/DispatchRoute"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/dispatch/routes/job_updates": {
      "get": {
        "description":
          "<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nThis endpoint is still on V1 and may not adhere to \"Kondo\" standards!\n</nh>\n</n>\nFetch all updates to a job including route data in the last 24 hours or subsequent to an sequence ID. Returns a maximum of 500 job updates. If more than 500 job updates are available, another request made with the prior request's sequence_id will return the next set of available job updates.",
        "tags": ["Routes"],
        "summary": "Fetch job updates",
        "operationId": "fetchAllRouteJobUpdates",
        "parameters": [
          {
            "$ref": "#/parameters/groupIdParam"
          },
          {
            "$ref": "#/parameters/lastReceivedSequenceIDParam"
          },
          {
            "$ref": "#/parameters/jobUpdatesIncludeParam"
          }
        ],
        "responses": {
          "200": {
            "description": "All job updates on routes.",
            "schema": {
              "$ref": "#/definitions/allRouteJobUpdates"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/dispatch/routes/{route_id}": {
      "get": {
        "description":
          "<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nThis endpoint is still on V1 and may not adhere to \"Kondo\" standards!\n</nh>\n</n>\nFetch a dispatch route by id.",
        "tags": ["Routes"],
        "summary": "Fetch a route",
        "operationId": "getDispatchRouteById",
        "responses": {
          "200": {
            "description": "The dispatch route corresponding to route_id.",
            "schema": {
              "$ref": "#/definitions/DispatchRoute"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description":
          "<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nThis endpoint is still on V1 and may not adhere to \"Kondo\" standards!\n</nh>\n</n>\nUpdate the dispatch route. Allowable updates include adding or removing jobs, and changing job locations and times.",
        "tags": ["Routes"],
        "summary": "Update a route",
        "operationId": "updateDispatchRouteById",
        "parameters": [
          {
            "$ref": "#/parameters/routeUpdateParam"
          }
        ],
        "responses": {
          "200": {
            "description": "The updated route corresponding to route_id.",
            "schema": {
              "$ref": "#/definitions/DispatchRoute"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description":
          "<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nThis endpoint is still on V1 and may not adhere to \"Kondo\" standards!\n</nh>\n</n>\nDelete a dispatch route and its associated jobs.",
        "tags": ["Routes"],
        "summary": "Delete a route",
        "operationId": "deleteDispatchRouteById",
        "responses": {
          "200": {
            "description": "Successfully deleted the dispatch route. No response body is returned."
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "description": "ID of the dispatch route. Must contain only digits 0-9.",
          "name": "route_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/fleet/dispatch/routes/{route_id}/history": {
      "get": {
        "description":
          "<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nThis endpoint is still on V1 and may not adhere to \"Kondo\" standards!\n</nh>\n</n>\nFetch the history of a dispatch route.",
        "tags": ["Routes"],
        "summary": "Fetch route history",
        "operationId": "getDispatchRouteHistory",
        "parameters": [
          {
            "$ref": "#/parameters/routeHistoryStartTimeParam"
          },
          {
            "$ref": "#/parameters/routeHistoryEndTimeParam"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of the route with history. Must contain only digits 0-9.",
            "name": "route_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The historical route state changes between start_time and end_time.",
            "schema": {
              "$ref": "#/definitions/DispatchRouteHistory"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/drivers/{driver_id}/hos_daily_logs": {
      "post": {
        "description":
          "<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nThis endpoint is still on V1 and may not adhere to \"Kondo\" standards!\n</nh>\n</n>\nGet summarized daily HOS charts for a specified driver.",
        "tags": ["HOS"],
        "summary": "Get summarized daily HOS charts for a specified driver",
        "operationId": "getFleetDriversHosDailyLogs",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of the driver with HOS logs.",
            "name": "driver_id",
            "in": "path",
            "required": true
          },
          {
            "name": "hosLogsParam",
            "in": "body",
            "schema": {
              "type": "object",
              "required": ["groupId", "startMs", "endMs"],
              "properties": {
                "endMs": {
                  "description": "End of the time range, specified in milliseconds UNIX time.",
                  "type": "integer",
                  "format": "int64",
                  "example": 1462881998034
                },
                "groupId": {
                  "description": "Group ID to query.",
                  "type": "integer",
                  "format": "int64",
                  "example": 101
                },
                "startMs": {
                  "description": "Beginning of the time range, specified in milliseconds UNIX time.",
                  "type": "integer",
                  "format": "int64",
                  "example": 1462878398034
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description":
              "Distance traveled and time active for each driver in the organization over the specified time period.",
            "schema": {
              "$ref": "#/definitions/DriverDailyLogResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/hos_authentication_logs": {
      "get": {
        "description":
          "<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nThis endpoint is still on V1 and may not adhere to \"Kondo\" standards!\n</nh>\n</n>\nGet the HOS (hours of service) signin and signout logs for the specified driver. The response includes 4 fields that are now deprecated.",
        "tags": ["HOS"],
        "summary": "Get HOS signin and signout",
        "operationId": "getFleetHosAuthenticationLogs",
        "parameters": [
          {
            "$ref": "#/parameters/groupIdQueryParam"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Driver ID to query.",
            "name": "driverId",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Beginning of the time range, specified in milliseconds UNIX time.",
            "name": "startMs",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "End of the time range, specified in milliseconds UNIX time.",
            "name": "endMs",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "HOS authentication logs for the specified driver.",
            "schema": {
              "$ref": "#/definitions/HosAuthenticationLogsResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/hos_logs": {
      "post": {
        "description":
          "<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nThis endpoint is still on V1 and may not adhere to \"Kondo\" standards!\n</nh>\n</n>\nGet the HOS (hours of service) logs for the specified driver. This method returns all the HOS statuses that the driver was in during this time period.",
        "tags": ["HOS"],
        "summary": "Get HOS logs for a specific driver",
        "operationId": "getFleetHosLogs",
        "parameters": [
          {
            "name": "hosLogsParam",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["groupId", "driverId", "startMs", "endMs"],
              "properties": {
                "driverId": {
                  "description": "Driver ID to query.",
                  "type": "integer",
                  "format": "int64",
                  "example": 444
                },
                "endMs": {
                  "description": "End of the time range, specified in milliseconds UNIX time.",
                  "type": "integer",
                  "example": 1462881998034
                },
                "groupId": {
                  "description": "Optional group ID if the organization has multiple groups (uncommon).",
                  "type": "integer",
                  "format": "int64",
                  "example": 101
                },
                "startMs": {
                  "description": "Beginning of the time range, specified in milliseconds UNIX time.",
                  "type": "integer",
                  "example": 1462878398034
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HOS logs for the specified driver.",
            "schema": {
              "$ref": "#/definitions/HosLogsResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/hos_logs_summary": {
      "get": {
        "description":
          "<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nThis endpoint is still on V1 and may not adhere to \"Kondo\" standards!\n</nh>\n</n>\nGet the current HOS status for all drivers in the group. Note that this includes inactive as well as active drivers. You may need to upgrade your API token to version 2019-07-31 or later to leverage response pagination. [See here](https://kb.samsara.com/hc/en-us/articles/360026132972-Upgrading-API-Tokens)",
        "tags": ["HOS"],
        "summary": "Get current HOS status for all drivers",
        "operationId": "getFleetHosLogsSummary",
        "parameters": [
          {
            "$ref": "#/parameters/groupIdQueryParam"
          },
          {
            "type": "string",
            "description":
              "Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the 'limit' parameter.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "description":
              "Pagination parameter indicating the number of results to return in this request. Used in conjunction with 'after'.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "HOS logs for the specified driver.",
            "schema": {
              "$ref": "#/definitions/HosLogsSummaryResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/maintenance/dvirs": {
      "get": {
        "description":
          "<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nThis endpoint is still on V1 and may not adhere to \"Kondo\" standards!\n</nh>\n</n>\nGet DVIRs for the org within provided time constraints",
        "tags": ["Maintenance"],
        "summary": "Get DVIRs",
        "operationId": "getDvirs",
        "parameters": [
          {
            "type": "integer",
            "description": "time in millis until the last dvir log.",
            "name": "end_ms",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "time in millis which corresponds to the duration before the end_ms.",
            "name": "duration_ms",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/groupIdQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "DVIRs for the specified duration.",
            "schema": {
              "$ref": "#/definitions/DvirListResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description":
          "<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nThis endpoint is still on V1 and may not adhere to \"Kondo\" standards!\n</nh>\n</n>\nCreate a new dvir, marking a vehicle or trailer safe or unsafe.",
        "tags": ["Maintenance"],
        "summary": "Create a new DVIR",
        "operationId": "createDvir",
        "parameters": [
          {
            "$ref": "#/parameters/createDvirParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created DVIR.",
            "schema": {
              "$ref": "#/definitions/DvirBase"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/maintenance/list": {
      "get": {
        "description":
          "<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nThis endpoint is still on V1 and may not adhere to \"Kondo\" standards!\n</nh>\n</n>\nGet list of the vehicles with any engine faults or check light data.",
        "tags": ["Maintenance"],
        "summary": "Get vehicles with engine faults or check lights",
        "operationId": "getFleetMaintenanceList",
        "parameters": [
          {
            "$ref": "#/parameters/groupIdQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "List of vehicles and maintenance information about each.",
            "schema": {
              "type": "object",
              "properties": {
                "vehicles": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/VehicleMaintenance"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/sensors/cargo": {
      "post": {
        "description":
          "<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nThis endpoint is still on V1 and may not adhere to \"Kondo\" standards!\n</nh>\n</n>\nGet cargo monitor status (empty / full) for requested sensors.",
        "tags": ["Sensors"],
        "summary": "Get cargo status",
        "operationId": "getSensorsCargo",
        "parameters": [
          {
            "$ref": "#/parameters/sensorParam"
          }
        ],
        "responses": {
          "200": {
            "description": "List of sensor objects containing the current cargo status reported by each sensor.",
            "schema": {
              "$ref": "#/definitions/CargoResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/sensors/door": {
      "post": {
        "description":
          "<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nThis endpoint is still on V1 and may not adhere to \"Kondo\" standards!\n</nh>\n</n>\nGet door monitor status (closed / open) for requested sensors.",
        "tags": ["Sensors"],
        "summary": "Get door status",
        "operationId": "getSensorsDoor",
        "parameters": [
          {
            "$ref": "#/parameters/sensorParam"
          }
        ],
        "responses": {
          "200": {
            "description": "List of sensor objects containing the current door status reported by each sensor.",
            "schema": {
              "$ref": "#/definitions/DoorResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/sensors/history": {
      "post": {
        "description":
          "<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nThis endpoint is still on V1 and may not adhere to \"Kondo\" standards!\n</nh>\n</n>\nGet historical data for specified sensors. This method returns a set of historical data for the specified sensors in the specified time range and at the specified time resolution.",
        "tags": ["Sensors"],
        "summary": "Get sensor history",
        "operationId": "getSensorsHistory",
        "parameters": [
          {
            "description": "Group ID, time range and resolution, and list of sensor ID, field pairs to query.",
            "name": "historyParam",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["groupId", "startMs", "endMs", "stepMs", "series"],
              "properties": {
                "endMs": {
                  "description": "End of the time range, specified in milliseconds UNIX time.",
                  "type": "integer",
                  "example": 1462881998034
                },
                "fillMissing": {
                  "type": "string",
                  "default": "withNull",
                  "enum": ["withNull", "withPrevious"]
                },
                "groupId": {
                  "description": "Optional group ID if the organization has multiple groups (uncommon).",
                  "type": "integer",
                  "format": "int64",
                  "example": 101
                },
                "series": {
                  "type": "array",
                  "items": {
                    "description": "Sensor ID and field to query.",
                    "type": "object",
                    "required": ["widgetId", "field"],
                    "properties": {
                      "field": {
                        "description": "Field to query.",
                        "type": "string",
                        "enum": [
                          "ambientTemperature",
                          "cargoPercent",
                          "currentLoop1Raw",
                          "currentLoop1Mapped",
                          "currentLoop2Raw",
                          "currentLoop2Mapped",
                          "doorClosed",
                          "humidity",
                          "pmPowerTotal",
                          "pmPhase1Power",
                          "pmPhase2Power",
                          "pmPhase3Power",
                          "pmPhase1PowerFactor",
                          "pmPhase2PowerFactor",
                          "pmPhase3PowerFactor",
                          "probeTemperature"
                        ],
                        "example": "ambientTemperature"
                      },
                      "widgetId": {
                        "description": "Sensor ID to query.",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                      }
                    }
                  }
                },
                "startMs": {
                  "description": "Beginning of the time range, specified in milliseconds UNIX time.",
                  "type": "integer",
                  "example": 1462878398034
                },
                "stepMs": {
                  "description":
                    "Time resolution for which data should be returned, in milliseconds. Specifying 3600000 will return data at hour intervals.",
                  "type": "integer",
                  "example": 3600000
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description":
              "List of results objects, each containing a time and a datapoint for each requested sensor/field pair.",
            "schema": {
              "$ref": "#/definitions/SensorHistoryResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/sensors/humidity": {
      "post": {
        "description":
          "<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nThis endpoint is still on V1 and may not adhere to \"Kondo\" standards!\n</nh>\n</n>\nGet humidity for requested sensors. This method returns the current relative humidity for the requested sensors.",
        "tags": ["Sensors"],
        "summary": "Get humidity",
        "operationId": "getSensorsHumidity",
        "parameters": [
          {
            "$ref": "#/parameters/sensorParam"
          }
        ],
        "responses": {
          "200": {
            "description": "List of sensor objects containing the current humidity reported by each sensor.",
            "schema": {
              "$ref": "#/definitions/HumidityResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/sensors/list": {
      "post": {
        "description":
          "<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nThis endpoint is still on V1 and may not adhere to \"Kondo\" standards!\n</nh>\n</n>\nGet sensor objects. This method returns a list of the sensor objects in the Samsara Cloud and information about them.",
        "tags": ["Sensors"],
        "summary": "Get list of sensors",
        "operationId": "getSensors",
        "parameters": [
          {
            "$ref": "#/parameters/groupIdBodyParam"
          }
        ],
        "responses": {
          "200": {
            "description": "List of sensor objects.",
            "schema": {
              "type": "object",
              "properties": {
                "sensors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Sensor"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/sensors/temperature": {
      "post": {
        "description":
          "<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nThis endpoint is still on V1 and may not adhere to \"Kondo\" standards!\n</nh>\n</n>\nGet temperature for requested sensors. This method returns the current ambient temperature (and probe temperature if applicable) for the requested sensors.",
        "tags": ["Sensors"],
        "summary": "Get temperature",
        "operationId": "getSensorsTemperature",
        "parameters": [
          {
            "$ref": "#/parameters/sensorParam"
          }
        ],
        "responses": {
          "200": {
            "description": "List of sensor objects containing the current temperature reported by each sensor.",
            "schema": {
              "$ref": "#/definitions/TemperatureResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/trips": {
      "get": {
        "description":
          "<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nThis endpoint is still on V1 and may not adhere to \"Kondo\" standards!\n</nh>\n</n>\nGet historical trips data for specified vehicle. This method returns a set of historical trips data for the specified vehicle in the specified time range.",
        "tags": ["Vehicles"],
        "summary": "Get vehicle trips",
        "operationId": "getFleetTrips",
        "parameters": [
          {
            "$ref": "#/parameters/groupIdQueryParam"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Vehicle ID to query.",
            "name": "vehicleId",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description":
              "Beginning of the time range, specified in milliseconds UNIX time. Limited to a 90 day window with respect to startMs and endMs",
            "name": "startMs",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "End of the time range, specified in milliseconds UNIX time.",
            "name": "endMs",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description":
              "List of trips taken by the requested vehicle within the specified timeframe. Ongoing trips will be returned with 9223372036854775807 as their endMs.",
            "schema": {
              "$ref": "#/definitions/TripResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CargoResponse": {
      "description": "Contains the current cargo status of a sensor.",
      "type": "object",
      "properties": {
        "groupId": {
          "type": "integer",
          "format": "int64",
          "example": 101
        },
        "sensors": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "cargoEmpty": {
                "description": "Flag indicating whether the current cargo is empty or loaded.",
                "type": "boolean",
                "example": true
              },
              "cargoStatusTime": {
                "description": "The timestamp of reported cargo status, specified in RFC 3339 time.",
                "type": "string",
                "example": "2019-04-17T16:42:55Z"
              },
              "id": {
                "description": "ID of the sensor.",
                "type": "integer",
                "format": "int64",
                "example": 122
              },
              "name": {
                "description": "Name of the sensor.",
                "type": "string",
                "example": "Trailer Cargo Sensor"
              },
              "trailerId": {
                "description":
                  "ID of the trailer associated with the sensor for the data point. If no trailer is connected, this parameter will not be reported.",
                "type": "integer",
                "example": 123
              },
              "vehicleId": {
                "description":
                  "ID of the vehicle associated with the sensor for the data point. If no vehicle is connected, this parameter will not be reported.",
                "type": "integer",
                "example": 124
              }
            }
          }
        }
      }
    },
    "DispatchJob": {
      "allOf": [
        {
          "type": "object",
          "required": ["id", "group_id", "dispatch_route_id", "job_state"],
          "properties": {
            "arrived_at_ms": {
              "description": "The time at which the driver arrived at the job destination.",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "completed_at_ms": {
              "description":
                "The time at which the job was marked complete (e.g. started driving to the next destination).",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "dispatch_route_id": {
              "description": "ID of the route that this job belongs to.",
              "type": "integer",
              "format": "int64",
              "example": 55
            },
            "documents": {
              "description": "Document submissions associated with this job.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DispatchJobDocumentInfo"
              }
            },
            "driver_id": {
              "description": "ID of the driver assigned to the dispatch job.",
              "type": "integer",
              "format": "int64",
              "example": 444
            },
            "en_route_at_ms": {
              "description":
                "The time at which the assigned driver started fulfilling the job (e.g. started driving to the destination).",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "estimated_arrival_ms": {
              "description":
                "The time at which the assigned driver is estimated to arrive at the job destination. Only valid for en-route jobs.",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "fleet_viewer_url": {
              "description": "Fleet viewer url of the dispatch job.",
              "type": "string",
              "example": "https://cloud.samsara.com/fleet/viewer/job/fleet_viewer_token"
            },
            "group_id": {
              "type": "integer",
              "format": "int64",
              "example": 101
            },
            "id": {
              "description": "ID of the Samsara dispatch job.",
              "type": "integer",
              "format": "int64",
              "example": 773
            },
            "job_state": {
              "$ref": "#/definitions/jobStatus"
            },
            "skipped_at_ms": {
              "description": "The time at which the job was marked skipped.",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "vehicle_id": {
              "description": "ID of the vehicle used for the dispatch job.",
              "type": "integer",
              "format": "int64",
              "example": 112
            }
          }
        },
        {
          "$ref": "#/definitions/DispatchJobCreate"
        }
      ]
    },
    "DispatchJobCreate": {
      "type": "object",
      "required": ["scheduled_arrival_time_ms"],
      "properties": {
        "destination_address": {
          "description":
            "The address of the job destination, as it would be recognized if provided to maps.google.com. Optional if a valid destination address ID is provided.",
          "type": "string",
          "example": "123 Main St, Philadelphia, PA 19106"
        },
        "destination_address_id": {
          "description":
            "ID of the job destination associated with an address book entry. Optional if valid values are provided for destination address and latitude/longitude. If a valid destination address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the destination name is not provided.",
          "type": "integer",
          "format": "int64",
          "example": 67890
        },
        "destination_lat": {
          "description":
            "Latitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.",
          "type": "number",
          "format": "double",
          "example": 123.456
        },
        "destination_lng": {
          "description":
            "Longitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.",
          "type": "number",
          "format": "double",
          "example": 37.459
        },
        "destination_name": {
          "description":
            "The name of the job destination. If provided, it will take precedence over the name of the address book entry.",
          "type": "string",
          "example": "ACME Inc. Philadelphia HQ"
        },
        "notes": {
          "description":
            "Notes regarding the details of this job, maximum of 2000 characters; newline characters ('\\n')can be used for formatting.",
          "type": "string",
          "example": "Ensure crates are stacked no more than 3 high."
        },
        "scheduled_arrival_time_ms": {
          "description": "The time at which the assigned driver is scheduled to arrive at the job destination.",
          "type": "integer",
          "format": "int64",
          "example": 1462881998034
        },
        "scheduled_departure_time_ms": {
          "description": "The time at which the assigned driver is scheduled to depart from the job destination.",
          "type": "integer",
          "format": "int64",
          "example": 1462881998034
        }
      }
    },
    "DispatchJobDocumentInfo": {
      "type": "object",
      "required": ["driverId", "id"],
      "properties": {
        "driverId": {
          "description": "ID of driver that submitted the document.",
          "type": "integer",
          "example": 1234
        },
        "id": {
          "description":
            "ID of document. This can be used to query for the document's info via the /v1/fleet/drivers/{driver_id}/documents/{document_id} endpoint",
          "type": "string",
          "example": "2018_42424242"
        }
      }
    },
    "DispatchJobUpdate": {
      "allOf": [
        {
          "type": "object",
          "required": ["id", "dispatch_jobs"],
          "properties": {
            "id": {
              "description": "ID of the Samsara dispatch job to update",
              "type": "integer",
              "format": "int64",
              "example": 42
            }
          }
        },
        {
          "$ref": "#/definitions/DispatchJobCreate"
        }
      ]
    },
    "DispatchRoute": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "dispatch_jobs": {
              "description": "The dispatch jobs associated with this route.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DispatchJob"
              }
            },
            "id": {
              "description": "ID of the Samsara dispatch route.",
              "type": "integer",
              "format": "int64",
              "example": 556
            }
          }
        },
        {
          "$ref": "#/definitions/DispatchRouteBase"
        }
      ]
    },
    "DispatchRouteBase": {
      "type": "object",
      "properties": {
        "actual_end_ms": {
          "description": "The time in Unix epoch milliseconds that the route actually ended.",
          "type": "integer",
          "format": "int64",
          "example": 1462882101000
        },
        "actual_start_ms": {
          "description": "The time in Unix epoch milliseconds that the route actually started.",
          "type": "integer",
          "format": "int64",
          "example": 1462882098000
        },
        "driver_id": {
          "description":
            "ID of the driver assigned to the dispatch route. Note that driver_id and vehicle_id are mutually exclusive. If neither is specified, then the route is unassigned.",
          "type": "integer",
          "format": "int64",
          "example": 555
        },
        "group_id": {
          "description": "ID of the group if the organization has multiple groups (optional).",
          "type": "integer",
          "format": "int64",
          "example": 101
        },
        "name": {
          "description": "Descriptive name of this route.",
          "type": "string",
          "example": "Bid #123"
        },
        "notes": {
          "description":
            "Notes regarding the details of this route; maximum of 2000 characters; newline characters ('\\n')can be used for formatting.",
          "type": "string",
          "example":
            "Please make sure to confirm crate count at each stop on this route.\nTotal number of crates for route: 23."
        },
        "odometer_end_meters": {
          "description":
            "Odometer reading at the end of the route. Will not be returned if Route is not completed or if Odometer information is not available for the relevant vehicle.",
          "type": "integer",
          "format": "int64",
          "example": 2000000
        },
        "odometer_start_meters": {
          "description":
            "Odometer reading at the start of the route. Will not be returned if Route has not started or if Odometer information is not available for the relevant vehicle.",
          "type": "integer",
          "format": "int64",
          "example": 1000000
        },
        "scheduled_end_ms": {
          "description": "The time in Unix epoch milliseconds that the last job in the route is scheduled to end.",
          "type": "integer",
          "format": "int64",
          "example": 1462881998034
        },
        "scheduled_meters": {
          "description": "The distance expected to be traveled for this route in meters.",
          "type": "integer",
          "format": "int64",
          "example": 10000
        },
        "scheduled_start_ms": {
          "description": "The time in Unix epoch milliseconds that the route is scheduled to start.",
          "type": "integer",
          "format": "int64",
          "example": 1462881998034
        },
        "start_location_address": {
          "description":
            "The address of the route's starting location, as it would be recognized if provided to maps.google.com. Optional if a valid start location address ID is provided.",
          "type": "string",
          "example": "123 Main St, Philadelphia, PA 19106"
        },
        "start_location_address_id": {
          "description":
            "ID of the start location associated with an address book entry. Optional if valid values are provided for start location address and latitude/longitude. If a valid start location address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the start location name is not provided.",
          "type": "integer",
          "format": "int64",
          "example": 67890
        },
        "start_location_lat": {
          "description":
            "Latitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.",
          "type": "number",
          "format": "double",
          "example": 123.456
        },
        "start_location_lng": {
          "description":
            "Longitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.",
          "type": "number",
          "format": "double",
          "example": 37.459
        },
        "start_location_name": {
          "description":
            "The name of the route's starting location. If provided, it will take precedence over the name of the address book entry.",
          "type": "string",
          "example": "ACME Inc. Philadelphia HQ"
        },
        "trailer_id": {
          "description":
            "ID of the trailer assigned to the dispatch route. Note that trailers can only be assigned to routes that have a Vehicle or Driver assigned to them.",
          "type": "integer",
          "format": "int64",
          "example": 666
        },
        "vehicle_id": {
          "description":
            "ID of the vehicle assigned to the dispatch route. Note that vehicle_id and driver_id are mutually exclusive. If neither is specified, then the route is unassigned.",
          "type": "integer",
          "format": "int64",
          "example": 444
        }
      }
    },
    "DispatchRouteCreate": {
      "allOf": [
        {
          "type": "object",
          "required": ["dispatch_jobs"],
          "properties": {
            "dispatch_jobs": {
              "description": "The dispatch jobs to create for this route.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DispatchJobCreate"
              }
            }
          }
        },
        {
          "$ref": "#/definitions/DispatchRouteCreateBase"
        }
      ]
    },
    "DispatchRouteCreateBase": {
      "type": "object",
      "required": ["name", "scheduled_start_ms"],
      "properties": {
        "driver_id": {
          "description":
            "ID of the driver assigned to the dispatch route. Note that driver_id and vehicle_id are mutually exclusive. If neither is specified, then the route is unassigned.",
          "type": "integer",
          "format": "int64",
          "example": 555
        },
        "group_id": {
          "description": "ID of the group. This can be found on the API Tokens page.",
          "type": "integer",
          "format": "int64",
          "example": 101
        },
        "name": {
          "description": "Descriptive name of this route.",
          "type": "string",
          "example": "Bid #123"
        },
        "notes": {
          "description":
            "Notes regarding the details of this route; maximum of 2000 characters; newline characters ('\\n')can be used for formatting.",
          "type": "string",
          "example":
            "Please make sure to confirm crate count at each stop on this route.\nTotal number of crates for route: 23."
        },
        "scheduled_end_ms": {
          "description": "The time in Unix epoch milliseconds that the last job in the route is scheduled to end.",
          "type": "integer",
          "format": "int64",
          "example": 1462881998034
        },
        "scheduled_meters": {
          "description": "The distance expected to be traveled for this route in meters.",
          "type": "integer",
          "format": "int64",
          "example": 10000
        },
        "scheduled_start_ms": {
          "description": "The time in Unix epoch milliseconds that the route is scheduled to start.",
          "type": "integer",
          "format": "int64",
          "example": 1462881998034
        },
        "start_location_address": {
          "description":
            "The address of the route's starting location, as it would be recognized if provided to maps.google.com. Optional if a valid start location address ID is provided.",
          "type": "string",
          "example": "123 Main St, Philadelphia, PA 19106"
        },
        "start_location_address_id": {
          "description":
            "ID of the start location associated with an address book entry. Optional if valid values are provided for start location address and latitude/longitude. If a valid start location address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the start location name is not provided.",
          "type": "integer",
          "format": "int64",
          "example": 67890
        },
        "start_location_lat": {
          "description":
            "Latitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.",
          "type": "number",
          "format": "double",
          "example": 123.456
        },
        "start_location_lng": {
          "description":
            "Longitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.",
          "type": "number",
          "format": "double",
          "example": 37.459
        },
        "start_location_name": {
          "description":
            "The name of the route's starting location. If provided, it will take precedence over the name of the address book entry.",
          "type": "string",
          "example": "ACME Inc. Philadelphia HQ"
        },
        "trailer_id": {
          "description":
            "ID of the trailer assigned to the dispatch route. Note that trailers can only be assigned to routes that have a Vehicle or Driver assigned to them.",
          "type": "integer",
          "format": "int64",
          "example": 666
        },
        "vehicle_id": {
          "description":
            "ID of the vehicle assigned to the dispatch route. Note that vehicle_id and driver_id are mutually exclusive. If neither is specified, then the route is unassigned.",
          "type": "integer",
          "format": "int64",
          "example": 444
        }
      }
    },
    "DispatchRouteHistoricalEntry": {
      "type": "object",
      "properties": {
        "changed_at_ms": {
          "description": "Timestamp that the route was updated, represented as Unix milliseconds since epoch.",
          "type": "integer",
          "format": "int64",
          "example": 1499411220000
        },
        "route": {
          "$ref": "#/definitions/DispatchRoute"
        }
      }
    },
    "DispatchRouteHistory": {
      "type": "object",
      "properties": {
        "history": {
          "description": "History of the route's state changes.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DispatchRouteHistoricalEntry"
          }
        }
      }
    },
    "DispatchRouteUpdate": {
      "allOf": [
        {
          "type": "object",
          "required": ["dispatch_jobs", "group_id"],
          "properties": {
            "dispatch_jobs": {
              "description": "The dispatch jobs for the route.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DispatchJobUpdate"
              }
            }
          }
        },
        {
          "$ref": "#/definitions/DispatchRouteUpdateBase"
        }
      ]
    },
    "DispatchRouteUpdateBase": {
      "allOf": [
        {
          "type": "object",
          "required": ["id"],
          "properties": {
            "id": {
              "description": "ID of route. This must match the route ID passed in URL.",
              "type": "integer",
              "format": "int64",
              "example": "42"
            }
          }
        },
        {
          "$ref": "#/definitions/DispatchRouteCreateBase"
        }
      ]
    },
    "DispatchRoutes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DispatchRoute"
      }
    },
    "DoorResponse": {
      "description": "Contains the current door status of a sensor.",
      "type": "object",
      "properties": {
        "groupId": {
          "type": "integer",
          "format": "int64",
          "example": 101
        },
        "sensors": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "doorClosed": {
                "description": "Flag indicating whether the current door is closed or open.",
                "type": "boolean",
                "example": true
              },
              "doorStatusTime": {
                "description": "The timestamp of reported door status, specified in RFC 3339 time.",
                "type": "string",
                "example": "2019-04-17T16:42:55Z"
              },
              "id": {
                "description": "ID of the sensor.",
                "type": "integer",
                "format": "int64",
                "example": 122
              },
              "name": {
                "description": "Name of the sensor.",
                "type": "string",
                "example": "Trailer Door Sensor"
              },
              "trailerId": {
                "description":
                  "ID of the trailer associated with the sensor for the data point. If no trailer is connected, this parameter will not be reported.",
                "type": "integer",
                "example": 123
              },
              "vehicleId": {
                "description":
                  "ID of the vehicle associated with the sensor for the data point. If no vehicle is connected, this parameter will not be reported.",
                "type": "integer",
                "example": 124
              }
            }
          }
        }
      }
    },
    "DriverDailyLogResponse": {
      "type": "object",
      "properties": {
        "days": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "activeHours": {
                "description": "Hours spent on duty or driving, rounded to two decimal places.",
                "type": "number",
                "format": "double",
                "example": 5.4
              },
              "activeMs": {
                "description": "Milliseconds spent on duty or driving.",
                "type": "integer",
                "format": "int64",
                "example": 691200
              },
              "certified": {
                "description": "Whether this HOS day chart was certified by the driver.",
                "type": "boolean"
              },
              "certifiedAtMs": {
                "description":
                  "Unix epoch time (in ms) of time when this chart was certified. If this chart is uncertified, 0.",
                "type": "number",
                "format": "int64"
              },
              "distanceMiles": {
                "description": "Distance driven in miles, rounded to two decimal places.",
                "type": "number",
                "format": "double",
                "example": 123.24
              },
              "endMs": {
                "description": "End of the HOS day, specified in milliseconds UNIX time.",
                "type": "integer",
                "example": 1473836400000
              },
              "shippingDocIds": {
                "description": "List of customer shipping document IDs associated with the driver for the day.",
                "type": "object",
                "format": "int64",
                "example": [14334, 104920]
              },
              "startMs": {
                "description": "End of the HOS day, specified in milliseconds UNIX time.",
                "type": "integer",
                "example": 1473750000000
              },
              "trailerIds": {
                "description": "List of trailer ID's associated with the driver for the day.",
                "type": "object",
                "format": "int64",
                "example": [10293, 192933]
              },
              "vehicleIds": {
                "description": "List of vehicle ID's associated with the driver for the day.",
                "type": "object",
                "format": "int64",
                "example": [192319, 12958]
              }
            }
          }
        }
      }
    },
    "DvirBase": {
      "type": "object",
      "properties": {
        "authorSignature": {
          "description": "The authors signature for the DVIR.",
          "type": "object",
          "properties": {
            "driverId": {
              "description":
                "ID of the driver who signed the DVIR. Will not be returned if mechanicUserId is returned.",
              "type": "integer",
              "format": "int64",
              "example": 2581
            },
            "email": {
              "description": "Email of the  driver|mechanic who signed the DVIR.",
              "type": "string",
              "example": "j.smith@yahoo.com"
            },
            "mechanicUserId": {
              "description": "ID of the mechanic who signed the DVIR. Will not be returned if driverId is returned.",
              "type": "integer",
              "format": "int64",
              "example": 14849
            },
            "name": {
              "description": "The name of the driver or mechanic who signed the DVIR.",
              "type": "string",
              "example": "John Smith"
            },
            "signedAt": {
              "description": "The time in millis when the DVIR was signed",
              "type": "integer",
              "format": "int64",
              "example": 12535500000
            },
            "type": {
              "description": "Type corresponds to whether the signature corresponds to driver|mechanic.",
              "type": "string",
              "example": "driver"
            },
            "username": {
              "description": "Username of the  driver|mechanic who signed the DVIR.",
              "type": "string",
              "example": "jsmith"
            }
          }
        },
        "defectsCorrected": {
          "description": "Signifies if the defects on the vehicle corrected after the DVIR is done.",
          "type": "boolean",
          "example": true
        },
        "defectsNeedNotBeCorrected": {
          "description": "Signifies if the defects on this vehicle can be ignored.",
          "type": "boolean",
          "example": false
        },
        "id": {
          "description": "The id of this DVIR record.",
          "type": "integer",
          "format": "int64",
          "example": 19
        },
        "inspectionType": {
          "description": "Inspection type of the DVIR.",
          "type": "string",
          "example": "pre trip"
        },
        "mechanicNotes": {
          "description": "The mechanics notes on the DVIR.",
          "type": "string",
          "example": "The vehicle is now safe."
        },
        "mechanicOrAgentSignature": {
          "description": "The mechanic's or agent's signature for the DVIR.",
          "type": "object",
          "properties": {
            "driverId": {
              "description":
                "ID of the driver who signed the DVIR. Will not be returned if mechanicUserId is returned.",
              "type": "integer",
              "format": "int64",
              "example": 2581
            },
            "email": {
              "description": "Email of the  agent|mechanic who signed the DVIR.",
              "type": "string",
              "example": "j.smith@yahoo.com"
            },
            "mechanicUserId": {
              "description": "ID of the mechanic who signed the DVIR. Will not be returned if driverId is returned.",
              "type": "integer",
              "format": "int64",
              "example": 14849
            },
            "name": {
              "description": "The name of the agent or mechanic who signed the DVIR.",
              "type": "string",
              "example": "John Smith"
            },
            "signedAt": {
              "description": "The time in millis when the DVIR was signed",
              "type": "integer",
              "format": "int64",
              "example": 12535500000
            },
            "type": {
              "description": "Type corresponds to whether the signature corresponds to driver|mechanic.",
              "type": "string",
              "example": "driver"
            },
            "username": {
              "description": "Username of the  agent|mechanic who signed the DVIR.",
              "type": "string",
              "example": "jsmith"
            }
          }
        },
        "nextDriverSignature": {
          "description": "The next driver signature for the DVIR.",
          "type": "object",
          "properties": {
            "driverId": {
              "description": "ID of the driver who signed the DVIR",
              "type": "integer",
              "format": "int64",
              "example": 2581
            },
            "email": {
              "description": "Email of the  driver who signed the next DVIR on this vehicle.",
              "type": "string",
              "example": "j.smith@yahoo.com"
            },
            "name": {
              "description": "The name of the driver who signed the next DVIR on this vehicle.",
              "type": "string",
              "example": "John Smith"
            },
            "signedAt": {
              "description": "The time in millis when the next driver signed the DVIR on this vehicle.",
              "type": "integer",
              "format": "int64",
              "example": 12535500000
            },
            "type": {
              "description": "Type corresponds to driver.",
              "type": "string",
              "example": "driver"
            },
            "username": {
              "description": "Username of the  driver who signed the next DVIR on this vehicle.",
              "type": "string",
              "example": "jsmith"
            }
          }
        },
        "odometerMiles": {
          "description": "The odometer reading in miles for the vehicle when the DVIR was done.",
          "type": "integer",
          "format": "int64",
          "example": 49912
        },
        "startedAtMs": {
          "description": "Timestamp when driver began filling out this DVIR, in UNIX milliseconds.",
          "type": "integer",
          "format": "int64",
          "example": 1453449599999
        },
        "timeMs": {
          "description": "Timestamp of when this DVIR was signed \u0026 completed, in UNIX milliseconds.",
          "type": "integer",
          "format": "int64",
          "example": 1453449599999
        },
        "trailerDefects": {
          "description": "Defects registered for the trailer which was part of the DVIR.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "comment": {
                "description": "The comment describing the type of DVIR defect",
                "type": "string",
                "example": "Air Compressor not working"
              },
              "defectType": {
                "description": "The type of DVIR defect",
                "type": "string",
                "example": "Air Compressor"
              }
            }
          }
        },
        "trailerId": {
          "description": "The id of the trailer which was part of the DVIR.",
          "type": "integer",
          "example": 19
        },
        "trailerName": {
          "description": "The name of the trailer which was part of the DVIR.",
          "type": "string",
          "example": "Storer's Trailer 19"
        },
        "vehicle": {
          "description": "The vehicle on which DVIR was done.",
          "type": "object",
          "properties": {
            "id": {
              "description": "The vehicle id on which DVIR was done.",
              "type": "integer",
              "format": "int64",
              "example": 19
            },
            "name": {
              "description": "The vehicle on which DVIR was done.",
              "type": "string",
              "example": "Storer's vehicle 19"
            }
          }
        },
        "vehicleCondition": {
          "description": "The condition of vechile on which DVIR was done.",
          "type": "string",
          "example": "SATISFACTORY"
        },
        "vehicleDefects": {
          "description": "Defects registered for the vehicle which was part of the DVIR.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "comment": {
                "description": "The comment describing the type of DVIR defect",
                "type": "string",
                "example": "Air Compressor not working"
              },
              "defectType": {
                "description": "The type of DVIR defect",
                "type": "string",
                "example": "Air Compressor"
              }
            }
          }
        }
      }
    },
    "DvirListResponse": {
      "type": "object",
      "properties": {
        "dvirs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DvirBase"
          }
        }
      }
    },
    "ErrorResponse": {
      "description": "Error message describing why the request failed.",
      "type": "string"
    },
    "HosAuthenticationLogsResponse": {
      "type": "object",
      "properties": {
        "authenticationLogs": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "actionType": {
                "description": "The log type - one of 'signin' or 'signout'",
                "type": "string",
                "example": "signin"
              },
              "address": {
                "description": "DEPRECATED: THIS FIELD IS NOT POPULATED",
                "type": "string",
                "example": "THIS FIELD IS NOT USED"
              },
              "addressName": {
                "description": "DEPRECATED: THIS FIELD IS NOT POPULATED",
                "type": "string",
                "example": "THIS FIELD IS NOT USED"
              },
              "city": {
                "description": "DEPRECATED: THIS FIELD IS NOT POPULATED",
                "type": "string",
                "example": "THIS FIELD IS NOT USED"
              },
              "happenedAtMs": {
                "description": "The time at which the event was recorded in UNIX milliseconds.",
                "type": "integer",
                "format": "int64",
                "example": 1462881998034
              },
              "state": {
                "description": "DEPRECATED: THIS FIELD IS NOT POPULATED",
                "type": "string",
                "example": "THIS FIELD IS NOT USED"
              }
            }
          }
        }
      }
    },
    "HosLogsResponse": {
      "type": "object",
      "properties": {
        "logs": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "codriverIds": {
                "type": "array",
                "items": {
                  "description": "Ids of codrivers during any of the logged trips",
                  "type": "number",
                  "example": 445
                }
              },
              "driverId": {
                "description": "ID of the driver.",
                "type": "integer",
                "format": "int64",
                "example": 444
              },
              "groupId": {
                "description": "ID of the group.",
                "type": "integer",
                "format": "int64",
                "example": 101
              },
              "hosStatusType": {
                "description":
                  "The Hours of Service status type. One of `OFF_DUTY`, `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`, `PERSONAL_CONVEYANCE`.",
                "type": "string",
                "example": "OFF_DUTY"
              },
              "locCity": {
                "description": "City in which the log was recorded.",
                "type": "string",
                "example": "Ahwatukee"
              },
              "locLat": {
                "description": "Latitude at which the log was recorded.",
                "type": "number",
                "format": "float",
                "example": 23.413702345
              },
              "locLng": {
                "description": "Longitude at which the log was recorded.",
                "type": "number",
                "format": "float",
                "example": -98.502888123
              },
              "locName": {
                "description": "Name of location at which the log was recorded.",
                "type": "string",
                "example": "McLean Site A"
              },
              "locState": {
                "description": "State in which the log was recorded.",
                "type": "string",
                "example": "Arizona"
              },
              "logStartMs": {
                "description": "The time at which the log/HOS status started in UNIX milliseconds.",
                "type": "integer",
                "format": "int64",
                "example": 1462881998034
              },
              "remark": {
                "description": "Remark associated with the log entry.",
                "type": "string",
                "example": "Lunch Break"
              },
              "vehicleId": {
                "description": "ID of the vehicle.",
                "type": "integer",
                "format": "int64",
                "example": 112
              }
            }
          }
        }
      }
    },
    "HosLogsSummaryResponse": {
      "type": "object",
      "properties": {
        "drivers": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "currentDutyStatusCode": {
                "description": "The Hours of Service status type.",
                "type": "string",
                "enum": [
                  "AUTO_DUTY",
                  "DRIVING",
                  "OFF_DUTY",
                  "ON_DUTY",
                  "PERSONAL_CONVEYANCE",
                  "SLEEPER_BED",
                  "YARD_MOVE",
                  "WAITING_TIME"
                ],
                "example": "OFF_DUTY"
              },
              "cycleRemaining": {
                "description": "The amount of remaining cycle time (in ms).",
                "type": "integer",
                "format": "int64",
                "example": 252000000
              },
              "cycleTomorrow": {
                "description": "The amount of cycle time (in ms) available tomorrow.",
                "type": "integer",
                "format": "int64",
                "example": 252000000
              },
              "driveMsToday": {
                "description": "The amount of driving time today (in ms).",
                "type": "number",
                "format": "int64",
                "example": 252000000
              },
              "driverId": {
                "description": "ID of the driver.",
                "type": "integer",
                "format": "int64",
                "example": 444
              },
              "driverName": {
                "description": "Name of the driver.",
                "type": "string",
                "example": "Fred Jacobs"
              },
              "drivingInViolationCycle": {
                "description": "The amount of driving time in violation in this cycle (in ms).",
                "type": "integer",
                "format": "int64",
                "example": 50400000
              },
              "drivingInViolationToday": {
                "description": "The amount of driving time in violation today (in ms).",
                "type": "integer",
                "format": "int64",
                "example": 39600000
              },
              "onDutyMsToday": {
                "description": "The amount of on duty time today (in ms).",
                "type": "number",
                "format": "int64",
                "example": 252000000
              },
              "pendingDriveMsToday": {
                "description": "The amount of driving time today for pending logs (in ms).",
                "type": "number",
                "format": "int64",
                "example": 252000000
              },
              "pendingOnDutyMsToday": {
                "description": "The amount of on duty time today for pending logs (in ms).",
                "type": "number",
                "format": "int64",
                "example": 252000000
              },
              "shiftDriveRemaining": {
                "description": "The amount of remaining shift drive time (in ms).",
                "type": "integer",
                "format": "int64",
                "example": 39600000
              },
              "shiftRemaining": {
                "description": "The amount of remaining shift time (in ms).",
                "type": "integer",
                "format": "int64",
                "example": 50400000
              },
              "timeInCurrentStatus": {
                "description": "The amount of time (in ms) that the driver has been in the current `dutyStatus`.",
                "type": "integer",
                "format": "int64",
                "example": 5000
              },
              "timeUntilBreak": {
                "description":
                  "The amount of time (in ms) remaining until the driver cannot drive without a rest break.",
                "type": "integer",
                "format": "int64",
                "example": 28800000
              },
              "vehicleName": {
                "description": "Name of the vehicle.",
                "type": "string",
                "example": "Vehicle 1"
              }
            }
          }
        },
        "pagination": {
          "type": "object",
          "required": ["hasNextPage", "endCursor"],
          "properties": {
            "endCursor": {
              "description":
                "Cursor identifier representing the last element in the response. This value should be used in conjunction with a subsequent request's 'after' query parameter.",
              "type": "string",
              "example": "MTA1MDc5MB=="
            },
            "hasNextPage": {
              "description": "True if there are more pages of results after this response.",
              "type": "boolean"
            }
          }
        }
      }
    },
    "HumidityResponse": {
      "description": "Contains the current humidity of a sensor.",
      "type": "object",
      "properties": {
        "groupId": {
          "type": "integer",
          "format": "int64",
          "example": 101
        },
        "sensors": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "humidity": {
                "description": "Currently reported relative humidity in percent, from 0-100.",
                "type": "integer",
                "example": 53
              },
              "humidityTime": {
                "description": "The timestamp of reported relative humidity, specified in RFC 3339 time.",
                "type": "string",
                "example": "2019-04-17T16:42:55Z"
              },
              "id": {
                "description": "ID of the sensor.",
                "type": "integer",
                "format": "int64",
                "example": 122
              },
              "name": {
                "description": "Name of the sensor.",
                "type": "string",
                "example": "Freezer Humidity Sensor"
              },
              "trailerId": {
                "description":
                  "ID of the trailer associated with the sensor for the data point. If no trailer is connected, this parameter will not be reported.",
                "type": "integer",
                "example": 123
              },
              "vehicleId": {
                "description":
                  "ID of the vehicle associated with the sensor for the data point. If no vehicle is connected, this parameter will not be reported.",
                "type": "integer",
                "example": 124
              }
            }
          }
        }
      }
    },
    "Sensor": {
      "description": "Contains information about a sensor.",
      "type": "object",
      "required": ["id"],
      "properties": {
        "id": {
          "description": "ID of the sensor.",
          "type": "integer",
          "format": "int64",
          "example": 123
        },
        "macAddress": {
          "description": "MAC address of the sensor.",
          "type": "string",
          "example": "11:11:11:11:11:11"
        },
        "name": {
          "description": "Name of the sensor.",
          "type": "string",
          "example": "Freezer ABC"
        }
      }
    },
    "SensorHistoryResponse": {
      "description":
        "Contains the results for a sensor history request. Each result contains a timestamp and datapoint for each requested (sensor, field) pair.",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "series": {
                "description": "List of datapoints, one for each requested (sensor, field) pair.",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64",
                  "example": 1
                }
              },
              "timeMs": {
                "description": "Timestamp in UNIX milliseconds.",
                "type": "integer",
                "example": 1453449599999
              }
            }
          }
        }
      }
    },
    "TemperatureResponse": {
      "description": "Contains the current temperatures of a sensor.",
      "type": "object",
      "properties": {
        "groupId": {
          "type": "integer",
          "format": "int64",
          "example": 101
        },
        "sensors": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "ambientTemperature": {
                "description": "Currently reported ambient temperature in millidegrees celsius.",
                "type": "integer",
                "example": 11057
              },
              "ambientTemperatureTime": {
                "description": "The timestamp of reported ambient temperature, specified in RFC 3339 time.",
                "type": "string",
                "example": "2019-04-17T16:42:55Z"
              },
              "id": {
                "description": "ID of the sensor.",
                "type": "integer",
                "format": "int64",
                "example": 122
              },
              "name": {
                "description": "Name of the sensor.",
                "type": "string",
                "example": "Freezer Temp Sensor"
              },
              "probeTemperature": {
                "description":
                  "Currently reported probe temperature in millidegrees celsius. If no probe is connected, this parameter will not be reported.",
                "type": "integer",
                "example": -20145
              },
              "probeTemperatureTime": {
                "description": "The timestamp of reported probe temperature, specified in RFC 3339 time.",
                "type": "string",
                "example": "2019-04-17T16:42:55Z"
              },
              "trailerId": {
                "description":
                  "ID of the trailer associated with the sensor for the data point. If no trailer is connected, this parameter will not be reported.",
                "type": "integer",
                "example": 123
              },
              "vehicleId": {
                "description":
                  "ID of the vehicle associated with the sensor for the data point. If no vehicle is connected, this parameter will not be reported.",
                "type": "integer",
                "example": 124
              }
            }
          }
        }
      }
    },
    "TripResponse": {
      "description":
        "Contains the trips for the vehicle in the requested timeframe. A trip is represented as an object that contains startMs, startLocation, startAddress, startCoordinates, endMs, endLocation, endAddress and endCoordinates. Ongoing trips will be returned with 9223372036854775807 as their endMs.",
      "type": "object",
      "properties": {
        "trips": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "assetIds": {
                "description": "List of associated asset IDs",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                },
                "example": [122]
              },
              "codriverIds": {
                "description": "List of codriver IDs",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                },
                "example": [122]
              },
              "distanceMeters": {
                "description": "Length of the trip in meters.",
                "type": "integer",
                "example": 2500
              },
              "driverId": {
                "description": "ID of the driver.",
                "type": "integer",
                "example": 719
              },
              "endAddress": {
                "description":
                  "Text representation of nearest identifiable location to the end (latitude, longitude) coordinates.",
                "type": "object",
                "properties": {
                  "address": {
                    "description": "The formatted address",
                    "type": "string",
                    "example": "123 Main St, Sunnyvale, CA 94089"
                  },
                  "id": {
                    "description": "The ID of the address",
                    "type": "number",
                    "format": "int64",
                    "example": 581
                  },
                  "name": {
                    "description": "The name of the address",
                    "type": "string",
                    "example": "Ramen Tatsunoya"
                  }
                }
              },
              "endCoordinates": {
                "description": "End (latitude, longitude) in decimal degrees.",
                "type": "object",
                "properties": {
                  "latitude": {
                    "type": "number",
                    "format": "double",
                    "example": 23.413702345
                  },
                  "longitude": {
                    "type": "number",
                    "format": "double",
                    "example": -91.502888123
                  }
                }
              },
              "endLocation": {
                "description": "Geocoded street address of start (latitude, longitude) coordinates.",
                "type": "string",
                "example": "571 S Lake Ave, Pasadena, CA 91101"
              },
              "endMs": {
                "description":
                  "End of the trip in UNIX milliseconds. Ongoing trips are indicated by an endMs value of 9223372036854775807.",
                "type": "integer",
                "example": 1462881998034
              },
              "endOdometer": {
                "description": "Odometer reading (in meters) at the end of the trip.",
                "type": "integer",
                "example": 210430500
              },
              "fuelConsumedMl": {
                "description": "Amount in milliliters of fuel consumed on this trip.",
                "type": "integer",
                "example": 75700
              },
              "startAddress": {
                "description":
                  "Text representation of nearest identifiable location to the start (latitude, longitude) coordinates.",
                "type": "object",
                "properties": {
                  "address": {
                    "description": "The formatted address",
                    "type": "string",
                    "example": "123 Main St, Sunnyvale, CA 94089"
                  },
                  "id": {
                    "description": "The ID of the address",
                    "type": "number",
                    "format": "int64",
                    "example": 581
                  },
                  "name": {
                    "description": "The name of the address",
                    "type": "string",
                    "example": "Ramen Tatsunoya"
                  }
                }
              },
              "startCoordinates": {
                "description": "Start (latitude, longitude) in decimal degrees.",
                "type": "object",
                "properties": {
                  "latitude": {
                    "type": "number",
                    "format": "double",
                    "example": 29.443702345
                  },
                  "longitude": {
                    "type": "number",
                    "format": "double",
                    "example": -98.502888123
                  }
                }
              },
              "startLocation": {
                "description": "Geocoded street address of start (latitude, longitude) coordinates.",
                "type": "string",
                "example": "16 N Fair Oaks Ave, Pasadena, CA 91103"
              },
              "startMs": {
                "description": "Beginning of the trip in UNIX milliseconds.",
                "type": "integer",
                "example": 1462878398034
              },
              "startOdometer": {
                "description": "Odometer reading (in meters) at the beginning of the trip.",
                "type": "integer",
                "example": 210430450
              },
              "tollMeters": {
                "description": "Length in meters trip spent on toll roads.",
                "type": "integer",
                "example": 32000
              }
            }
          }
        }
      }
    },
    "VehicleMaintenance": {
      "description": "Contains any J1939/Passenger engine light warnings and engine faults.",
      "type": "object",
      "required": ["id"],
      "properties": {
        "id": {
          "description": "ID of the vehicle.",
          "type": "integer",
          "format": "int64",
          "example": 112
        },
        "j1939": {
          "description": "J1939 based data. Null if no data is available.",
          "type": "object",
          "properties": {
            "checkEngineLight": {
              "description": "J1939 check engine lights.",
              "type": "object",
              "properties": {
                "emissionsIsOn": {
                  "type": "boolean"
                },
                "protectIsOn": {
                  "type": "boolean"
                },
                "stopIsOn": {
                  "type": "boolean"
                },
                "warningIsOn": {
                  "type": "boolean"
                }
              }
            },
            "diagnosticTroubleCodes": {
              "description": "J1939 DTCs.",
              "type": "array",
              "items": {
                "type": "object",
                "required": ["fmiId", "fmiText", "occurrenceCount", "spnDescription", "spnId", "txId"],
                "properties": {
                  "fmiId": {
                    "type": "integer"
                  },
                  "fmiText": {
                    "type": "string"
                  },
                  "occurrenceCount": {
                    "type": "integer"
                  },
                  "spnDescription": {
                    "type": "string"
                  },
                  "spnId": {
                    "type": "integer"
                  },
                  "txId": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "passenger": {
          "description": "Passenger vehicle data. Null if no data is available.",
          "type": "object",
          "properties": {
            "checkEngineLight": {
              "description": "Passenger vehicle check engine light.",
              "type": "object",
              "properties": {
                "isOn": {
                  "type": "boolean"
                }
              }
            },
            "diagnosticTroubleCodes": {
              "description": "Passenger vehicle DTCs.",
              "type": "array",
              "items": {
                "type": "object",
                "required": ["dtcId", "dtcDescription", "dtcShortCode"],
                "properties": {
                  "dtcDescription": {
                    "type": "string"
                  },
                  "dtcId": {
                    "type": "integer"
                  },
                  "dtcShortCode": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "allRouteJobUpdates": {
      "type": "object",
      "properties": {
        "job_updates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/jobUpdateObject"
          }
        },
        "sequence_id": {
          "description": "Sequence ID of the last update returned in the response",
          "type": "string",
          "example": "eyJpZCI6MywiY3JlYXRlZF9hdCI6MTQ5OTQyOTIyMDAwMn0="
        }
      }
    },
    "jobStatus": {
      "description": "The current state of the dispatch job.",
      "type": "string",
      "enum": [
        "JobState_Unassigned",
        "JobState_Scheduled",
        "JobState_EnRoute",
        "JobState_Arrived",
        "JobState_Completed",
        "JobState_Skipped"
      ],
      "example": "JobState_Arrived"
    },
    "jobUpdateObject": {
      "type": "object",
      "properties": {
        "changed_at_ms": {
          "description": "Timestamp that this event was updated, represented as Unix milliseconds since epoch.",
          "type": "integer",
          "format": "int64",
          "example": 1462881998034
        },
        "job_id": {
          "description": "ID of the Samsara job.",
          "type": "integer",
          "format": "int64",
          "example": 773
        },
        "job_state": {
          "$ref": "#/definitions/jobStatus"
        },
        "prev_job_state": {
          "$ref": "#/definitions/prevJobStatus"
        },
        "route": {
          "$ref": "#/definitions/DispatchRoute"
        },
        "route_id": {
          "description": "ID of the Samsara dispatch route.",
          "type": "integer",
          "format": "int64",
          "example": 556
        }
      }
    },
    "prevJobStatus": {
      "description": "The previous state of the dispatch job.",
      "type": "string",
      "enum": [
        "JobState_Unassigned",
        "JobState_Scheduled",
        "JobState_EnRoute",
        "JobState_Arrived",
        "JobState_Completed",
        "JobState_Skipped"
      ],
      "example": "JobState_EnRoute"
    }
  },
  "parameters": {
    "createDvirParam": {
      "description": "DVIR creation body",
      "name": "createDvirParam",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": ["safe", "inspectionType", "userEmail"],
        "properties": {
          "inspectionType": {
            "description": "Only type 'mechanic' is currently accepted.",
            "type": "string",
            "enum": ["mechanic"],
            "example": "mechanic"
          },
          "mechanicNotes": {
            "description": "Any notes from the mechanic.",
            "type": "string",
            "example": "Replaced headlight on passenger side."
          },
          "odometerMiles": {
            "description": "The current odometer of the vehicle.",
            "type": "integer",
            "example": 38426
          },
          "previousDefectsCorrected": {
            "description":
              "Whether any previous defects were corrected. If this vehicle or trailer was previously marked unsafe, and this DVIR marks it as safe, either previousDefectsCorrected or previousDefectsIgnored must be true.",
            "type": "boolean",
            "example": true
          },
          "previousDefectsIgnored": {
            "description":
              "Whether any previous defects were ignored. If this vehicle or trailer was previously marked unsafe, and this DVIR marks it as safe, either previousDefectsCorrected or previousDefectsIgnored must be true.",
            "type": "boolean",
            "example": false
          },
          "safe": {
            "description": "Whether or not this vehicle or trailer is safe to drive.",
            "type": "string",
            "enum": ["safe", "unsafe"],
            "example": "safe"
          },
          "trailerId": {
            "description": "Id of trailer being inspected. Either vehicleId or trailerId must be provided.",
            "type": "integer",
            "example": 11
          },
          "userEmail": {
            "description":
              "The Samsara login email for the person creating the DVIR. The email must correspond to a Samsara user's email.",
            "type": "string",
            "example": "j.smith@yahoo.com"
          },
          "vehicleId": {
            "description": "Id of vehicle being inspected. Either vehicleId or trailerId must be provided.",
            "type": "integer",
            "example": 10
          }
        }
      }
    },
    "groupIdBodyParam": {
      "description": "Optional group ID if the organization has multiple groups (uncommon).",
      "name": "groupIdBodyParam",
      "in": "body",
      "schema": {
        "type": "object",
        "required": ["groupId"],
        "properties": {
          "groupId": {
            "description": "Optional group ID if the organization has multiple groups (uncommon).",
            "type": "integer",
            "format": "int64",
            "example": 101
          }
        }
      }
    },
    "groupIdParam": {
      "type": "integer",
      "format": "int64",
      "description": "Optional group ID if the organization has multiple groups (uncommon).",
      "name": "group_id",
      "in": "query"
    },
    "groupIdQueryParam": {
      "type": "integer",
      "format": "int64",
      "description": "Optional group ID if the organization has multiple groups (uncommon).",
      "name": "groupId",
      "in": "query"
    },
    "jobUpdatesIncludeParam": {
      "type": "string",
      "description": "Optionally set include=route to include route object in response payload.",
      "name": "include",
      "in": "query"
    },
    "lastReceivedSequenceIDParam": {
      "type": "string",
      "description":
        "Sequence ID from the response payload of the last request. Defaults to fetching updates from last 24 hours.",
      "name": "sequence_id",
      "in": "query"
    },
    "routeCreateParam": {
      "name": "createDispatchRouteParams",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/DispatchRouteCreate"
      }
    },
    "routeDurationParam": {
      "type": "integer",
      "format": "int64",
      "description":
        "Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.",
      "name": "duration",
      "in": "query"
    },
    "routeEndTimeParam": {
      "type": "integer",
      "format": "int64",
      "description":
        "Time in unix milliseconds that represents the oldest routes to return. Used in combination with duration. Defaults to now.",
      "name": "end_time",
      "in": "query"
    },
    "routeHistoryEndTimeParam": {
      "type": "integer",
      "format": "int64",
      "description":
        "Timestamp representing the end of the period to fetch, inclusive. Used in combination with start_time. Defaults to nowMs.",
      "name": "end_time",
      "in": "query"
    },
    "routeHistoryStartTimeParam": {
      "type": "integer",
      "format": "int64",
      "description":
        "Timestamp representing the start of the period to fetch, inclusive. Used in combination with end_time. Defaults to 0.",
      "name": "start_time",
      "in": "query"
    },
    "routeUpdateParam": {
      "name": "updateDispatchRouteParams",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/DispatchRouteUpdate"
      }
    },
    "sensorParam": {
      "description": "Group ID and list of sensor IDs to query.",
      "name": "sensorParam",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": ["groupId", "sensors"],
        "properties": {
          "groupId": {
            "description": "Optional group ID if the organization has multiple groups (uncommon).",
            "type": "integer",
            "format": "int64",
            "example": 101
          },
          "sensors": {
            "description": "List of sensor IDs to query.",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "example": [122]
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Routes",
      "description":
        "<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nThese endpoints are still on V1 and may not adhere to \"Kondo\" standards!\n</nh>\n</n>\n"
    },
    {
      "name": "HOS",
      "description":
        "<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nThese endpoints are still on V1 and may not adhere to \"Kondo\" standards!\n</nh>\n</n>\n"
    },
    {
      "name": "Maintenance",
      "description":
        "<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nThese endpoints are still on V1 and may not adhere to \"Kondo\" standards!\n</nh>\n</n>\n"
    },
    {
      "name": "Messages",
      "description":
        "<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nThese endpoints are still on V1 and may not adhere to \"Kondo\" standards!\n</nh>\n</n>\n"
    },
    {
      "name": "Sensors",
      "description":
        "<n class=\"warning\">\n<nh>\n<i class=\"fa fa-exclamation-circle\"></i>\nThese endpoints are still on V1 and may not adhere to \"Kondo\" standards!\n</nh>\n</n>\n"
    }
  ]
}
